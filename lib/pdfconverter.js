(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("PdfConverterLibrary", [], factory);
	else if(typeof exports === 'object')
		exports["PdfConverterLibrary"] = factory();
	else
		root["PdfConverterLibrary"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonpPdfConverterLibrary"];
/******/ 	window["webpackJsonpPdfConverterLibrary"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);

/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".pdfconverter.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(21), __webpack_require__(305)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof exports !== "undefined") {
			factory(exports, require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('./components/App.jsx'), require('./models/AppState.jsx'));
		} else {
			var mod = {
				exports: {}
			};
			factory(mod.exports, global.classCallCheck, global.createClass, global.App, global.AppState);
			global.index = mod.exports;
		}
	})(this, function (exports, _classCallCheck2, _createClass2, _App, _AppState) {
		'use strict';

		Object.defineProperty(exports, "__esModule", {
			value: true
		});
		exports.Converter = undefined;

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _createClass3 = _interopRequireDefault(_createClass2);

		var _App2 = _interopRequireDefault(_App);

		var _AppState2 = _interopRequireDefault(_AppState);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : {
				default: obj
			};
		}

		var Converter = exports.Converter = function () {
			function Converter() {
				(0, _classCallCheck3.default)(this, Converter);

				this.app = new _App2.default(new _AppState2.default());
				this.result = "";
			}

			/*uploadFile(url){
	  	this.app.uploadFile(url);
	  }
	  */

			(0, _createClass3.default)(Converter, [{
				key: 'uploadFile',
				value: function uploadFile(buffer) {
					this.app.uploadFile(buffer);
				}
			}, {
				key: 'convert',
				value: function convert() {
					this.result = this.app.convert();
				}
			}, {
				key: 'result',
				value: function result() {
					return this.result;
				}
			}]);
			return Converter;
		}();
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _defineProperty = __webpack_require__(3);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(4), __esModule: true };

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(5);
	var $Object = __webpack_require__(8).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(6);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(16), 'Object', { defineProperty: __webpack_require__(12).f });


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(7);
	var core = __webpack_require__(8);
	var ctx = __webpack_require__(9);
	var hide = __webpack_require__(11);
	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && key in exports) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.5.1' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(10);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(12);
	var createDesc = __webpack_require__(20);
	module.exports = __webpack_require__(16) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(13);
	var IE8_DOM_DEFINE = __webpack_require__(15);
	var toPrimitive = __webpack_require__(19);
	var dP = Object.defineProperty;

	exports.f = __webpack_require__(16) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(16) && !__webpack_require__(17)(function () {
	  return Object.defineProperty(__webpack_require__(18)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(17)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 17 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14);
	var document = __webpack_require__(7).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(14);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(22), __webpack_require__(1), __webpack_require__(2), __webpack_require__(77), __webpack_require__(78), __webpack_require__(79), __webpack_require__(303)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/promise'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('node-fetch'), require('file-type'), require('./Parser.jsx'), require('./Result.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.promise, global.classCallCheck, global.createClass, global.nodeFetch, global.fileType, global.Parser, global.Result);
	        global.App = mod.exports;
	    }
	})(this, function (exports, _promise, _classCallCheck2, _createClass2, _nodeFetch, _fileType, _Parser, _Result) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _promise2 = _interopRequireDefault(_promise);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

	    var _fileType2 = _interopRequireDefault(_fileType);

	    var _Parser2 = _interopRequireDefault(_Parser);

	    var _Result2 = _interopRequireDefault(_Result);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var App = function () {
	        function App(appState) {
	            (0, _classCallCheck3.default)(this, App);

	            this.appState = appState;
	        }

	        /*uploadFile(url){
	               fetch(url)
	                 .then(res => res.text())
	                 .then(body => console.log(body));
	              fetch(url)
	                 .then(res => res.buffer())
	                 .then(buffer => fileType(buffer)).then(type => { 
	                     console.log( fileType(buffer) );
	                    
	                });
	        }*/

	        (0, _createClass3.default)(App, [{
	            key: 'uploadFile',
	            value: function uploadFile(buffer) {
	                console.log("uploadFile");
	                var appState = this.appState;

	                var resultConvert = new _Result2.default();

	                var parser = new _Parser2.default(buffer);
	                parser.parsePages().then(function (result) {

	                    //console.log("document: " + result.document);
	                    console.log(result.pages);
	                    //console.log("fontMap: " + result.fontMap);

	                    return _promise2.default.all([result, parser.metadataParsed(result.document)]);
	                }).then(function (results) {

	                    var pages = results[0].pages;
	                    var fontMap = results[0].fontMap;
	                    console.log(fontMap);
	                    var metadata = results[1];

	                    appState.storePdfPages(metadata, fontMap, pages);
	                    var text = resultConvert.convertToMarkdown(appState.pages, appState.transformations);
	                    console.log("text: " + text);
	                });
	            }
	        }, {
	            key: 'convert',
	            value: function convert() {

	                //const appState = this.props.appState;

	                /*var mainView;
	                switch (this.props.appState.mainView) {
	                    case View.UPLOAD:
	                        mainView = <UploadView uploadPdfFunction={ appState.storeFileBuffer } />
	                        break;
	                    case View.LOADING:
	                        const loading = new Loading(this.appState.fileBuffer);
	                        this.appState.storePdfPagesFunction = appState.storePdfPages;
	                        break;
	                    case View.RESULT:
	                        const pages = appState.pages;
	                        const transformations = appState.transformations;
	                        
	                        var result = new Result(pages, transformations);
	                        mainView = <ResultView pages={ appState.pages } 
	                        transformations={ appState.transformations } />
	                        return .convertToMarkdown();
	                    case View.DEBUG:
	                        mainView = <DebugView pages={ appState.pages } 
	                        transformations={ appState.transformations } />
	                        break;
	                    default:
	                        throw `View ${this.appState.mainView} not supported!`;
	                }*/

	            }
	        }]);
	        return App;
	    }();

	    exports.default = App;
	});

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(23), __esModule: true };

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(24);
	__webpack_require__(25);
	__webpack_require__(54);
	__webpack_require__(58);
	__webpack_require__(75);
	__webpack_require__(76);
	module.exports = __webpack_require__(8).Promise;


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(26)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(29)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(27);
	var defined = __webpack_require__(28);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 28 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(30);
	var $export = __webpack_require__(6);
	var redefine = __webpack_require__(31);
	var hide = __webpack_require__(11);
	var has = __webpack_require__(32);
	var Iterators = __webpack_require__(33);
	var $iterCreate = __webpack_require__(34);
	var setToStringTag = __webpack_require__(50);
	var getPrototypeOf = __webpack_require__(52);
	var ITERATOR = __webpack_require__(51)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

	module.exports = true;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(11);


/***/ }),
/* 32 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 33 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(35);
	var descriptor = __webpack_require__(20);
	var setToStringTag = __webpack_require__(50);
	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(11)(IteratorPrototype, __webpack_require__(51)('iterator'), function () { return this; });

	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(13);
	var dPs = __webpack_require__(36);
	var enumBugKeys = __webpack_require__(48);
	var IE_PROTO = __webpack_require__(45)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(18)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(49).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(12);
	var anObject = __webpack_require__(13);
	var getKeys = __webpack_require__(37);

	module.exports = __webpack_require__(16) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(38);
	var enumBugKeys = __webpack_require__(48);

	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(32);
	var toIObject = __webpack_require__(39);
	var arrayIndexOf = __webpack_require__(42)(false);
	var IE_PROTO = __webpack_require__(45)('IE_PROTO');

	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(40);
	var defined = __webpack_require__(28);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(41);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(39);
	var toLength = __webpack_require__(43);
	var toAbsoluteIndex = __webpack_require__(44);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(27);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(27);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(46)('keys');
	var uid = __webpack_require__(47);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(7);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 48 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(7).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(12).f;
	var has = __webpack_require__(32);
	var TAG = __webpack_require__(51)('toStringTag');

	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(46)('wks');
	var uid = __webpack_require__(47);
	var Symbol = __webpack_require__(7).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(32);
	var toObject = __webpack_require__(53);
	var IE_PROTO = __webpack_require__(45)('IE_PROTO');
	var ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(28);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(55);
	var global = __webpack_require__(7);
	var hide = __webpack_require__(11);
	var Iterators = __webpack_require__(33);
	var TO_STRING_TAG = __webpack_require__(51)('toStringTag');

	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');

	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(56);
	var step = __webpack_require__(57);
	var Iterators = __webpack_require__(33);
	var toIObject = __webpack_require__(39);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(29)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 56 */
/***/ (function(module, exports) {

	module.exports = function () { /* empty */ };


/***/ }),
/* 57 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(30);
	var global = __webpack_require__(7);
	var ctx = __webpack_require__(9);
	var classof = __webpack_require__(59);
	var $export = __webpack_require__(6);
	var isObject = __webpack_require__(14);
	var aFunction = __webpack_require__(10);
	var anInstance = __webpack_require__(60);
	var forOf = __webpack_require__(61);
	var speciesConstructor = __webpack_require__(65);
	var task = __webpack_require__(66).set;
	var microtask = __webpack_require__(68)();
	var newPromiseCapabilityModule = __webpack_require__(69);
	var perform = __webpack_require__(70);
	var promiseResolve = __webpack_require__(71);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(51)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch (e) { /* empty */ }
	}();

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value);
	            if (domain) domain.exit();
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  if (promise._h == 1) return false;
	  var chain = promise._a || promise._c;
	  var i = 0;
	  var reaction;
	  while (chain.length > i) {
	    reaction = chain[i++];
	    if (reaction.fail || !isUnhandled(reaction.promise)) return false;
	  } return true;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(72)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(50)($Promise, PROMISE);
	__webpack_require__(73)(PROMISE);
	Wrapper = __webpack_require__(8)[PROMISE];

	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(74)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(41);
	var TAG = __webpack_require__(51)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 60 */
/***/ (function(module, exports) {

	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(9);
	var call = __webpack_require__(62);
	var isArrayIter = __webpack_require__(63);
	var anObject = __webpack_require__(13);
	var toLength = __webpack_require__(43);
	var getIterFn = __webpack_require__(64);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(13);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(33);
	var ITERATOR = __webpack_require__(51)('iterator');
	var ArrayProto = Array.prototype;

	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(59);
	var ITERATOR = __webpack_require__(51)('iterator');
	var Iterators = __webpack_require__(33);
	module.exports = __webpack_require__(8).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(13);
	var aFunction = __webpack_require__(10);
	var SPECIES = __webpack_require__(51)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(9);
	var invoke = __webpack_require__(67);
	var html = __webpack_require__(49);
	var cel = __webpack_require__(18);
	var global = __webpack_require__(7);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(41)(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function (id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};


/***/ }),
/* 67 */
/***/ (function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(7);
	var macrotask = __webpack_require__(66).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(41)(process) == 'process';

	module.exports = function () {
	  var head, last, notify;

	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if (Observer) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    var promise = Promise.resolve();
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 25.4.1.5 NewPromiseCapability(C)
	var aFunction = __webpack_require__(10);

	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}

	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};


/***/ }),
/* 70 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(13);
	var isObject = __webpack_require__(14);
	var newPromiseCapability = __webpack_require__(69);

	module.exports = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(11);
	module.exports = function (target, src, safe) {
	  for (var key in src) {
	    if (safe && target[key]) target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(7);
	var core = __webpack_require__(8);
	var dP = __webpack_require__(12);
	var DESCRIPTORS = __webpack_require__(16);
	var SPECIES = __webpack_require__(51)('species');

	module.exports = function (KEY) {
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(51)('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }

	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-promise-finally
	'use strict';
	var $export = __webpack_require__(6);
	var core = __webpack_require__(8);
	var global = __webpack_require__(7);
	var speciesConstructor = __webpack_require__(65);
	var promiseResolve = __webpack_require__(71);

	$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = speciesConstructor(this, core.Promise || global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-promise-try
	var $export = __webpack_require__(6);
	var newPromiseCapability = __webpack_require__(69);
	var perform = __webpack_require__(70);

	$export($export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = newPromiseCapability.f(this);
	  var result = perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });


/***/ }),
/* 77 */
/***/ (function(module, exports) {

	module.exports = exports = window.fetch;
	exports.Headers = window.Headers;
	exports.Request = window.Request;
	exports.Response = window.Response;


/***/ }),
/* 78 */
/***/ (function(module, exports) {

	'use strict';
	const toBytes = s => Array.from(s).map(c => c.charCodeAt(0));
	const xpiZipFilename = toBytes('META-INF/mozilla.rsa');
	const oxmlContentTypes = toBytes('[Content_Types].xml');
	const oxmlRels = toBytes('_rels/.rels');

	module.exports = input => {
		const buf = new Uint8Array(input);

		if (!(buf && buf.length > 1)) {
			return null;
		}

		const check = (header, opts) => {
			opts = Object.assign({
				offset: 0
			}, opts);

			for (let i = 0; i < header.length; i++) {
				// If a bitmask is set
				if (opts.mask) {
					// If header doesn't equal `buf` with bits masked off
					if (header[i] !== (opts.mask[i] & buf[i + opts.offset])) {
						return false;
					}
				} else if (header[i] !== buf[i + opts.offset]) {
					return false;
				}
			}

			return true;
		};

		if (check([0xFF, 0xD8, 0xFF])) {
			return {
				ext: 'jpg',
				mime: 'image/jpeg'
			};
		}

		if (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {
			return {
				ext: 'png',
				mime: 'image/png'
			};
		}

		if (check([0x47, 0x49, 0x46])) {
			return {
				ext: 'gif',
				mime: 'image/gif'
			};
		}

		if (check([0x57, 0x45, 0x42, 0x50], {offset: 8})) {
			return {
				ext: 'webp',
				mime: 'image/webp'
			};
		}

		if (check([0x46, 0x4C, 0x49, 0x46])) {
			return {
				ext: 'flif',
				mime: 'image/flif'
			};
		}

		// Needs to be before `tif` check
		if (
			(check([0x49, 0x49, 0x2A, 0x0]) || check([0x4D, 0x4D, 0x0, 0x2A])) &&
			check([0x43, 0x52], {offset: 8})
		) {
			return {
				ext: 'cr2',
				mime: 'image/x-canon-cr2'
			};
		}

		if (
			check([0x49, 0x49, 0x2A, 0x0]) ||
			check([0x4D, 0x4D, 0x0, 0x2A])
		) {
			return {
				ext: 'tif',
				mime: 'image/tiff'
			};
		}

		if (check([0x42, 0x4D])) {
			return {
				ext: 'bmp',
				mime: 'image/bmp'
			};
		}

		if (check([0x49, 0x49, 0xBC])) {
			return {
				ext: 'jxr',
				mime: 'image/vnd.ms-photo'
			};
		}

		if (check([0x38, 0x42, 0x50, 0x53])) {
			return {
				ext: 'psd',
				mime: 'image/vnd.adobe.photoshop'
			};
		}

		// Zip-based file formats
		// Need to be before the `zip` check
		if (check([0x50, 0x4B, 0x3, 0x4])) {
			if (
				check([0x6D, 0x69, 0x6D, 0x65, 0x74, 0x79, 0x70, 0x65, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x65, 0x70, 0x75, 0x62, 0x2B, 0x7A, 0x69, 0x70], {offset: 30})
			) {
				return {
					ext: 'epub',
					mime: 'application/epub+zip'
				};
			}

			// Assumes signed `.xpi` from addons.mozilla.org
			if (check(xpiZipFilename, {offset: 30})) {
				return {
					ext: 'xpi',
					mime: 'application/x-xpinstall'
				};
			}

			// https://github.com/file/file/blob/master/magic/Magdir/msooxml
			if (check(oxmlContentTypes, {offset: 30}) || check(oxmlRels, {offset: 30})) {
				const sliced = buf.subarray(4, 4 + 2000);
				const nextZipHeaderIndex = arr => arr.findIndex((el, i, arr) => arr[i] === 0x50 && arr[i + 1] === 0x4B && arr[i + 2] === 0x3 && arr[i + 3] === 0x4);
				const header2Pos = nextZipHeaderIndex(sliced);

				if (header2Pos !== -1) {
					const slicedAgain = buf.subarray(header2Pos + 8, header2Pos + 8 + 1000);
					const header3Pos = nextZipHeaderIndex(slicedAgain);

					if (header3Pos !== -1) {
						const offset = 8 + header2Pos + header3Pos + 30;

						if (check(toBytes('word/'), {offset})) {
							return {
								ext: 'docx',
								mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
							};
						}

						if (check(toBytes('ppt/'), {offset})) {
							return {
								ext: 'pptx',
								mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
							};
						}

						if (check(toBytes('xl/'), {offset})) {
							return {
								ext: 'xlsx',
								mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
							};
						}
					}
				}
			}
		}

		if (
			check([0x50, 0x4B]) &&
			(buf[2] === 0x3 || buf[2] === 0x5 || buf[2] === 0x7) &&
			(buf[3] === 0x4 || buf[3] === 0x6 || buf[3] === 0x8)
		) {
			return {
				ext: 'zip',
				mime: 'application/zip'
			};
		}

		if (check([0x75, 0x73, 0x74, 0x61, 0x72], {offset: 257})) {
			return {
				ext: 'tar',
				mime: 'application/x-tar'
			};
		}

		if (
			check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) &&
			(buf[6] === 0x0 || buf[6] === 0x1)
		) {
			return {
				ext: 'rar',
				mime: 'application/x-rar-compressed'
			};
		}

		if (check([0x1F, 0x8B, 0x8])) {
			return {
				ext: 'gz',
				mime: 'application/gzip'
			};
		}

		if (check([0x42, 0x5A, 0x68])) {
			return {
				ext: 'bz2',
				mime: 'application/x-bzip2'
			};
		}

		if (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {
			return {
				ext: '7z',
				mime: 'application/x-7z-compressed'
			};
		}

		if (check([0x78, 0x01])) {
			return {
				ext: 'dmg',
				mime: 'application/x-apple-diskimage'
			};
		}

		if (check([0x33, 0x67, 0x70, 0x35]) || // 3gp5
			(
				check([0x0, 0x0, 0x0]) && check([0x66, 0x74, 0x79, 0x70], {offset: 4}) &&
					(
						check([0x6D, 0x70, 0x34, 0x31], {offset: 8}) || // MP41
						check([0x6D, 0x70, 0x34, 0x32], {offset: 8}) || // MP42
						check([0x69, 0x73, 0x6F, 0x6D], {offset: 8}) || // ISOM
						check([0x69, 0x73, 0x6F, 0x32], {offset: 8}) || // ISO2
						check([0x6D, 0x6D, 0x70, 0x34], {offset: 8}) || // MMP4
						check([0x4D, 0x34, 0x56], {offset: 8}) || // M4V
						check([0x64, 0x61, 0x73, 0x68], {offset: 8}) // DASH
					)
			)) {
			return {
				ext: 'mp4',
				mime: 'video/mp4'
			};
		}

		if (check([0x4D, 0x54, 0x68, 0x64])) {
			return {
				ext: 'mid',
				mime: 'audio/midi'
			};
		}

		// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska
		if (check([0x1A, 0x45, 0xDF, 0xA3])) {
			const sliced = buf.subarray(4, 4 + 4096);
			const idPos = sliced.findIndex((el, i, arr) => arr[i] === 0x42 && arr[i + 1] === 0x82);

			if (idPos !== -1) {
				const docTypePos = idPos + 3;
				const findDocType = type => Array.from(type).every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));

				if (findDocType('matroska')) {
					return {
						ext: 'mkv',
						mime: 'video/x-matroska'
					};
				}

				if (findDocType('webm')) {
					return {
						ext: 'webm',
						mime: 'video/webm'
					};
				}
			}
		}

		if (check([0x0, 0x0, 0x0, 0x14, 0x66, 0x74, 0x79, 0x70, 0x71, 0x74, 0x20, 0x20]) ||
			check([0x66, 0x72, 0x65, 0x65], {offset: 4}) ||
			check([0x66, 0x74, 0x79, 0x70, 0x71, 0x74, 0x20, 0x20], {offset: 4}) ||
			check([0x6D, 0x64, 0x61, 0x74], {offset: 4}) || // MJPEG
			check([0x77, 0x69, 0x64, 0x65], {offset: 4})) {
			return {
				ext: 'mov',
				mime: 'video/quicktime'
			};
		}

		if (
			check([0x52, 0x49, 0x46, 0x46]) &&
			check([0x41, 0x56, 0x49], {offset: 8})
		) {
			return {
				ext: 'avi',
				mime: 'video/x-msvideo'
			};
		}

		if (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {
			return {
				ext: 'wmv',
				mime: 'video/x-ms-wmv'
			};
		}

		if (check([0x0, 0x0, 0x1, 0xBA])) {
			return {
				ext: 'mpg',
				mime: 'video/mpeg'
			};
		}

		// Check for MP3 header at different starting offsets
		for (let start = 0; start < 2 && start < (buf.length - 16); start++) {
			if (
				check([0x49, 0x44, 0x33], {offset: start}) || // ID3 header
				check([0xFF, 0xE2], {offset: start, mask: [0xFF, 0xE2]}) // MPEG 1 or 2 Layer 3 header
			) {
				return {
					ext: 'mp3',
					mime: 'audio/mpeg'
				};
			}
		}

		if (
			check([0x66, 0x74, 0x79, 0x70, 0x4D, 0x34, 0x41], {offset: 4}) ||
			check([0x4D, 0x34, 0x41, 0x20])
		) {
			return {
				ext: 'm4a',
				mime: 'audio/m4a'
			};
		}

		// Needs to be before `ogg` check
		if (check([0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64], {offset: 28})) {
			return {
				ext: 'opus',
				mime: 'audio/opus'
			};
		}

		if (check([0x4F, 0x67, 0x67, 0x53])) {
			return {
				ext: 'ogg',
				mime: 'audio/ogg'
			};
		}

		if (check([0x66, 0x4C, 0x61, 0x43])) {
			return {
				ext: 'flac',
				mime: 'audio/x-flac'
			};
		}

		if (
			check([0x52, 0x49, 0x46, 0x46]) &&
			check([0x57, 0x41, 0x56, 0x45], {offset: 8})
		) {
			return {
				ext: 'wav',
				mime: 'audio/x-wav'
			};
		}

		if (check([0x23, 0x21, 0x41, 0x4D, 0x52, 0x0A])) {
			return {
				ext: 'amr',
				mime: 'audio/amr'
			};
		}

		if (check([0x25, 0x50, 0x44, 0x46])) {
			return {
				ext: 'pdf',
				mime: 'application/pdf'
			};
		}

		if (check([0x4D, 0x5A])) {
			return {
				ext: 'exe',
				mime: 'application/x-msdownload'
			};
		}

		if (
			(buf[0] === 0x43 || buf[0] === 0x46) &&
			check([0x57, 0x53], {offset: 1})
		) {
			return {
				ext: 'swf',
				mime: 'application/x-shockwave-flash'
			};
		}

		if (check([0x7B, 0x5C, 0x72, 0x74, 0x66])) {
			return {
				ext: 'rtf',
				mime: 'application/rtf'
			};
		}

		if (check([0x00, 0x61, 0x73, 0x6D])) {
			return {
				ext: 'wasm',
				mime: 'application/wasm'
			};
		}

		if (
			check([0x77, 0x4F, 0x46, 0x46]) &&
			(
				check([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||
				check([0x4F, 0x54, 0x54, 0x4F], {offset: 4})
			)
		) {
			return {
				ext: 'woff',
				mime: 'font/woff'
			};
		}

		if (
			check([0x77, 0x4F, 0x46, 0x32]) &&
			(
				check([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||
				check([0x4F, 0x54, 0x54, 0x4F], {offset: 4})
			)
		) {
			return {
				ext: 'woff2',
				mime: 'font/woff2'
			};
		}

		if (
			check([0x4C, 0x50], {offset: 34}) &&
			(
				check([0x00, 0x00, 0x01], {offset: 8}) ||
				check([0x01, 0x00, 0x02], {offset: 8}) ||
				check([0x02, 0x00, 0x02], {offset: 8})
			)
		) {
			return {
				ext: 'eot',
				mime: 'application/octet-stream'
			};
		}

		if (check([0x00, 0x01, 0x00, 0x00, 0x00])) {
			return {
				ext: 'ttf',
				mime: 'font/ttf'
			};
		}

		if (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {
			return {
				ext: 'otf',
				mime: 'font/otf'
			};
		}

		if (check([0x00, 0x00, 0x01, 0x00])) {
			return {
				ext: 'ico',
				mime: 'image/x-icon'
			};
		}

		if (check([0x46, 0x4C, 0x56, 0x01])) {
			return {
				ext: 'flv',
				mime: 'video/x-flv'
			};
		}

		if (check([0x25, 0x21])) {
			return {
				ext: 'ps',
				mime: 'application/postscript'
			};
		}

		if (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {
			return {
				ext: 'xz',
				mime: 'application/x-xz'
			};
		}

		if (check([0x53, 0x51, 0x4C, 0x69])) {
			return {
				ext: 'sqlite',
				mime: 'application/x-sqlite3'
			};
		}

		if (check([0x4E, 0x45, 0x53, 0x1A])) {
			return {
				ext: 'nes',
				mime: 'application/x-nintendo-nes-rom'
			};
		}

		if (check([0x43, 0x72, 0x32, 0x34])) {
			return {
				ext: 'crx',
				mime: 'application/x-google-chrome-extension'
			};
		}

		if (
			check([0x4D, 0x53, 0x43, 0x46]) ||
			check([0x49, 0x53, 0x63, 0x28])
		) {
			return {
				ext: 'cab',
				mime: 'application/vnd.ms-cab-compressed'
			};
		}

		// Needs to be before `ar` check
		if (check([0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A, 0x64, 0x65, 0x62, 0x69, 0x61, 0x6E, 0x2D, 0x62, 0x69, 0x6E, 0x61, 0x72, 0x79])) {
			return {
				ext: 'deb',
				mime: 'application/x-deb'
			};
		}

		if (check([0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E])) {
			return {
				ext: 'ar',
				mime: 'application/x-unix-archive'
			};
		}

		if (check([0xED, 0xAB, 0xEE, 0xDB])) {
			return {
				ext: 'rpm',
				mime: 'application/x-rpm'
			};
		}

		if (
			check([0x1F, 0xA0]) ||
			check([0x1F, 0x9D])
		) {
			return {
				ext: 'Z',
				mime: 'application/x-compress'
			};
		}

		if (check([0x4C, 0x5A, 0x49, 0x50])) {
			return {
				ext: 'lz',
				mime: 'application/x-lzip'
			};
		}

		if (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {
			return {
				ext: 'msi',
				mime: 'application/x-msi'
			};
		}

		if (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {
			return {
				ext: 'mxf',
				mime: 'application/mxf'
			};
		}

		if (check([0x47], {offset: 4}) && (check([0x47], {offset: 192}) || check([0x47], {offset: 196}))) {
			return {
				ext: 'mts',
				mime: 'video/mp2t'
			};
		}

		if (check([0x42, 0x4C, 0x45, 0x4E, 0x44, 0x45, 0x52])) {
			return {
				ext: 'blend',
				mime: 'application/x-blender'
			};
		}

		if (check([0x42, 0x50, 0x47, 0xFB])) {
			return {
				ext: 'bpg',
				mime: 'image/bpg'
			};
		}

		return null;
	};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(22), __webpack_require__(80), __webpack_require__(98), __webpack_require__(1), __webpack_require__(2), __webpack_require__(242), __webpack_require__(104), __webpack_require__(158), __webpack_require__(238), __webpack_require__(239), __webpack_require__(240)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/promise'), require('babel-runtime/core-js/map'), require('babel-runtime/core-js/set'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('remarkable'), require('pdfjs-dist'), require('rc-progress'), require('../models/Metadata.jsx'), require('../models/Page.jsx'), require('../models/TextItem.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.promise, global.map, global.set, global.classCallCheck, global.createClass, global.remarkable, global.pdfjsDist, global.rcProgress, global.Metadata, global.Page, global.TextItem);
	        global.Parser = mod.exports;
	    }
	})(this, function (exports, _promise, _map, _set, _classCallCheck2, _createClass2, _remarkable, _pdfjsDist, _rcProgress, _Metadata, _Page, _TextItem) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _promise2 = _interopRequireDefault(_promise);

	    var _map2 = _interopRequireDefault(_map);

	    var _set2 = _interopRequireDefault(_set);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _remarkable2 = _interopRequireDefault(_remarkable);

	    var _pdfjsDist2 = _interopRequireDefault(_pdfjsDist);

	    var _Metadata2 = _interopRequireDefault(_Metadata);

	    var _Page2 = _interopRequireDefault(_Page);

	    var _TextItem2 = _interopRequireDefault(_TextItem);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var Parser = function () {
	        function Parser(fileBuffer) {
	            (0, _classCallCheck3.default)(this, Parser);

	            this.fileBuffer = fileBuffer;

	            var progress = new Progress({
	                stages: [new ProgressStage('Parsing Metadata', 2), new ProgressStage('Parsing Pages'), new ProgressStage('Parsing Fonts', 0)]
	            });

	            Progress.prototype.metadataStage = function () {
	                return progress.stages[0];
	            };

	            Progress.prototype.pageStage = function () {
	                return progress.stages[1];
	            };

	            Progress.prototype.fontStage = function () {
	                return progress.stages[2];
	            };

	            this.progress = progress;

	            //parse document vars
	            this.document = null;
	            this.metadata = null;
	            this.pages = [];
	            this.fontIds = new _set2.default();
	            this.fontMap = new _map2.default();
	        }

	        (0, _createClass3.default)(Parser, [{
	            key: 'documentParsed',
	            value: function documentParsed(document) {
	                var metadataStage = this.progress.metadataStage();
	                var pageStage = this.progress.pageStage();
	                metadataStage.stepsDone++;

	                var numPages = document.numPages;
	                pageStage.steps = numPages;
	                pageStage.stepsDone;

	                //console.log("pageStage stepsDone: " + pageStage.stepsDone)


	                var pages = [];
	                for (var i = 0; i < numPages; i++) {
	                    pages.push(new _Page2.default({
	                        index: i
	                    }));
	                }

	                this.pages = pages;
	                this.document = document;
	            }
	        }, {
	            key: 'pageParsed',
	            value: function pageParsed(index, textItems) {
	                var pageStage = this.progress.pageStage();

	                pageStage.stepsDone = pageStage.stepsDone + 1;
	                this.pages[index].items = textItems; // eslint-disable-line react/no-direct-mutation-state

	                //console.log("pageStage stepsDone: " + pageStage.stepsDone);
	            }
	        }, {
	            key: 'fontParsed',
	            value: function fontParsed(fontId, font) {
	                var fontStage = this.progress.fontStage();

	                this.fontMap.set(fontId, font); // eslint-disable-line react/no-direct-mutation-state
	                console.log(this.fontMap);
	                fontStage.stepsDone++;
	                //console.log("fontStage stepsDone: " + fontStage.stepsDone);
	            }
	        }, {
	            key: 'metadataParsed',
	            value: function metadataParsed(pdfDocument) {
	                return new _promise2.default(function (resolve, reject) {
	                    //operation
	                    pdfDocument.getMetadata().then(function (metadata) {
	                        //return metadata
	                        resolve(metadata);
	                    });
	                });
	            }
	        }, {
	            key: 'parseFonts',
	            value: function parseFonts(textContent) {
	                console.log("parseFonts ");
	                var self = this;
	                return new _promise2.default(function (resolve, reject) {

	                    var textItems = textContent.items.map(function (item) {
	                        console.log("resolving of fonts");

	                        //trigger resolving of fonts
	                        var fontId = item.fontName;

	                        if (!self.fontIds.has(fontId) && fontId.startsWith('g_d0')) {
	                            self.document.transport.commonObjs.get(fontId, function (font) {
	                                self.fontParsed(fontId, font);
	                            });
	                            self.fontIds.add(fontId);
	                        }

	                        var tx = PDFJS.Util.transform( // eslint-disable-line no-undef
	                        viewport.transform, item.transform);

	                        var fontHeight = Math.sqrt(tx[2] * tx[2] + tx[3] * tx[3]);
	                        var dividedHeight = item.height / fontHeight;
	                        return new _TextItem2.default({
	                            x: Math.round(item.transform[4]),
	                            y: Math.round(item.transform[5]),
	                            width: Math.round(item.width),
	                            height: Math.round(dividedHeight <= 1 ? item.height : dividedHeight),
	                            text: item.str,
	                            font: item.fontName
	                        });
	                    });

	                    console.log("resolve textItems");
	                    resolve(textItems);
	                    //promise 
	                });
	            }
	        }, {
	            key: 'getPage',
	            value: function getPage(pdfDocument, iterador) {
	                //console.log("iterador "+iterador);
	                var self = this;
	                return new _promise2.default(function (resolve, reject) {

	                    pdfDocument.getPage(iterador).then(function (page) {
	                        // console.debug(page);
	                        var scale = 1.0;
	                        var viewport = page.getViewport(scale);

	                        return {
	                            page: page,
	                            viewport: viewport
	                        };
	                    }).then(function (result) {
	                        console.log("result " + result);
	                        var page = result.page;
	                        var viewport = result.viewport;

	                        page.getTextContent().then(function (textContent) {

	                            self.parseFonts(textContent).then(function (textItems) {

	                                return textItems;
	                            });
	                        }).then(function (textItems) {

	                            //set pages
	                            self.pages[page.pageIndex] = textItems;

	                            //console.log("page.pageIndex " + page.pageIndex);

	                            resolve(self.pages[page.pageIndex]);
	                        });
	                    });
	                });
	            }
	        }, {
	            key: 'pagesParsed',
	            value: function pagesParsed(pdfDocument) {
	                var self = this;
	                var promises = [];
	                //operations
	                for (var j = 1; j <= pdfDocument.numPages; j++) {
	                    promises.push(self.getPage(pdfDocument, j));
	                }
	                return promises;
	            }
	        }, {
	            key: 'parsePages',
	            value: function parsePages() {
	                var self = this;

	                return new _promise2.default(function (resolve, reject) {

	                    PDFJS.getDocument(self.fileBuffer).then(function (pdfDocument) {

	                        self.documentParsed(pdfDocument);

	                        return _promise2.default.all(self.pagesParsed(pdfDocument, self.pages));
	                    }).then(function (pages) {

	                        console.log(self.fontMap);
	                        resolve({
	                            document: self.document,
	                            pages: pages,
	                            fontMap: self.fontMap
	                        });
	                    });
	                });
	            }
	        }]);
	        return Parser;
	    }();

	    function getPercentDone(progress) {
	        var activeStage = progress.activeStage();
	        var percentDone = activeStage.percentDone();

	        if (percentDone == 100) {
	            progress.completeStage();
	            if (!progress.isComplete()) {
	                return getPercentDone(progress, 0);
	            }
	        }

	        return percentDone;
	    }

	    var Progress = function () {
	        function Progress(options) {
	            (0, _classCallCheck3.default)(this, Progress);

	            this.stages = options.stages;
	            this.currentStage = 0;
	        }

	        (0, _createClass3.default)(Progress, [{
	            key: 'completeStage',
	            value: function completeStage() {
	                this.currentStage++;
	            }
	        }, {
	            key: 'isComplete',
	            value: function isComplete() {
	                return this.currentStage == this.stages.length;
	            }
	        }, {
	            key: 'activeStage',
	            value: function activeStage() {
	                return this.stages[this.currentStage];
	            }
	        }]);
	        return Progress;
	    }();

	    var ProgressStage = function () {
	        function ProgressStage(name, steps) {
	            (0, _classCallCheck3.default)(this, ProgressStage);

	            this.name = name;
	            this.steps = steps;
	            this.stepsDone = 0;
	        }

	        (0, _createClass3.default)(ProgressStage, [{
	            key: 'isComplete',
	            value: function isComplete() {
	                return this.stepsDone == this.steps;
	            }
	        }, {
	            key: 'percentDone',
	            value: function percentDone() {
	                if (typeof this.steps === 'undefined') {
	                    // if (!this.steps) {
	                    return 0;
	                }
	                if (this.steps == 0) {
	                    return 100;
	                }

	                return this.stepsDone / this.steps * 100;
	            }
	        }]);
	        return ProgressStage;
	    }();

	    exports.default = Parser;
	});

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(81), __esModule: true };

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(24);
	__webpack_require__(25);
	__webpack_require__(54);
	__webpack_require__(82);
	__webpack_require__(91);
	__webpack_require__(94);
	__webpack_require__(96);
	module.exports = __webpack_require__(8).Map;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(83);
	var validate = __webpack_require__(85);
	var MAP = 'Map';

	// 23.1 Map Objects
	module.exports = __webpack_require__(86)(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(validate(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, strong, true);


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var dP = __webpack_require__(12).f;
	var create = __webpack_require__(35);
	var redefineAll = __webpack_require__(72);
	var ctx = __webpack_require__(9);
	var anInstance = __webpack_require__(60);
	var forOf = __webpack_require__(61);
	var $iterDefine = __webpack_require__(29);
	var step = __webpack_require__(57);
	var setSpecies = __webpack_require__(73);
	var DESCRIPTORS = __webpack_require__(16);
	var fastKey = __webpack_require__(84).fastKey;
	var validate = __webpack_require__(85);
	var SIZE = DESCRIPTORS ? '_s' : 'size';

	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};

	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = validate(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        validate(this, NAME);
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(validate(this, NAME), key);
	      }
	    });
	    if (DESCRIPTORS) dP(C.prototype, 'size', {
	      get: function () {
	        return validate(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function (iterated, kind) {
	      this._t = validate(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(47)('meta');
	var isObject = __webpack_require__(14);
	var has = __webpack_require__(32);
	var setDesc = __webpack_require__(12).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(17)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14);
	module.exports = function (it, TYPE) {
	  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(7);
	var $export = __webpack_require__(6);
	var meta = __webpack_require__(84);
	var fails = __webpack_require__(17);
	var hide = __webpack_require__(11);
	var redefineAll = __webpack_require__(72);
	var forOf = __webpack_require__(61);
	var anInstance = __webpack_require__(60);
	var isObject = __webpack_require__(14);
	var setToStringTag = __webpack_require__(50);
	var dP = __webpack_require__(12).f;
	var each = __webpack_require__(87)(0);
	var DESCRIPTORS = __webpack_require__(16);

	module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    C = wrapper(function (target, iterable) {
	      anInstance(target, C, NAME, '_c');
	      target._c = new Base();
	      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
	        anInstance(this, C, KEY);
	        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    IS_WEAK || dP(C.prototype, 'size', {
	      get: function () {
	        return this._c.size;
	      }
	    });
	  }

	  setToStringTag(C, NAME);

	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F, O);

	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

	  return C;
	};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx = __webpack_require__(9);
	var IObject = __webpack_require__(40);
	var toObject = __webpack_require__(53);
	var toLength = __webpack_require__(43);
	var asc = __webpack_require__(88);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(89);

	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14);
	var isArray = __webpack_require__(90);
	var SPECIES = __webpack_require__(51)('species');

	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(41);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(6);

	$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(92)('Map') });


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(59);
	var from = __webpack_require__(93);
	module.exports = function (NAME) {
	  return function toJSON() {
	    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(61);

	module.exports = function (iter, ITERATOR) {
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	__webpack_require__(95)('Map');


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(6);

	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { of: function of() {
	    var length = arguments.length;
	    var A = Array(length);
	    while (length--) A[length] = arguments[length];
	    return new this(A);
	  } });
	};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	__webpack_require__(97)('Map');


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(6);
	var aFunction = __webpack_require__(10);
	var ctx = __webpack_require__(9);
	var forOf = __webpack_require__(61);

	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
	    var mapFn = arguments[1];
	    var mapping, A, n, cb;
	    aFunction(this);
	    mapping = mapFn !== undefined;
	    if (mapping) aFunction(mapFn);
	    if (source == undefined) return new this();
	    A = [];
	    if (mapping) {
	      n = 0;
	      cb = ctx(mapFn, arguments[2], 2);
	      forOf(source, false, function (nextItem) {
	        A.push(cb(nextItem, n++));
	      });
	    } else {
	      forOf(source, false, A.push, A);
	    }
	    return new this(A);
	  } });
	};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(99), __esModule: true };

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(24);
	__webpack_require__(25);
	__webpack_require__(54);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	module.exports = __webpack_require__(8).Set;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(83);
	var validate = __webpack_require__(85);
	var SET = 'Set';

	// 23.2 Set Objects
	module.exports = __webpack_require__(86)(SET, function (get) {
	  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, strong);


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(6);

	$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(92)('Set') });


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
	__webpack_require__(95)('Set');


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
	__webpack_require__(97)('Set');


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global, Buffer) {/* Copyright 2017 Mozilla Foundation
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("pdfjs-dist/build/pdf", [], factory);
		else if(typeof exports === 'object')
			exports["pdfjs-dist/build/pdf"] = factory();
		else
			root["pdfjs-dist/build/pdf"] = root.pdfjsDistBuildPdf = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __w_pdfjs_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__w_pdfjs_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__w_pdfjs_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__w_pdfjs_require__.d = function(exports, name, getter) {
	/******/ 		if(!__w_pdfjs_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__w_pdfjs_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__w_pdfjs_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__w_pdfjs_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__w_pdfjs_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __w_pdfjs_require__(__w_pdfjs_require__.s = 54);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.unreachable = exports.warn = exports.utf8StringToString = exports.stringToUTF8String = exports.stringToPDFString = exports.stringToBytes = exports.string32 = exports.shadow = exports.setVerbosityLevel = exports.ReadableStream = exports.removeNullCharacters = exports.readUint32 = exports.readUint16 = exports.readInt8 = exports.log2 = exports.loadJpegStream = exports.isEvalSupported = exports.isLittleEndian = exports.createValidAbsoluteUrl = exports.isSameOrigin = exports.isNodeJS = exports.isSpace = exports.isString = exports.isNum = exports.isEmptyObj = exports.isBool = exports.isArrayBuffer = exports.info = exports.getVerbosityLevel = exports.getLookupTableFactory = exports.deprecated = exports.createObjectURL = exports.createPromiseCapability = exports.createBlob = exports.bytesToString = exports.assert = exports.arraysToBytes = exports.arrayByteLength = exports.FormatError = exports.XRefParseException = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.StatTimer = exports.PasswordResponses = exports.PasswordException = exports.PageViewport = exports.NotImplementedException = exports.NativeImageDecoding = exports.MissingPDFException = exports.MissingDataException = exports.MessageHandler = exports.InvalidPDFException = exports.AbortException = exports.CMapCompressionType = exports.ImageKind = exports.FontType = exports.AnnotationType = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.UNSUPPORTED_FEATURES = exports.VERBOSITY_LEVELS = exports.OPS = exports.IDENTITY_MATRIX = exports.FONT_IDENTITY_MATRIX = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	__w_pdfjs_require__(55);

	var _streams_polyfill = __w_pdfjs_require__(80);

	var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
	var NativeImageDecoding = {
	  NONE: 'none',
	  DECODE: 'decode',
	  DISPLAY: 'display'
	};
	var TextRenderingMode = {
	  FILL: 0,
	  STROKE: 1,
	  FILL_STROKE: 2,
	  INVISIBLE: 3,
	  FILL_ADD_TO_PATH: 4,
	  STROKE_ADD_TO_PATH: 5,
	  FILL_STROKE_ADD_TO_PATH: 6,
	  ADD_TO_PATH: 7,
	  FILL_STROKE_MASK: 3,
	  ADD_TO_PATH_FLAG: 4
	};
	var ImageKind = {
	  GRAYSCALE_1BPP: 1,
	  RGB_24BPP: 2,
	  RGBA_32BPP: 3
	};
	var AnnotationType = {
	  TEXT: 1,
	  LINK: 2,
	  FREETEXT: 3,
	  LINE: 4,
	  SQUARE: 5,
	  CIRCLE: 6,
	  POLYGON: 7,
	  POLYLINE: 8,
	  HIGHLIGHT: 9,
	  UNDERLINE: 10,
	  SQUIGGLY: 11,
	  STRIKEOUT: 12,
	  STAMP: 13,
	  CARET: 14,
	  INK: 15,
	  POPUP: 16,
	  FILEATTACHMENT: 17,
	  SOUND: 18,
	  MOVIE: 19,
	  WIDGET: 20,
	  SCREEN: 21,
	  PRINTERMARK: 22,
	  TRAPNET: 23,
	  WATERMARK: 24,
	  THREED: 25,
	  REDACT: 26
	};
	var AnnotationFlag = {
	  INVISIBLE: 0x01,
	  HIDDEN: 0x02,
	  PRINT: 0x04,
	  NOZOOM: 0x08,
	  NOROTATE: 0x10,
	  NOVIEW: 0x20,
	  READONLY: 0x40,
	  LOCKED: 0x80,
	  TOGGLENOVIEW: 0x100,
	  LOCKEDCONTENTS: 0x200
	};
	var AnnotationFieldFlag = {
	  READONLY: 0x0000001,
	  REQUIRED: 0x0000002,
	  NOEXPORT: 0x0000004,
	  MULTILINE: 0x0001000,
	  PASSWORD: 0x0002000,
	  NOTOGGLETOOFF: 0x0004000,
	  RADIO: 0x0008000,
	  PUSHBUTTON: 0x0010000,
	  COMBO: 0x0020000,
	  EDIT: 0x0040000,
	  SORT: 0x0080000,
	  FILESELECT: 0x0100000,
	  MULTISELECT: 0x0200000,
	  DONOTSPELLCHECK: 0x0400000,
	  DONOTSCROLL: 0x0800000,
	  COMB: 0x1000000,
	  RICHTEXT: 0x2000000,
	  RADIOSINUNISON: 0x2000000,
	  COMMITONSELCHANGE: 0x4000000
	};
	var AnnotationBorderStyleType = {
	  SOLID: 1,
	  DASHED: 2,
	  BEVELED: 3,
	  INSET: 4,
	  UNDERLINE: 5
	};
	var StreamType = {
	  UNKNOWN: 0,
	  FLATE: 1,
	  LZW: 2,
	  DCT: 3,
	  JPX: 4,
	  JBIG: 5,
	  A85: 6,
	  AHX: 7,
	  CCF: 8,
	  RL: 9
	};
	var FontType = {
	  UNKNOWN: 0,
	  TYPE1: 1,
	  TYPE1C: 2,
	  CIDFONTTYPE0: 3,
	  CIDFONTTYPE0C: 4,
	  TRUETYPE: 5,
	  CIDFONTTYPE2: 6,
	  TYPE3: 7,
	  OPENTYPE: 8,
	  TYPE0: 9,
	  MMTYPE1: 10
	};
	var VERBOSITY_LEVELS = {
	  errors: 0,
	  warnings: 1,
	  infos: 5
	};
	var CMapCompressionType = {
	  NONE: 0,
	  BINARY: 1,
	  STREAM: 2
	};
	var OPS = {
	  dependency: 1,
	  setLineWidth: 2,
	  setLineCap: 3,
	  setLineJoin: 4,
	  setMiterLimit: 5,
	  setDash: 6,
	  setRenderingIntent: 7,
	  setFlatness: 8,
	  setGState: 9,
	  save: 10,
	  restore: 11,
	  transform: 12,
	  moveTo: 13,
	  lineTo: 14,
	  curveTo: 15,
	  curveTo2: 16,
	  curveTo3: 17,
	  closePath: 18,
	  rectangle: 19,
	  stroke: 20,
	  closeStroke: 21,
	  fill: 22,
	  eoFill: 23,
	  fillStroke: 24,
	  eoFillStroke: 25,
	  closeFillStroke: 26,
	  closeEOFillStroke: 27,
	  endPath: 28,
	  clip: 29,
	  eoClip: 30,
	  beginText: 31,
	  endText: 32,
	  setCharSpacing: 33,
	  setWordSpacing: 34,
	  setHScale: 35,
	  setLeading: 36,
	  setFont: 37,
	  setTextRenderingMode: 38,
	  setTextRise: 39,
	  moveText: 40,
	  setLeadingMoveText: 41,
	  setTextMatrix: 42,
	  nextLine: 43,
	  showText: 44,
	  showSpacedText: 45,
	  nextLineShowText: 46,
	  nextLineSetSpacingShowText: 47,
	  setCharWidth: 48,
	  setCharWidthAndBounds: 49,
	  setStrokeColorSpace: 50,
	  setFillColorSpace: 51,
	  setStrokeColor: 52,
	  setStrokeColorN: 53,
	  setFillColor: 54,
	  setFillColorN: 55,
	  setStrokeGray: 56,
	  setFillGray: 57,
	  setStrokeRGBColor: 58,
	  setFillRGBColor: 59,
	  setStrokeCMYKColor: 60,
	  setFillCMYKColor: 61,
	  shadingFill: 62,
	  beginInlineImage: 63,
	  beginImageData: 64,
	  endInlineImage: 65,
	  paintXObject: 66,
	  markPoint: 67,
	  markPointProps: 68,
	  beginMarkedContent: 69,
	  beginMarkedContentProps: 70,
	  endMarkedContent: 71,
	  beginCompat: 72,
	  endCompat: 73,
	  paintFormXObjectBegin: 74,
	  paintFormXObjectEnd: 75,
	  beginGroup: 76,
	  endGroup: 77,
	  beginAnnotations: 78,
	  endAnnotations: 79,
	  beginAnnotation: 80,
	  endAnnotation: 81,
	  paintJpegXObject: 82,
	  paintImageMaskXObject: 83,
	  paintImageMaskXObjectGroup: 84,
	  paintImageXObject: 85,
	  paintInlineImageXObject: 86,
	  paintInlineImageXObjectGroup: 87,
	  paintImageXObjectRepeat: 88,
	  paintImageMaskXObjectRepeat: 89,
	  paintSolidColorImageMask: 90,
	  constructPath: 91
	};
	var verbosity = VERBOSITY_LEVELS.warnings;
	function setVerbosityLevel(level) {
	  verbosity = level;
	}
	function getVerbosityLevel() {
	  return verbosity;
	}
	function info(msg) {
	  if (verbosity >= VERBOSITY_LEVELS.infos) {
	    console.log('Info: ' + msg);
	  }
	}
	function warn(msg) {
	  if (verbosity >= VERBOSITY_LEVELS.warnings) {
	    console.log('Warning: ' + msg);
	  }
	}
	function deprecated(details) {
	  console.log('Deprecated API usage: ' + details);
	}
	function unreachable(msg) {
	  throw new Error(msg);
	}
	function assert(cond, msg) {
	  if (!cond) {
	    unreachable(msg);
	  }
	}
	var UNSUPPORTED_FEATURES = {
	  unknown: 'unknown',
	  forms: 'forms',
	  javaScript: 'javaScript',
	  smask: 'smask',
	  shadingPattern: 'shadingPattern',
	  font: 'font'
	};
	function isSameOrigin(baseUrl, otherUrl) {
	  try {
	    var base = new URL(baseUrl);
	    if (!base.origin || base.origin === 'null') {
	      return false;
	    }
	  } catch (e) {
	    return false;
	  }
	  var other = new URL(otherUrl, base);
	  return base.origin === other.origin;
	}
	function isValidProtocol(url) {
	  if (!url) {
	    return false;
	  }
	  switch (url.protocol) {
	    case 'http:':
	    case 'https:':
	    case 'ftp:':
	    case 'mailto:':
	    case 'tel:':
	      return true;
	    default:
	      return false;
	  }
	}
	function createValidAbsoluteUrl(url, baseUrl) {
	  if (!url) {
	    return null;
	  }
	  try {
	    var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
	    if (isValidProtocol(absoluteUrl)) {
	      return absoluteUrl;
	    }
	  } catch (ex) {}
	  return null;
	}
	function shadow(obj, prop, value) {
	  Object.defineProperty(obj, prop, {
	    value: value,
	    enumerable: true,
	    configurable: true,
	    writable: false
	  });
	  return value;
	}
	function getLookupTableFactory(initializer) {
	  var lookup;
	  return function () {
	    if (initializer) {
	      lookup = Object.create(null);
	      initializer(lookup);
	      initializer = null;
	    }
	    return lookup;
	  };
	}
	var PasswordResponses = {
	  NEED_PASSWORD: 1,
	  INCORRECT_PASSWORD: 2
	};
	var PasswordException = function PasswordExceptionClosure() {
	  function PasswordException(msg, code) {
	    this.name = 'PasswordException';
	    this.message = msg;
	    this.code = code;
	  }
	  PasswordException.prototype = new Error();
	  PasswordException.constructor = PasswordException;
	  return PasswordException;
	}();
	var UnknownErrorException = function UnknownErrorExceptionClosure() {
	  function UnknownErrorException(msg, details) {
	    this.name = 'UnknownErrorException';
	    this.message = msg;
	    this.details = details;
	  }
	  UnknownErrorException.prototype = new Error();
	  UnknownErrorException.constructor = UnknownErrorException;
	  return UnknownErrorException;
	}();
	var InvalidPDFException = function InvalidPDFExceptionClosure() {
	  function InvalidPDFException(msg) {
	    this.name = 'InvalidPDFException';
	    this.message = msg;
	  }
	  InvalidPDFException.prototype = new Error();
	  InvalidPDFException.constructor = InvalidPDFException;
	  return InvalidPDFException;
	}();
	var MissingPDFException = function MissingPDFExceptionClosure() {
	  function MissingPDFException(msg) {
	    this.name = 'MissingPDFException';
	    this.message = msg;
	  }
	  MissingPDFException.prototype = new Error();
	  MissingPDFException.constructor = MissingPDFException;
	  return MissingPDFException;
	}();
	var UnexpectedResponseException = function UnexpectedResponseExceptionClosure() {
	  function UnexpectedResponseException(msg, status) {
	    this.name = 'UnexpectedResponseException';
	    this.message = msg;
	    this.status = status;
	  }
	  UnexpectedResponseException.prototype = new Error();
	  UnexpectedResponseException.constructor = UnexpectedResponseException;
	  return UnexpectedResponseException;
	}();
	var NotImplementedException = function NotImplementedExceptionClosure() {
	  function NotImplementedException(msg) {
	    this.message = msg;
	  }
	  NotImplementedException.prototype = new Error();
	  NotImplementedException.prototype.name = 'NotImplementedException';
	  NotImplementedException.constructor = NotImplementedException;
	  return NotImplementedException;
	}();
	var MissingDataException = function MissingDataExceptionClosure() {
	  function MissingDataException(begin, end) {
	    this.begin = begin;
	    this.end = end;
	    this.message = 'Missing data [' + begin + ', ' + end + ')';
	  }
	  MissingDataException.prototype = new Error();
	  MissingDataException.prototype.name = 'MissingDataException';
	  MissingDataException.constructor = MissingDataException;
	  return MissingDataException;
	}();
	var XRefParseException = function XRefParseExceptionClosure() {
	  function XRefParseException(msg) {
	    this.message = msg;
	  }
	  XRefParseException.prototype = new Error();
	  XRefParseException.prototype.name = 'XRefParseException';
	  XRefParseException.constructor = XRefParseException;
	  return XRefParseException;
	}();
	var FormatError = function FormatErrorClosure() {
	  function FormatError(msg) {
	    this.message = msg;
	  }
	  FormatError.prototype = new Error();
	  FormatError.prototype.name = 'FormatError';
	  FormatError.constructor = FormatError;
	  return FormatError;
	}();
	var AbortException = function AbortExceptionClosure() {
	  function AbortException(msg) {
	    this.name = 'AbortException';
	    this.message = msg;
	  }
	  AbortException.prototype = new Error();
	  AbortException.constructor = AbortException;
	  return AbortException;
	}();
	var NullCharactersRegExp = /\x00/g;
	function removeNullCharacters(str) {
	  if (typeof str !== 'string') {
	    warn('The argument for removeNullCharacters must be a string.');
	    return str;
	  }
	  return str.replace(NullCharactersRegExp, '');
	}
	function bytesToString(bytes) {
	  assert(bytes !== null && (typeof bytes === 'undefined' ? 'undefined' : _typeof(bytes)) === 'object' && bytes.length !== undefined, 'Invalid argument for bytesToString');
	  var length = bytes.length;
	  var MAX_ARGUMENT_COUNT = 8192;
	  if (length < MAX_ARGUMENT_COUNT) {
	    return String.fromCharCode.apply(null, bytes);
	  }
	  var strBuf = [];
	  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
	    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
	    var chunk = bytes.subarray(i, chunkEnd);
	    strBuf.push(String.fromCharCode.apply(null, chunk));
	  }
	  return strBuf.join('');
	}
	function stringToBytes(str) {
	  assert(typeof str === 'string', 'Invalid argument for stringToBytes');
	  var length = str.length;
	  var bytes = new Uint8Array(length);
	  for (var i = 0; i < length; ++i) {
	    bytes[i] = str.charCodeAt(i) & 0xFF;
	  }
	  return bytes;
	}
	function arrayByteLength(arr) {
	  if (arr.length !== undefined) {
	    return arr.length;
	  }
	  assert(arr.byteLength !== undefined);
	  return arr.byteLength;
	}
	function arraysToBytes(arr) {
	  if (arr.length === 1 && arr[0] instanceof Uint8Array) {
	    return arr[0];
	  }
	  var resultLength = 0;
	  var i,
	      ii = arr.length;
	  var item, itemLength;
	  for (i = 0; i < ii; i++) {
	    item = arr[i];
	    itemLength = arrayByteLength(item);
	    resultLength += itemLength;
	  }
	  var pos = 0;
	  var data = new Uint8Array(resultLength);
	  for (i = 0; i < ii; i++) {
	    item = arr[i];
	    if (!(item instanceof Uint8Array)) {
	      if (typeof item === 'string') {
	        item = stringToBytes(item);
	      } else {
	        item = new Uint8Array(item);
	      }
	    }
	    itemLength = item.byteLength;
	    data.set(item, pos);
	    pos += itemLength;
	  }
	  return data;
	}
	function string32(value) {
	  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
	}
	function log2(x) {
	  var n = 1,
	      i = 0;
	  while (x > n) {
	    n <<= 1;
	    i++;
	  }
	  return i;
	}
	function readInt8(data, start) {
	  return data[start] << 24 >> 24;
	}
	function readUint16(data, offset) {
	  return data[offset] << 8 | data[offset + 1];
	}
	function readUint32(data, offset) {
	  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
	}
	function isLittleEndian() {
	  var buffer8 = new Uint8Array(4);
	  buffer8[0] = 1;
	  var view32 = new Uint32Array(buffer8.buffer, 0, 1);
	  return view32[0] === 1;
	}
	function isEvalSupported() {
	  try {
	    new Function('');
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
	var Util = function UtilClosure() {
	  function Util() {}
	  var rgbBuf = ['rgb(', 0, ',', 0, ',', 0, ')'];
	  Util.makeCssRgb = function Util_makeCssRgb(r, g, b) {
	    rgbBuf[1] = r;
	    rgbBuf[3] = g;
	    rgbBuf[5] = b;
	    return rgbBuf.join('');
	  };
	  Util.transform = function Util_transform(m1, m2) {
	    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
	  };
	  Util.applyTransform = function Util_applyTransform(p, m) {
	    var xt = p[0] * m[0] + p[1] * m[2] + m[4];
	    var yt = p[0] * m[1] + p[1] * m[3] + m[5];
	    return [xt, yt];
	  };
	  Util.applyInverseTransform = function Util_applyInverseTransform(p, m) {
	    var d = m[0] * m[3] - m[1] * m[2];
	    var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
	    var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
	    return [xt, yt];
	  };
	  Util.getAxialAlignedBoundingBox = function Util_getAxialAlignedBoundingBox(r, m) {
	    var p1 = Util.applyTransform(r, m);
	    var p2 = Util.applyTransform(r.slice(2, 4), m);
	    var p3 = Util.applyTransform([r[0], r[3]], m);
	    var p4 = Util.applyTransform([r[2], r[1]], m);
	    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
	  };
	  Util.inverseTransform = function Util_inverseTransform(m) {
	    var d = m[0] * m[3] - m[1] * m[2];
	    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
	  };
	  Util.apply3dTransform = function Util_apply3dTransform(m, v) {
	    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
	  };
	  Util.singularValueDecompose2dScale = function Util_singularValueDecompose2dScale(m) {
	    var transpose = [m[0], m[2], m[1], m[3]];
	    var a = m[0] * transpose[0] + m[1] * transpose[2];
	    var b = m[0] * transpose[1] + m[1] * transpose[3];
	    var c = m[2] * transpose[0] + m[3] * transpose[2];
	    var d = m[2] * transpose[1] + m[3] * transpose[3];
	    var first = (a + d) / 2;
	    var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;
	    var sx = first + second || 1;
	    var sy = first - second || 1;
	    return [Math.sqrt(sx), Math.sqrt(sy)];
	  };
	  Util.normalizeRect = function Util_normalizeRect(rect) {
	    var r = rect.slice(0);
	    if (rect[0] > rect[2]) {
	      r[0] = rect[2];
	      r[2] = rect[0];
	    }
	    if (rect[1] > rect[3]) {
	      r[1] = rect[3];
	      r[3] = rect[1];
	    }
	    return r;
	  };
	  Util.intersect = function Util_intersect(rect1, rect2) {
	    function compare(a, b) {
	      return a - b;
	    }
	    var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare),
	        orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare),
	        result = [];
	    rect1 = Util.normalizeRect(rect1);
	    rect2 = Util.normalizeRect(rect2);
	    if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
	      result[0] = orderedX[1];
	      result[2] = orderedX[2];
	    } else {
	      return false;
	    }
	    if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
	      result[1] = orderedY[1];
	      result[3] = orderedY[2];
	    } else {
	      return false;
	    }
	    return result;
	  };
	  var ROMAN_NUMBER_MAP = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC', '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];
	  Util.toRoman = function Util_toRoman(number, lowerCase) {
	    assert(Number.isInteger(number) && number > 0, 'The number should be a positive integer.');
	    var pos,
	        romanBuf = [];
	    while (number >= 1000) {
	      number -= 1000;
	      romanBuf.push('M');
	    }
	    pos = number / 100 | 0;
	    number %= 100;
	    romanBuf.push(ROMAN_NUMBER_MAP[pos]);
	    pos = number / 10 | 0;
	    number %= 10;
	    romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);
	    romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);
	    var romanStr = romanBuf.join('');
	    return lowerCase ? romanStr.toLowerCase() : romanStr;
	  };
	  Util.appendToArray = function Util_appendToArray(arr1, arr2) {
	    Array.prototype.push.apply(arr1, arr2);
	  };
	  Util.prependToArray = function Util_prependToArray(arr1, arr2) {
	    Array.prototype.unshift.apply(arr1, arr2);
	  };
	  Util.extendObj = function extendObj(obj1, obj2) {
	    for (var key in obj2) {
	      obj1[key] = obj2[key];
	    }
	  };
	  Util.getInheritableProperty = function Util_getInheritableProperty(dict, name, getArray) {
	    while (dict && !dict.has(name)) {
	      dict = dict.get('Parent');
	    }
	    if (!dict) {
	      return null;
	    }
	    return getArray ? dict.getArray(name) : dict.get(name);
	  };
	  Util.inherit = function Util_inherit(sub, base, prototype) {
	    sub.prototype = Object.create(base.prototype);
	    sub.prototype.constructor = sub;
	    for (var prop in prototype) {
	      sub.prototype[prop] = prototype[prop];
	    }
	  };
	  Util.loadScript = function Util_loadScript(src, callback) {
	    var script = document.createElement('script');
	    var loaded = false;
	    script.setAttribute('src', src);
	    if (callback) {
	      script.onload = function () {
	        if (!loaded) {
	          callback();
	        }
	        loaded = true;
	      };
	    }
	    document.getElementsByTagName('head')[0].appendChild(script);
	  };
	  return Util;
	}();
	var PageViewport = function PageViewportClosure() {
	  function PageViewport(viewBox, scale, rotation, offsetX, offsetY, dontFlip) {
	    this.viewBox = viewBox;
	    this.scale = scale;
	    this.rotation = rotation;
	    this.offsetX = offsetX;
	    this.offsetY = offsetY;
	    var centerX = (viewBox[2] + viewBox[0]) / 2;
	    var centerY = (viewBox[3] + viewBox[1]) / 2;
	    var rotateA, rotateB, rotateC, rotateD;
	    rotation = rotation % 360;
	    rotation = rotation < 0 ? rotation + 360 : rotation;
	    switch (rotation) {
	      case 180:
	        rotateA = -1;
	        rotateB = 0;
	        rotateC = 0;
	        rotateD = 1;
	        break;
	      case 90:
	        rotateA = 0;
	        rotateB = 1;
	        rotateC = 1;
	        rotateD = 0;
	        break;
	      case 270:
	        rotateA = 0;
	        rotateB = -1;
	        rotateC = -1;
	        rotateD = 0;
	        break;
	      default:
	        rotateA = 1;
	        rotateB = 0;
	        rotateC = 0;
	        rotateD = -1;
	        break;
	    }
	    if (dontFlip) {
	      rotateC = -rotateC;
	      rotateD = -rotateD;
	    }
	    var offsetCanvasX, offsetCanvasY;
	    var width, height;
	    if (rotateA === 0) {
	      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
	      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
	      width = Math.abs(viewBox[3] - viewBox[1]) * scale;
	      height = Math.abs(viewBox[2] - viewBox[0]) * scale;
	    } else {
	      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
	      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
	      width = Math.abs(viewBox[2] - viewBox[0]) * scale;
	      height = Math.abs(viewBox[3] - viewBox[1]) * scale;
	    }
	    this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
	    this.width = width;
	    this.height = height;
	    this.fontScale = scale;
	  }
	  PageViewport.prototype = {
	    clone: function PageViewPort_clone(args) {
	      args = args || {};
	      var scale = 'scale' in args ? args.scale : this.scale;
	      var rotation = 'rotation' in args ? args.rotation : this.rotation;
	      return new PageViewport(this.viewBox.slice(), scale, rotation, this.offsetX, this.offsetY, args.dontFlip);
	    },
	    convertToViewportPoint: function PageViewport_convertToViewportPoint(x, y) {
	      return Util.applyTransform([x, y], this.transform);
	    },
	    convertToViewportRectangle: function PageViewport_convertToViewportRectangle(rect) {
	      var tl = Util.applyTransform([rect[0], rect[1]], this.transform);
	      var br = Util.applyTransform([rect[2], rect[3]], this.transform);
	      return [tl[0], tl[1], br[0], br[1]];
	    },
	    convertToPdfPoint: function PageViewport_convertToPdfPoint(x, y) {
	      return Util.applyInverseTransform([x, y], this.transform);
	    }
	  };
	  return PageViewport;
	}();
	var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];
	function stringToPDFString(str) {
	  var i,
	      n = str.length,
	      strBuf = [];
	  if (str[0] === '\xFE' && str[1] === '\xFF') {
	    for (i = 2; i < n; i += 2) {
	      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
	    }
	  } else {
	    for (i = 0; i < n; ++i) {
	      var code = PDFStringTranslateTable[str.charCodeAt(i)];
	      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
	    }
	  }
	  return strBuf.join('');
	}
	function stringToUTF8String(str) {
	  return decodeURIComponent(escape(str));
	}
	function utf8StringToString(str) {
	  return unescape(encodeURIComponent(str));
	}
	function isEmptyObj(obj) {
	  for (var key in obj) {
	    return false;
	  }
	  return true;
	}
	function isBool(v) {
	  return typeof v === 'boolean';
	}
	function isNum(v) {
	  return typeof v === 'number';
	}
	function isString(v) {
	  return typeof v === 'string';
	}
	function isArrayBuffer(v) {
	  return (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v !== null && v.byteLength !== undefined;
	}
	function isSpace(ch) {
	  return ch === 0x20 || ch === 0x09 || ch === 0x0D || ch === 0x0A;
	}
	function isNodeJS() {
	  return (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && process + '' === '[object process]';
	}
	function createPromiseCapability() {
	  var capability = {};
	  capability.promise = new Promise(function (resolve, reject) {
	    capability.resolve = resolve;
	    capability.reject = reject;
	  });
	  return capability;
	}
	var StatTimer = function StatTimerClosure() {
	  function rpad(str, pad, length) {
	    while (str.length < length) {
	      str += pad;
	    }
	    return str;
	  }
	  function StatTimer() {
	    this.started = Object.create(null);
	    this.times = [];
	    this.enabled = true;
	  }
	  StatTimer.prototype = {
	    time: function StatTimer_time(name) {
	      if (!this.enabled) {
	        return;
	      }
	      if (name in this.started) {
	        warn('Timer is already running for ' + name);
	      }
	      this.started[name] = Date.now();
	    },
	    timeEnd: function StatTimer_timeEnd(name) {
	      if (!this.enabled) {
	        return;
	      }
	      if (!(name in this.started)) {
	        warn('Timer has not been started for ' + name);
	      }
	      this.times.push({
	        'name': name,
	        'start': this.started[name],
	        'end': Date.now()
	      });
	      delete this.started[name];
	    },
	    toString: function StatTimer_toString() {
	      var i, ii;
	      var times = this.times;
	      var out = '';
	      var longest = 0;
	      for (i = 0, ii = times.length; i < ii; ++i) {
	        var name = times[i]['name'];
	        if (name.length > longest) {
	          longest = name.length;
	        }
	      }
	      for (i = 0, ii = times.length; i < ii; ++i) {
	        var span = times[i];
	        var duration = span.end - span.start;
	        out += rpad(span['name'], ' ', longest) + ' ' + duration + 'ms\n';
	      }
	      return out;
	    }
	  };
	  return StatTimer;
	}();
	var createBlob = function createBlob(data, contentType) {
	  if (typeof Blob !== 'undefined') {
	    return new Blob([data], { type: contentType });
	  }
	  throw new Error('The "Blob" constructor is not supported.');
	};
	var createObjectURL = function createObjectURLClosure() {
	  var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	  return function createObjectURL(data, contentType) {
	    var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    if (!forceDataSchema && URL.createObjectURL) {
	      var blob = createBlob(data, contentType);
	      return URL.createObjectURL(blob);
	    }
	    var buffer = 'data:' + contentType + ';base64,';
	    for (var i = 0, ii = data.length; i < ii; i += 3) {
	      var b1 = data[i] & 0xFF;
	      var b2 = data[i + 1] & 0xFF;
	      var b3 = data[i + 2] & 0xFF;
	      var d1 = b1 >> 2,
	          d2 = (b1 & 3) << 4 | b2 >> 4;
	      var d3 = i + 1 < ii ? (b2 & 0xF) << 2 | b3 >> 6 : 64;
	      var d4 = i + 2 < ii ? b3 & 0x3F : 64;
	      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
	    }
	    return buffer;
	  };
	}();
	function resolveCall(fn, args) {
	  var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!fn) {
	    return Promise.resolve(undefined);
	  }
	  return new Promise(function (resolve, reject) {
	    resolve(fn.apply(thisArg, args));
	  });
	}
	function wrapReason(reason) {
	  if ((typeof reason === 'undefined' ? 'undefined' : _typeof(reason)) !== 'object') {
	    return reason;
	  }
	  switch (reason.name) {
	    case 'AbortException':
	      return new AbortException(reason.message);
	    case 'MissingPDFException':
	      return new MissingPDFException(reason.message);
	    case 'UnexpectedResponseException':
	      return new UnexpectedResponseException(reason.message, reason.status);
	    default:
	      return new UnknownErrorException(reason.message, reason.details);
	  }
	}
	function makeReasonSerializable(reason) {
	  if (!(reason instanceof Error) || reason instanceof AbortException || reason instanceof MissingPDFException || reason instanceof UnexpectedResponseException || reason instanceof UnknownErrorException) {
	    return reason;
	  }
	  return new UnknownErrorException(reason.message, reason.toString());
	}
	function resolveOrReject(capability, success, reason) {
	  if (success) {
	    capability.resolve();
	  } else {
	    capability.reject(reason);
	  }
	}
	function finalize(promise) {
	  return Promise.resolve(promise).catch(function () {});
	}
	function MessageHandler(sourceName, targetName, comObj) {
	  var _this = this;

	  this.sourceName = sourceName;
	  this.targetName = targetName;
	  this.comObj = comObj;
	  this.callbackId = 1;
	  this.streamId = 1;
	  this.postMessageTransfers = true;
	  this.streamSinks = Object.create(null);
	  this.streamControllers = Object.create(null);
	  var callbacksCapabilities = this.callbacksCapabilities = Object.create(null);
	  var ah = this.actionHandler = Object.create(null);
	  this._onComObjOnMessage = function (event) {
	    var data = event.data;
	    if (data.targetName !== _this.sourceName) {
	      return;
	    }
	    if (data.stream) {
	      _this._processStreamMessage(data);
	    } else if (data.isReply) {
	      var callbackId = data.callbackId;
	      if (data.callbackId in callbacksCapabilities) {
	        var callback = callbacksCapabilities[callbackId];
	        delete callbacksCapabilities[callbackId];
	        if ('error' in data) {
	          callback.reject(wrapReason(data.error));
	        } else {
	          callback.resolve(data.data);
	        }
	      } else {
	        throw new Error('Cannot resolve callback ' + callbackId);
	      }
	    } else if (data.action in ah) {
	      var action = ah[data.action];
	      if (data.callbackId) {
	        var _sourceName = _this.sourceName;
	        var _targetName = data.sourceName;
	        Promise.resolve().then(function () {
	          return action[0].call(action[1], data.data);
	        }).then(function (result) {
	          comObj.postMessage({
	            sourceName: _sourceName,
	            targetName: _targetName,
	            isReply: true,
	            callbackId: data.callbackId,
	            data: result
	          });
	        }, function (reason) {
	          comObj.postMessage({
	            sourceName: _sourceName,
	            targetName: _targetName,
	            isReply: true,
	            callbackId: data.callbackId,
	            error: makeReasonSerializable(reason)
	          });
	        });
	      } else if (data.streamId) {
	        _this._createStreamSink(data);
	      } else {
	        action[0].call(action[1], data.data);
	      }
	    } else {
	      throw new Error('Unknown action from worker: ' + data.action);
	    }
	  };
	  comObj.addEventListener('message', this._onComObjOnMessage);
	}
	MessageHandler.prototype = {
	  on: function on(actionName, handler, scope) {
	    var ah = this.actionHandler;
	    if (ah[actionName]) {
	      throw new Error('There is already an actionName called "' + actionName + '"');
	    }
	    ah[actionName] = [handler, scope];
	  },
	  send: function send(actionName, data, transfers) {
	    var message = {
	      sourceName: this.sourceName,
	      targetName: this.targetName,
	      action: actionName,
	      data: data
	    };
	    this.postMessage(message, transfers);
	  },
	  sendWithPromise: function sendWithPromise(actionName, data, transfers) {
	    var callbackId = this.callbackId++;
	    var message = {
	      sourceName: this.sourceName,
	      targetName: this.targetName,
	      action: actionName,
	      data: data,
	      callbackId: callbackId
	    };
	    var capability = createPromiseCapability();
	    this.callbacksCapabilities[callbackId] = capability;
	    try {
	      this.postMessage(message, transfers);
	    } catch (e) {
	      capability.reject(e);
	    }
	    return capability.promise;
	  },
	  sendWithStream: function sendWithStream(actionName, data, queueingStrategy, transfers) {
	    var _this2 = this;

	    var streamId = this.streamId++;
	    var sourceName = this.sourceName;
	    var targetName = this.targetName;
	    return new _streams_polyfill.ReadableStream({
	      start: function start(controller) {
	        var startCapability = createPromiseCapability();
	        _this2.streamControllers[streamId] = {
	          controller: controller,
	          startCall: startCapability,
	          isClosed: false
	        };
	        _this2.postMessage({
	          sourceName: sourceName,
	          targetName: targetName,
	          action: actionName,
	          streamId: streamId,
	          data: data,
	          desiredSize: controller.desiredSize
	        });
	        return startCapability.promise;
	      },
	      pull: function pull(controller) {
	        var pullCapability = createPromiseCapability();
	        _this2.streamControllers[streamId].pullCall = pullCapability;
	        _this2.postMessage({
	          sourceName: sourceName,
	          targetName: targetName,
	          stream: 'pull',
	          streamId: streamId,
	          desiredSize: controller.desiredSize
	        });
	        return pullCapability.promise;
	      },
	      cancel: function cancel(reason) {
	        var cancelCapability = createPromiseCapability();
	        _this2.streamControllers[streamId].cancelCall = cancelCapability;
	        _this2.streamControllers[streamId].isClosed = true;
	        _this2.postMessage({
	          sourceName: sourceName,
	          targetName: targetName,
	          stream: 'cancel',
	          reason: reason,
	          streamId: streamId
	        });
	        return cancelCapability.promise;
	      }
	    }, queueingStrategy);
	  },
	  _createStreamSink: function _createStreamSink(data) {
	    var _this3 = this;

	    var self = this;
	    var action = this.actionHandler[data.action];
	    var streamId = data.streamId;
	    var desiredSize = data.desiredSize;
	    var sourceName = this.sourceName;
	    var targetName = data.sourceName;
	    var capability = createPromiseCapability();
	    var sendStreamRequest = function sendStreamRequest(_ref) {
	      var stream = _ref.stream,
	          chunk = _ref.chunk,
	          transfers = _ref.transfers,
	          success = _ref.success,
	          reason = _ref.reason;

	      _this3.postMessage({
	        sourceName: sourceName,
	        targetName: targetName,
	        stream: stream,
	        streamId: streamId,
	        chunk: chunk,
	        success: success,
	        reason: reason
	      }, transfers);
	    };
	    var streamSink = {
	      enqueue: function enqueue(chunk) {
	        var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	        var transfers = arguments[2];

	        if (this.isCancelled) {
	          return;
	        }
	        var lastDesiredSize = this.desiredSize;
	        this.desiredSize -= size;
	        if (lastDesiredSize > 0 && this.desiredSize <= 0) {
	          this.sinkCapability = createPromiseCapability();
	          this.ready = this.sinkCapability.promise;
	        }
	        sendStreamRequest({
	          stream: 'enqueue',
	          chunk: chunk,
	          transfers: transfers
	        });
	      },
	      close: function close() {
	        if (this.isCancelled) {
	          return;
	        }
	        this.isCancelled = true;
	        sendStreamRequest({ stream: 'close' });
	        delete self.streamSinks[streamId];
	      },
	      error: function error(reason) {
	        if (this.isCancelled) {
	          return;
	        }
	        this.isCancelled = true;
	        sendStreamRequest({
	          stream: 'error',
	          reason: reason
	        });
	      },

	      sinkCapability: capability,
	      onPull: null,
	      onCancel: null,
	      isCancelled: false,
	      desiredSize: desiredSize,
	      ready: null
	    };
	    streamSink.sinkCapability.resolve();
	    streamSink.ready = streamSink.sinkCapability.promise;
	    this.streamSinks[streamId] = streamSink;
	    resolveCall(action[0], [data.data, streamSink], action[1]).then(function () {
	      sendStreamRequest({
	        stream: 'start_complete',
	        success: true
	      });
	    }, function (reason) {
	      sendStreamRequest({
	        stream: 'start_complete',
	        success: false,
	        reason: reason
	      });
	    });
	  },
	  _processStreamMessage: function _processStreamMessage(data) {
	    var _this4 = this;

	    var sourceName = this.sourceName;
	    var targetName = data.sourceName;
	    var streamId = data.streamId;
	    var sendStreamResponse = function sendStreamResponse(_ref2) {
	      var stream = _ref2.stream,
	          success = _ref2.success,
	          reason = _ref2.reason;

	      _this4.comObj.postMessage({
	        sourceName: sourceName,
	        targetName: targetName,
	        stream: stream,
	        success: success,
	        streamId: streamId,
	        reason: reason
	      });
	    };
	    var deleteStreamController = function deleteStreamController() {
	      Promise.all([_this4.streamControllers[data.streamId].startCall, _this4.streamControllers[data.streamId].pullCall, _this4.streamControllers[data.streamId].cancelCall].map(function (capability) {
	        return capability && finalize(capability.promise);
	      })).then(function () {
	        delete _this4.streamControllers[data.streamId];
	      });
	    };
	    switch (data.stream) {
	      case 'start_complete':
	        resolveOrReject(this.streamControllers[data.streamId].startCall, data.success, wrapReason(data.reason));
	        break;
	      case 'pull_complete':
	        resolveOrReject(this.streamControllers[data.streamId].pullCall, data.success, wrapReason(data.reason));
	        break;
	      case 'pull':
	        if (!this.streamSinks[data.streamId]) {
	          sendStreamResponse({
	            stream: 'pull_complete',
	            success: true
	          });
	          break;
	        }
	        if (this.streamSinks[data.streamId].desiredSize <= 0 && data.desiredSize > 0) {
	          this.streamSinks[data.streamId].sinkCapability.resolve();
	        }
	        this.streamSinks[data.streamId].desiredSize = data.desiredSize;
	        resolveCall(this.streamSinks[data.streamId].onPull).then(function () {
	          sendStreamResponse({
	            stream: 'pull_complete',
	            success: true
	          });
	        }, function (reason) {
	          sendStreamResponse({
	            stream: 'pull_complete',
	            success: false,
	            reason: reason
	          });
	        });
	        break;
	      case 'enqueue':
	        assert(this.streamControllers[data.streamId], 'enqueue should have stream controller');
	        if (!this.streamControllers[data.streamId].isClosed) {
	          this.streamControllers[data.streamId].controller.enqueue(data.chunk);
	        }
	        break;
	      case 'close':
	        assert(this.streamControllers[data.streamId], 'close should have stream controller');
	        if (this.streamControllers[data.streamId].isClosed) {
	          break;
	        }
	        this.streamControllers[data.streamId].isClosed = true;
	        this.streamControllers[data.streamId].controller.close();
	        deleteStreamController();
	        break;
	      case 'error':
	        assert(this.streamControllers[data.streamId], 'error should have stream controller');
	        this.streamControllers[data.streamId].controller.error(wrapReason(data.reason));
	        deleteStreamController();
	        break;
	      case 'cancel_complete':
	        resolveOrReject(this.streamControllers[data.streamId].cancelCall, data.success, wrapReason(data.reason));
	        deleteStreamController();
	        break;
	      case 'cancel':
	        if (!this.streamSinks[data.streamId]) {
	          break;
	        }
	        resolveCall(this.streamSinks[data.streamId].onCancel, [wrapReason(data.reason)]).then(function () {
	          sendStreamResponse({
	            stream: 'cancel_complete',
	            success: true
	          });
	        }, function (reason) {
	          sendStreamResponse({
	            stream: 'cancel_complete',
	            success: false,
	            reason: reason
	          });
	        });
	        this.streamSinks[data.streamId].sinkCapability.reject(wrapReason(data.reason));
	        this.streamSinks[data.streamId].isCancelled = true;
	        delete this.streamSinks[data.streamId];
	        break;
	      default:
	        throw new Error('Unexpected stream case');
	    }
	  },
	  postMessage: function postMessage(message, transfers) {
	    if (transfers && this.postMessageTransfers) {
	      this.comObj.postMessage(message, transfers);
	    } else {
	      this.comObj.postMessage(message);
	    }
	  },
	  destroy: function destroy() {
	    this.comObj.removeEventListener('message', this._onComObjOnMessage);
	  }
	};
	function loadJpegStream(id, imageUrl, objs) {
	  var img = new Image();
	  img.onload = function loadJpegStream_onloadClosure() {
	    objs.resolve(id, img);
	  };
	  img.onerror = function loadJpegStream_onerrorClosure() {
	    objs.resolve(id, null);
	    warn('Error during JPEG image loading');
	  };
	  img.src = imageUrl;
	}
	exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
	exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
	exports.OPS = OPS;
	exports.VERBOSITY_LEVELS = VERBOSITY_LEVELS;
	exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
	exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
	exports.AnnotationFieldFlag = AnnotationFieldFlag;
	exports.AnnotationFlag = AnnotationFlag;
	exports.AnnotationType = AnnotationType;
	exports.FontType = FontType;
	exports.ImageKind = ImageKind;
	exports.CMapCompressionType = CMapCompressionType;
	exports.AbortException = AbortException;
	exports.InvalidPDFException = InvalidPDFException;
	exports.MessageHandler = MessageHandler;
	exports.MissingDataException = MissingDataException;
	exports.MissingPDFException = MissingPDFException;
	exports.NativeImageDecoding = NativeImageDecoding;
	exports.NotImplementedException = NotImplementedException;
	exports.PageViewport = PageViewport;
	exports.PasswordException = PasswordException;
	exports.PasswordResponses = PasswordResponses;
	exports.StatTimer = StatTimer;
	exports.StreamType = StreamType;
	exports.TextRenderingMode = TextRenderingMode;
	exports.UnexpectedResponseException = UnexpectedResponseException;
	exports.UnknownErrorException = UnknownErrorException;
	exports.Util = Util;
	exports.XRefParseException = XRefParseException;
	exports.FormatError = FormatError;
	exports.arrayByteLength = arrayByteLength;
	exports.arraysToBytes = arraysToBytes;
	exports.assert = assert;
	exports.bytesToString = bytesToString;
	exports.createBlob = createBlob;
	exports.createPromiseCapability = createPromiseCapability;
	exports.createObjectURL = createObjectURL;
	exports.deprecated = deprecated;
	exports.getLookupTableFactory = getLookupTableFactory;
	exports.getVerbosityLevel = getVerbosityLevel;
	exports.info = info;
	exports.isArrayBuffer = isArrayBuffer;
	exports.isBool = isBool;
	exports.isEmptyObj = isEmptyObj;
	exports.isNum = isNum;
	exports.isString = isString;
	exports.isSpace = isSpace;
	exports.isNodeJS = isNodeJS;
	exports.isSameOrigin = isSameOrigin;
	exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
	exports.isLittleEndian = isLittleEndian;
	exports.isEvalSupported = isEvalSupported;
	exports.loadJpegStream = loadJpegStream;
	exports.log2 = log2;
	exports.readInt8 = readInt8;
	exports.readUint16 = readUint16;
	exports.readUint32 = readUint32;
	exports.removeNullCharacters = removeNullCharacters;
	exports.ReadableStream = _streams_polyfill.ReadableStream;
	exports.setVerbosityLevel = setVerbosityLevel;
	exports.shadow = shadow;
	exports.string32 = string32;
	exports.stringToBytes = stringToBytes;
	exports.stringToPDFString = stringToPDFString;
	exports.stringToUTF8String = stringToUTF8String;
	exports.utf8StringToString = utf8StringToString;
	exports.warn = warn;
	exports.unreachable = unreachable;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var store = __w_pdfjs_require__(43)('wks');
	var uid = __w_pdfjs_require__(11);
	var _Symbol = __w_pdfjs_require__(2).Symbol;
	var USE_SYMBOL = typeof _Symbol == 'function';
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
	};
	$exports.store = store;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if (typeof __g == 'number') __g = global;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = !__w_pdfjs_require__(15)(function () {
	  return Object.defineProperty({}, 'a', {
	    get: function get() {
	      return 7;
	    }
	  }).a != 7;
	});

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var dP = __w_pdfjs_require__(8);
	var createDesc = __w_pdfjs_require__(18);
	module.exports = __w_pdfjs_require__(3) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SimpleXMLParser = exports.DOMSVGFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = exports.getDefaultSetting = exports.LinkTarget = exports.getFilenameFromUrl = exports.isValidUrl = exports.isExternalLinkTargetSet = exports.addLinkAttributes = exports.RenderingCancelledException = exports.CustomStyle = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _util = __w_pdfjs_require__(0);

	var _global_scope = __w_pdfjs_require__(9);

	var _global_scope2 = _interopRequireDefault(_global_scope);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DEFAULT_LINK_REL = 'noopener noreferrer nofollow';
	var SVG_NS = 'http://www.w3.org/2000/svg';

	var DOMCanvasFactory = function () {
	  function DOMCanvasFactory() {
	    _classCallCheck(this, DOMCanvasFactory);
	  }

	  _createClass(DOMCanvasFactory, [{
	    key: 'create',
	    value: function create(width, height) {
	      if (width <= 0 || height <= 0) {
	        throw new Error('invalid canvas size');
	      }
	      var canvas = document.createElement('canvas');
	      var context = canvas.getContext('2d');
	      canvas.width = width;
	      canvas.height = height;
	      return {
	        canvas: canvas,
	        context: context
	      };
	    }
	  }, {
	    key: 'reset',
	    value: function reset(canvasAndContext, width, height) {
	      if (!canvasAndContext.canvas) {
	        throw new Error('canvas is not specified');
	      }
	      if (width <= 0 || height <= 0) {
	        throw new Error('invalid canvas size');
	      }
	      canvasAndContext.canvas.width = width;
	      canvasAndContext.canvas.height = height;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy(canvasAndContext) {
	      if (!canvasAndContext.canvas) {
	        throw new Error('canvas is not specified');
	      }
	      canvasAndContext.canvas.width = 0;
	      canvasAndContext.canvas.height = 0;
	      canvasAndContext.canvas = null;
	      canvasAndContext.context = null;
	    }
	  }]);

	  return DOMCanvasFactory;
	}();

	var DOMCMapReaderFactory = function () {
	  function DOMCMapReaderFactory(_ref) {
	    var _ref$baseUrl = _ref.baseUrl,
	        baseUrl = _ref$baseUrl === undefined ? null : _ref$baseUrl,
	        _ref$isCompressed = _ref.isCompressed,
	        isCompressed = _ref$isCompressed === undefined ? false : _ref$isCompressed;

	    _classCallCheck(this, DOMCMapReaderFactory);

	    this.baseUrl = baseUrl;
	    this.isCompressed = isCompressed;
	  }

	  _createClass(DOMCMapReaderFactory, [{
	    key: 'fetch',
	    value: function fetch(_ref2) {
	      var _this = this;

	      var name = _ref2.name;

	      if (!this.baseUrl) {
	        return Promise.reject(new Error('CMap baseUrl must be specified, ' + 'see "PDFJS.cMapUrl" (and also "PDFJS.cMapPacked").'));
	      }
	      if (!name) {
	        return Promise.reject(new Error('CMap name must be specified.'));
	      }
	      return new Promise(function (resolve, reject) {
	        var url = _this.baseUrl + name + (_this.isCompressed ? '.bcmap' : '');
	        var request = new XMLHttpRequest();
	        request.open('GET', url, true);
	        if (_this.isCompressed) {
	          request.responseType = 'arraybuffer';
	        }
	        request.onreadystatechange = function () {
	          if (request.readyState !== XMLHttpRequest.DONE) {
	            return;
	          }
	          if (request.status === 200 || request.status === 0) {
	            var data = void 0;
	            if (_this.isCompressed && request.response) {
	              data = new Uint8Array(request.response);
	            } else if (!_this.isCompressed && request.responseText) {
	              data = (0, _util.stringToBytes)(request.responseText);
	            }
	            if (data) {
	              resolve({
	                cMapData: data,
	                compressionType: _this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE
	              });
	              return;
	            }
	          }
	          reject(new Error('Unable to load ' + (_this.isCompressed ? 'binary ' : '') + 'CMap at: ' + url));
	        };
	        request.send(null);
	      });
	    }
	  }]);

	  return DOMCMapReaderFactory;
	}();

	var DOMSVGFactory = function () {
	  function DOMSVGFactory() {
	    _classCallCheck(this, DOMSVGFactory);
	  }

	  _createClass(DOMSVGFactory, [{
	    key: 'create',
	    value: function create(width, height) {
	      (0, _util.assert)(width > 0 && height > 0, 'Invalid SVG dimensions');
	      var svg = document.createElementNS(SVG_NS, 'svg:svg');
	      svg.setAttribute('version', '1.1');
	      svg.setAttribute('width', width + 'px');
	      svg.setAttribute('height', height + 'px');
	      svg.setAttribute('preserveAspectRatio', 'none');
	      svg.setAttribute('viewBox', '0 0 ' + width + ' ' + height);
	      return svg;
	    }
	  }, {
	    key: 'createElement',
	    value: function createElement(type) {
	      (0, _util.assert)(typeof type === 'string', 'Invalid SVG element type');
	      return document.createElementNS(SVG_NS, type);
	    }
	  }]);

	  return DOMSVGFactory;
	}();

	var SimpleDOMNode = function () {
	  function SimpleDOMNode(nodeName, nodeValue) {
	    _classCallCheck(this, SimpleDOMNode);

	    this.nodeName = nodeName;
	    this.nodeValue = nodeValue;
	    Object.defineProperty(this, 'parentNode', {
	      value: null,
	      writable: true
	    });
	  }

	  _createClass(SimpleDOMNode, [{
	    key: 'hasChildNodes',
	    value: function hasChildNodes() {
	      return this.childNodes && this.childNodes.length > 0;
	    }
	  }, {
	    key: 'firstChild',
	    get: function get() {
	      return this.childNodes[0];
	    }
	  }, {
	    key: 'nextSibling',
	    get: function get() {
	      var index = this.parentNode.childNodes.indexOf(this);
	      return this.parentNode.childNodes[index + 1];
	    }
	  }, {
	    key: 'textContent',
	    get: function get() {
	      if (!this.childNodes) {
	        return this.nodeValue || '';
	      }
	      return this.childNodes.map(function (child) {
	        return child.textContent;
	      }).join('');
	    }
	  }]);

	  return SimpleDOMNode;
	}();

	var SimpleXMLParser = function () {
	  function SimpleXMLParser() {
	    _classCallCheck(this, SimpleXMLParser);
	  }

	  _createClass(SimpleXMLParser, [{
	    key: 'parseFromString',
	    value: function parseFromString(data) {
	      var _this2 = this;

	      var nodes = [];
	      data = data.replace(/<\?[\s\S]*?\?>|<!--[\s\S]*?-->/g, '').trim();
	      data = data.replace(/<!DOCTYPE[^>\[]+(\[[^\]]+)?[^>]+>/g, '').trim();
	      data = data.replace(/>([^<][\s\S]*?)</g, function (all, text) {
	        var length = nodes.length;
	        var node = new SimpleDOMNode('#text', _this2._decodeXML(text));
	        nodes.push(node);
	        if (node.textContent.trim().length === 0) {
	          return '><';
	        }
	        return '>' + length + ',<';
	      });
	      data = data.replace(/<!\[CDATA\[([\s\S]*?)\]\]>/g, function (all, text) {
	        var length = nodes.length;
	        var node = new SimpleDOMNode('#text', text);
	        nodes.push(node);
	        return length + ',';
	      });
	      var regex = /<([\w\:]+)((?:[\s\w:=]|'[^']*'|"[^"]*")*)(?:\/>|>([\d,]*)<\/[^>]+>)/g;
	      var lastLength = void 0;
	      do {
	        lastLength = nodes.length;
	        data = data.replace(regex, function (all, name, attrs, data) {
	          var length = nodes.length;
	          var node = new SimpleDOMNode(name);
	          var children = [];
	          if (data) {
	            data = data.split(',');
	            data.pop();
	            data.forEach(function (child) {
	              var childNode = nodes[+child];
	              childNode.parentNode = node;
	              children.push(childNode);
	            });
	          }
	          node.childNodes = children;
	          nodes.push(node);
	          return length + ',';
	        });
	      } while (lastLength < nodes.length);
	      return { documentElement: nodes.pop() };
	    }
	  }, {
	    key: '_decodeXML',
	    value: function _decodeXML(text) {
	      if (text.indexOf('&') < 0) {
	        return text;
	      }
	      return text.replace(/&(#(x[0-9a-f]+|\d+)|\w+);/gi, function (all, entityName, number) {
	        if (number) {
	          if (number[0] === 'x') {
	            number = parseInt(number.substring(1), 16);
	          } else {
	            number = +number;
	          }
	          return String.fromCharCode(number);
	        }
	        switch (entityName) {
	          case 'amp':
	            return '&';
	          case 'lt':
	            return '<';
	          case 'gt':
	            return '>';
	          case 'quot':
	            return '\"';
	          case 'apos':
	            return '\'';
	        }
	        return '&' + entityName + ';';
	      });
	    }
	  }]);

	  return SimpleXMLParser;
	}();

	var CustomStyle = function CustomStyleClosure() {
	  var prefixes = ['ms', 'Moz', 'Webkit', 'O'];
	  var _cache = Object.create(null);
	  function CustomStyle() {}
	  CustomStyle.getProp = function get(propName, element) {
	    if (arguments.length === 1 && typeof _cache[propName] === 'string') {
	      return _cache[propName];
	    }
	    element = element || document.documentElement;
	    var style = element.style,
	        prefixed,
	        uPropName;
	    if (typeof style[propName] === 'string') {
	      return _cache[propName] = propName;
	    }
	    uPropName = propName.charAt(0).toUpperCase() + propName.slice(1);
	    for (var i = 0, l = prefixes.length; i < l; i++) {
	      prefixed = prefixes[i] + uPropName;
	      if (typeof style[prefixed] === 'string') {
	        return _cache[propName] = prefixed;
	      }
	    }
	    return _cache[propName] = 'undefined';
	  };
	  CustomStyle.setProp = function set(propName, element, str) {
	    var prop = this.getProp(propName);
	    if (prop !== 'undefined') {
	      element.style[prop] = str;
	    }
	  };
	  return CustomStyle;
	}();
	var RenderingCancelledException = function RenderingCancelledException() {
	  function RenderingCancelledException(msg, type) {
	    this.message = msg;
	    this.type = type;
	  }
	  RenderingCancelledException.prototype = new Error();
	  RenderingCancelledException.prototype.name = 'RenderingCancelledException';
	  RenderingCancelledException.constructor = RenderingCancelledException;
	  return RenderingCancelledException;
	}();
	var LinkTarget = {
	  NONE: 0,
	  SELF: 1,
	  BLANK: 2,
	  PARENT: 3,
	  TOP: 4
	};
	var LinkTargetStringMap = ['', '_self', '_blank', '_parent', '_top'];
	function addLinkAttributes(link, params) {
	  var url = params && params.url;
	  link.href = link.title = url ? (0, _util.removeNullCharacters)(url) : '';
	  if (url) {
	    var target = params.target;
	    if (typeof target === 'undefined') {
	      target = getDefaultSetting('externalLinkTarget');
	    }
	    link.target = LinkTargetStringMap[target];
	    var rel = params.rel;
	    if (typeof rel === 'undefined') {
	      rel = getDefaultSetting('externalLinkRel');
	    }
	    link.rel = rel;
	  }
	}
	function getFilenameFromUrl(url) {
	  var anchor = url.indexOf('#');
	  var query = url.indexOf('?');
	  var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
	  return url.substring(url.lastIndexOf('/', end) + 1, end);
	}
	function getDefaultSetting(id) {
	  var globalSettings = _global_scope2.default.PDFJS;
	  switch (id) {
	    case 'pdfBug':
	      return globalSettings ? globalSettings.pdfBug : false;
	    case 'disableAutoFetch':
	      return globalSettings ? globalSettings.disableAutoFetch : false;
	    case 'disableStream':
	      return globalSettings ? globalSettings.disableStream : false;
	    case 'disableRange':
	      return globalSettings ? globalSettings.disableRange : false;
	    case 'disableFontFace':
	      return globalSettings ? globalSettings.disableFontFace : false;
	    case 'disableCreateObjectURL':
	      return globalSettings ? globalSettings.disableCreateObjectURL : false;
	    case 'disableWebGL':
	      return globalSettings ? globalSettings.disableWebGL : true;
	    case 'cMapUrl':
	      return globalSettings ? globalSettings.cMapUrl : null;
	    case 'cMapPacked':
	      return globalSettings ? globalSettings.cMapPacked : false;
	    case 'postMessageTransfers':
	      return globalSettings ? globalSettings.postMessageTransfers : true;
	    case 'workerPort':
	      return globalSettings ? globalSettings.workerPort : null;
	    case 'workerSrc':
	      return globalSettings ? globalSettings.workerSrc : null;
	    case 'disableWorker':
	      return globalSettings ? globalSettings.disableWorker : false;
	    case 'maxImageSize':
	      return globalSettings ? globalSettings.maxImageSize : -1;
	    case 'imageResourcesPath':
	      return globalSettings ? globalSettings.imageResourcesPath : '';
	    case 'isEvalSupported':
	      return globalSettings ? globalSettings.isEvalSupported : true;
	    case 'externalLinkTarget':
	      if (!globalSettings) {
	        return LinkTarget.NONE;
	      }
	      switch (globalSettings.externalLinkTarget) {
	        case LinkTarget.NONE:
	        case LinkTarget.SELF:
	        case LinkTarget.BLANK:
	        case LinkTarget.PARENT:
	        case LinkTarget.TOP:
	          return globalSettings.externalLinkTarget;
	      }
	      (0, _util.warn)('PDFJS.externalLinkTarget is invalid: ' + globalSettings.externalLinkTarget);
	      globalSettings.externalLinkTarget = LinkTarget.NONE;
	      return LinkTarget.NONE;
	    case 'externalLinkRel':
	      return globalSettings ? globalSettings.externalLinkRel : DEFAULT_LINK_REL;
	    case 'enableStats':
	      return !!(globalSettings && globalSettings.enableStats);
	    case 'pdfjsNext':
	      return !!(globalSettings && globalSettings.pdfjsNext);
	    default:
	      throw new Error('Unknown default setting: ' + id);
	  }
	}
	function isExternalLinkTargetSet() {
	  var externalLinkTarget = getDefaultSetting('externalLinkTarget');
	  switch (externalLinkTarget) {
	    case LinkTarget.NONE:
	      return false;
	    case LinkTarget.SELF:
	    case LinkTarget.BLANK:
	    case LinkTarget.PARENT:
	    case LinkTarget.TOP:
	      return true;
	  }
	}
	function isValidUrl(url, allowRelative) {
	  (0, _util.deprecated)('isValidUrl(), please use createValidAbsoluteUrl() instead.');
	  var baseUrl = allowRelative ? 'http://example.com' : null;
	  return (0, _util.createValidAbsoluteUrl)(url, baseUrl) !== null;
	}
	exports.CustomStyle = CustomStyle;
	exports.RenderingCancelledException = RenderingCancelledException;
	exports.addLinkAttributes = addLinkAttributes;
	exports.isExternalLinkTargetSet = isExternalLinkTargetSet;
	exports.isValidUrl = isValidUrl;
	exports.getFilenameFromUrl = getFilenameFromUrl;
	exports.LinkTarget = LinkTarget;
	exports.getDefaultSetting = getDefaultSetting;
	exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;
	exports.DOMCanvasFactory = DOMCanvasFactory;
	exports.DOMCMapReaderFactory = DOMCMapReaderFactory;
	exports.DOMSVGFactory = DOMSVGFactory;
	exports.SimpleXMLParser = SimpleXMLParser;

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var toInteger = __w_pdfjs_require__(12);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
	};

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var anObject = __w_pdfjs_require__(17);
	var IE8_DOM_DEFINE = __w_pdfjs_require__(31);
	var toPrimitive = __w_pdfjs_require__(22);
	var dP = Object.defineProperty;
	exports.f = __w_pdfjs_require__(3) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) {}
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = typeof window !== 'undefined' && window.Math === Math ? window : typeof global !== 'undefined' && global.Math === Math ? global : typeof self !== 'undefined' && self.Math === Math ? self : {};

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	module.exports = function (it) {
	  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
	};

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var defined = __w_pdfjs_require__(41);
	module.exports = function (it) {
	  return Object(defined(it));
	};

	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = {};

	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var core = module.exports = { version: '2.5.1' };
	if (typeof __e == 'number') __e = core;

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var isObject = __w_pdfjs_require__(10);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var IObject = __w_pdfjs_require__(40);
	var defined = __w_pdfjs_require__(41);
	module.exports = function (it) {
	  return IObject(defined(it));
	};

	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var toInteger = __w_pdfjs_require__(12);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = false;

	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var isObject = __w_pdfjs_require__(10);
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var global = __w_pdfjs_require__(2);
	var hide = __w_pdfjs_require__(4);
	var has = __w_pdfjs_require__(6);
	var SRC = __w_pdfjs_require__(11)('src');
	var TO_STRING = 'toString';
	var $toString = Function[TO_STRING];
	var TPL = ('' + $toString).split(TO_STRING);
	__w_pdfjs_require__(16).inspectSource = function (it) {
	  return $toString.call(it);
	};
	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) has(val, 'name') || hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    hide(O, key, val);
	  }
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var aFunction = __w_pdfjs_require__(33);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }
	  return function () {
	    return fn.apply(that, arguments);
	  };
	};

	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var toString = {}.toString;
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var shared = __w_pdfjs_require__(43)('keys');
	var uid = __w_pdfjs_require__(11);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};

	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var def = __w_pdfjs_require__(8).f;
	var has = __w_pdfjs_require__(6);
	var TAG = __w_pdfjs_require__(1)('toStringTag');
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
	    configurable: true,
	    value: tag
	  });
	};

	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.validateResponseStatus = exports.validateRangeRequestCapabilities = exports.createResponseStatusError = undefined;

	var _util = __w_pdfjs_require__(0);

	function validateRangeRequestCapabilities(_ref) {
	  var getResponseHeader = _ref.getResponseHeader,
	      isHttp = _ref.isHttp,
	      rangeChunkSize = _ref.rangeChunkSize,
	      disableRange = _ref.disableRange;

	  (0, _util.assert)(rangeChunkSize > 0);
	  var returnValues = {
	    allowRangeRequests: false,
	    suggestedLength: undefined
	  };
	  if (disableRange || !isHttp) {
	    return returnValues;
	  }
	  if (getResponseHeader('Accept-Ranges') !== 'bytes') {
	    return returnValues;
	  }
	  var contentEncoding = getResponseHeader('Content-Encoding') || 'identity';
	  if (contentEncoding !== 'identity') {
	    return returnValues;
	  }
	  var length = parseInt(getResponseHeader('Content-Length'), 10);
	  if (!Number.isInteger(length)) {
	    return returnValues;
	  }
	  returnValues.suggestedLength = length;
	  if (length <= 2 * rangeChunkSize) {
	    return returnValues;
	  }
	  returnValues.allowRangeRequests = true;
	  return returnValues;
	}
	function createResponseStatusError(status, url) {
	  if (status === 404 || status === 0 && /^file:/.test(url)) {
	    return new _util.MissingPDFException('Missing PDF "' + url + '".');
	  }
	  return new _util.UnexpectedResponseException('Unexpected server response (' + status + ') while retrieving PDF "' + url + '".', status);
	}
	function validateResponseStatus(status) {
	  return status === 200 || status === 206;
	}
	exports.createResponseStatusError = createResponseStatusError;
	exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;
	exports.validateResponseStatus = validateResponseStatus;

	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var global = __w_pdfjs_require__(2);
	var core = __w_pdfjs_require__(16);
	var hide = __w_pdfjs_require__(4);
	var redefine = __w_pdfjs_require__(23);
	var ctx = __w_pdfjs_require__(24);
	var PROTOTYPE = 'prototype';
	var $export = function $export(type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    own = !IS_FORCED && target && target[key] !== undefined;
	    out = (own ? target : source)[key];
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if (target) redefine(target, key, out, type & $export.U);
	    if (exports[key] != out) hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	global.core = core;
	$export.F = 1;
	$export.G = 2;
	$export.S = 4;
	$export.P = 8;
	$export.B = 16;
	$export.W = 32;
	$export.U = 64;
	$export.R = 128;
	module.exports = $export;

	/***/ }),
	/* 31 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = !__w_pdfjs_require__(3) && !__w_pdfjs_require__(15)(function () {
	  return Object.defineProperty(__w_pdfjs_require__(32)('div'), 'a', {
	    get: function get() {
	      return 7;
	    }
	  }).a != 7;
	});

	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var isObject = __w_pdfjs_require__(10);
	var document = __w_pdfjs_require__(2).document;
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};

	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var global = __w_pdfjs_require__(2);
	var hide = __w_pdfjs_require__(4);
	var uid = __w_pdfjs_require__(11);
	var TYPED = uid('typed_array');
	var VIEW = uid('view');
	var ABV = !!(global.ArrayBuffer && global.DataView);
	var CONSTR = ABV;
	var i = 0;
	var l = 9;
	var Typed;
	var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');
	while (i < l) {
	  if (Typed = global[TypedArrayConstructors[i++]]) {
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}
	module.exports = {
	  ABV: ABV,
	  CONSTR: CONSTR,
	  TYPED: TYPED,
	  VIEW: VIEW
	};

	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var redefine = __w_pdfjs_require__(23);
	module.exports = function (target, src, safe) {
	  for (var key in src) {
	    redefine(target, key, src[key], safe);
	  }return target;
	};

	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
	    throw TypeError(name + ': incorrect invocation!');
	  }
	  return it;
	};

	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var toInteger = __w_pdfjs_require__(12);
	var toLength = __w_pdfjs_require__(7);
	module.exports = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length!');
	  return length;
	};

	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var $keys = __w_pdfjs_require__(39);
	var hiddenKeys = __w_pdfjs_require__(27).concat('length', 'prototype');
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};

	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var has = __w_pdfjs_require__(6);
	var toIObject = __w_pdfjs_require__(19);
	var arrayIndexOf = __w_pdfjs_require__(42)(false);
	var IE_PROTO = __w_pdfjs_require__(26)('IE_PROTO');
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) {
	    if (key != IE_PROTO) has(O, key) && result.push(key);
	  }while (names.length > i) {
	    if (has(O, key = names[i++])) {
	      ~arrayIndexOf(result, key) || result.push(key);
	    }
	  }return result;
	};

	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var cof = __w_pdfjs_require__(25);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var toIObject = __w_pdfjs_require__(19);
	var toLength = __w_pdfjs_require__(7);
	var toAbsoluteIndex = __w_pdfjs_require__(20);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      if (value != value) return true;
	    } else for (; length > index; index++) {
	      if (IS_INCLUDES || index in O) {
	        if (O[index] === el) return IS_INCLUDES || index || 0;
	      }
	    }return !IS_INCLUDES && -1;
	  };
	};

	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var global = __w_pdfjs_require__(2);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};

	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var toObject = __w_pdfjs_require__(13);
	var toAbsoluteIndex = __w_pdfjs_require__(20);
	var toLength = __w_pdfjs_require__(7);
	module.exports = function fill(value) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var aLen = arguments.length;
	  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) {
	    O[index++] = value;
	  }return O;
	};

	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var cof = __w_pdfjs_require__(25);
	var TAG = __w_pdfjs_require__(1)('toStringTag');
	var ARG = cof(function () {
	  return arguments;
	}()) == 'Arguments';
	var tryGet = function tryGet(it, key) {
	  try {
	    return it[key];
	  } catch (e) {}
	};
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var anObject = __w_pdfjs_require__(17);
	var dPs = __w_pdfjs_require__(61);
	var enumBugKeys = __w_pdfjs_require__(27);
	var IE_PROTO = __w_pdfjs_require__(26)('IE_PROTO');
	var Empty = function Empty() {};
	var PROTOTYPE = 'prototype';
	var _createDict = function createDict() {
	  var iframe = __w_pdfjs_require__(32)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __w_pdfjs_require__(63).appendChild(iframe);
	  iframe.src = 'javascript:';
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  _createDict = iframeDocument.F;
	  while (i--) {
	    delete _createDict[PROTOTYPE][enumBugKeys[i]];
	  }return _createDict();
	};
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    result[IE_PROTO] = O;
	  } else result = _createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var has = __w_pdfjs_require__(6);
	var toObject = __w_pdfjs_require__(13);
	var IE_PROTO = __w_pdfjs_require__(26)('IE_PROTO');
	var ObjectProto = Object.prototype;
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  }
	  return O instanceof Object ? ObjectProto : null;
	};

	/***/ }),
	/* 48 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.build = exports.version = exports._UnsupportedManager = exports.setPDFNetworkStreamClass = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFWorker = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.getDocument = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _util = __w_pdfjs_require__(0);

	var _dom_utils = __w_pdfjs_require__(5);

	var _font_loader = __w_pdfjs_require__(83);

	var _canvas = __w_pdfjs_require__(84);

	var _global_scope = __w_pdfjs_require__(9);

	var _global_scope2 = _interopRequireDefault(_global_scope);

	var _metadata = __w_pdfjs_require__(50);

	var _transport_stream = __w_pdfjs_require__(86);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DEFAULT_RANGE_CHUNK_SIZE = 65536;
	var isWorkerDisabled = false;
	var workerSrc;
	var isPostMessageTransfersDisabled = false;
	var pdfjsFilePath = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : null;
	var fakeWorkerFilesLoader = null;
	var useRequireEnsure = false;
	{
	  if (typeof window === 'undefined') {
	    isWorkerDisabled = true;
	    if (false) {
	      require.ensure = require('node-ensure');
	    }
	    useRequireEnsure = true;
	  } else if (true) {
	    useRequireEnsure = true;
	  }
	  if (typeof requirejs !== 'undefined' && requirejs.toUrl) {
	    workerSrc = requirejs.toUrl('pdfjs-dist/build/pdf.worker.js');
	  }
	  var dynamicLoaderSupported = typeof requirejs !== 'undefined' && requirejs.load;
	  fakeWorkerFilesLoader = useRequireEnsure ? function (callback) {
	    __webpack_require__.e/* nsure */(1, function () {
	      var worker;
	      worker = __webpack_require__(157);
	      callback(worker.WorkerMessageHandler);
	    });
	  } : dynamicLoaderSupported ? function (callback) {
	    requirejs(['pdfjs-dist/build/pdf.worker'], function (worker) {
	      callback(worker.WorkerMessageHandler);
	    });
	  } : null;
	}
	var PDFNetworkStream;
	function setPDFNetworkStreamClass(cls) {
	  PDFNetworkStream = cls;
	}
	function getDocument(src, pdfDataRangeTransport, passwordCallback, progressCallback) {
	  var task = new PDFDocumentLoadingTask();
	  if (arguments.length > 1) {
	    (0, _util.deprecated)('getDocument is called with pdfDataRangeTransport, ' + 'passwordCallback or progressCallback argument');
	  }
	  if (pdfDataRangeTransport) {
	    if (!(pdfDataRangeTransport instanceof PDFDataRangeTransport)) {
	      pdfDataRangeTransport = Object.create(pdfDataRangeTransport);
	      pdfDataRangeTransport.length = src.length;
	      pdfDataRangeTransport.initialData = src.initialData;
	      if (!pdfDataRangeTransport.abort) {
	        pdfDataRangeTransport.abort = function () {};
	      }
	    }
	    src = Object.create(src);
	    src.range = pdfDataRangeTransport;
	  }
	  task.onPassword = passwordCallback || null;
	  task.onProgress = progressCallback || null;
	  var source;
	  if (typeof src === 'string') {
	    source = { url: src };
	  } else if ((0, _util.isArrayBuffer)(src)) {
	    source = { data: src };
	  } else if (src instanceof PDFDataRangeTransport) {
	    source = { range: src };
	  } else {
	    if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) !== 'object') {
	      throw new Error('Invalid parameter in getDocument, ' + 'need either Uint8Array, string or a parameter object');
	    }
	    if (!src.url && !src.data && !src.range) {
	      throw new Error('Invalid parameter object: need either .data, .range or .url');
	    }
	    source = src;
	  }
	  var params = {};
	  var rangeTransport = null;
	  var worker = null;
	  var CMapReaderFactory = _dom_utils.DOMCMapReaderFactory;
	  for (var key in source) {
	    if (key === 'url' && typeof window !== 'undefined') {
	      params[key] = new URL(source[key], window.location).href;
	      continue;
	    } else if (key === 'range') {
	      rangeTransport = source[key];
	      continue;
	    } else if (key === 'worker') {
	      worker = source[key];
	      continue;
	    } else if (key === 'data' && !(source[key] instanceof Uint8Array)) {
	      var pdfBytes = source[key];
	      if (typeof pdfBytes === 'string') {
	        params[key] = (0, _util.stringToBytes)(pdfBytes);
	      } else if ((typeof pdfBytes === 'undefined' ? 'undefined' : _typeof(pdfBytes)) === 'object' && pdfBytes !== null && !isNaN(pdfBytes.length)) {
	        params[key] = new Uint8Array(pdfBytes);
	      } else if ((0, _util.isArrayBuffer)(pdfBytes)) {
	        params[key] = new Uint8Array(pdfBytes);
	      } else {
	        throw new Error('Invalid PDF binary data: either typed array, ' + 'string or array-like object is expected in the ' + 'data property.');
	      }
	      continue;
	    } else if (key === 'CMapReaderFactory') {
	      CMapReaderFactory = source[key];
	      continue;
	    }
	    params[key] = source[key];
	  }
	  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;
	  params.ignoreErrors = params.stopAtErrors !== true;
	  if (params.disableNativeImageDecoder !== undefined) {
	    (0, _util.deprecated)('parameter disableNativeImageDecoder, ' + 'use nativeImageDecoderSupport instead');
	  }
	  params.nativeImageDecoderSupport = params.nativeImageDecoderSupport || (params.disableNativeImageDecoder === true ? _util.NativeImageDecoding.NONE : _util.NativeImageDecoding.DECODE);
	  if (params.nativeImageDecoderSupport !== _util.NativeImageDecoding.DECODE && params.nativeImageDecoderSupport !== _util.NativeImageDecoding.NONE && params.nativeImageDecoderSupport !== _util.NativeImageDecoding.DISPLAY) {
	    (0, _util.warn)('Invalid parameter nativeImageDecoderSupport: ' + 'need a state of enum {NativeImageDecoding}');
	    params.nativeImageDecoderSupport = _util.NativeImageDecoding.DECODE;
	  }
	  if (!worker) {
	    var workerPort = (0, _dom_utils.getDefaultSetting)('workerPort');
	    worker = workerPort ? PDFWorker.fromPort(workerPort) : new PDFWorker();
	    task._worker = worker;
	  }
	  var docId = task.docId;
	  worker.promise.then(function () {
	    if (task.destroyed) {
	      throw new Error('Loading aborted');
	    }
	    return _fetchDocument(worker, params, rangeTransport, docId).then(function (workerId) {
	      if (task.destroyed) {
	        throw new Error('Loading aborted');
	      }
	      var networkStream = void 0;
	      if (rangeTransport) {
	        networkStream = new _transport_stream.PDFDataTransportStream(params, rangeTransport);
	      } else if (!params.data) {
	        networkStream = new PDFNetworkStream({
	          source: params,
	          disableRange: (0, _dom_utils.getDefaultSetting)('disableRange')
	        });
	      }
	      var messageHandler = new _util.MessageHandler(docId, workerId, worker.port);
	      messageHandler.postMessageTransfers = worker.postMessageTransfers;
	      var transport = new WorkerTransport(messageHandler, task, networkStream, CMapReaderFactory);
	      task._transport = transport;
	      messageHandler.send('Ready', null);
	    });
	  }).catch(task._capability.reject);
	  return task;
	}
	function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {
	  if (worker.destroyed) {
	    return Promise.reject(new Error('Worker was destroyed'));
	  }
	  var apiVersion = '1.9.634';
	  source.disableAutoFetch = (0, _dom_utils.getDefaultSetting)('disableAutoFetch');
	  source.disableStream = (0, _dom_utils.getDefaultSetting)('disableStream');
	  source.chunkedViewerLoading = !!pdfDataRangeTransport;
	  if (pdfDataRangeTransport) {
	    source.length = pdfDataRangeTransport.length;
	    source.initialData = pdfDataRangeTransport.initialData;
	  }
	  return worker.messageHandler.sendWithPromise('GetDocRequest', {
	    docId: docId,
	    apiVersion: apiVersion,
	    source: {
	      data: source.data,
	      url: source.url,
	      password: source.password,
	      disableAutoFetch: source.disableAutoFetch,
	      rangeChunkSize: source.rangeChunkSize,
	      length: source.length
	    },
	    maxImageSize: (0, _dom_utils.getDefaultSetting)('maxImageSize'),
	    disableFontFace: (0, _dom_utils.getDefaultSetting)('disableFontFace'),
	    disableCreateObjectURL: (0, _dom_utils.getDefaultSetting)('disableCreateObjectURL'),
	    postMessageTransfers: (0, _dom_utils.getDefaultSetting)('postMessageTransfers') && !isPostMessageTransfersDisabled,
	    docBaseUrl: source.docBaseUrl,
	    nativeImageDecoderSupport: source.nativeImageDecoderSupport,
	    ignoreErrors: source.ignoreErrors,
	    isEvalSupported: (0, _dom_utils.getDefaultSetting)('isEvalSupported')
	  }).then(function (workerId) {
	    if (worker.destroyed) {
	      throw new Error('Worker was destroyed');
	    }
	    return workerId;
	  });
	}
	var PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {
	  var nextDocumentId = 0;
	  function PDFDocumentLoadingTask() {
	    this._capability = (0, _util.createPromiseCapability)();
	    this._transport = null;
	    this._worker = null;
	    this.docId = 'd' + nextDocumentId++;
	    this.destroyed = false;
	    this.onPassword = null;
	    this.onProgress = null;
	    this.onUnsupportedFeature = null;
	  }
	  PDFDocumentLoadingTask.prototype = {
	    get promise() {
	      return this._capability.promise;
	    },
	    destroy: function destroy() {
	      var _this = this;

	      this.destroyed = true;
	      var transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();
	      return transportDestroyed.then(function () {
	        _this._transport = null;
	        if (_this._worker) {
	          _this._worker.destroy();
	          _this._worker = null;
	        }
	      });
	    },

	    then: function PDFDocumentLoadingTask_then(onFulfilled, onRejected) {
	      return this.promise.then.apply(this.promise, arguments);
	    }
	  };
	  return PDFDocumentLoadingTask;
	}();
	var PDFDataRangeTransport = function pdfDataRangeTransportClosure() {
	  function PDFDataRangeTransport(length, initialData) {
	    this.length = length;
	    this.initialData = initialData;
	    this._rangeListeners = [];
	    this._progressListeners = [];
	    this._progressiveReadListeners = [];
	    this._readyCapability = (0, _util.createPromiseCapability)();
	  }
	  PDFDataRangeTransport.prototype = {
	    addRangeListener: function PDFDataRangeTransport_addRangeListener(listener) {
	      this._rangeListeners.push(listener);
	    },
	    addProgressListener: function PDFDataRangeTransport_addProgressListener(listener) {
	      this._progressListeners.push(listener);
	    },
	    addProgressiveReadListener: function PDFDataRangeTransport_addProgressiveReadListener(listener) {
	      this._progressiveReadListeners.push(listener);
	    },
	    onDataRange: function PDFDataRangeTransport_onDataRange(begin, chunk) {
	      var listeners = this._rangeListeners;
	      for (var i = 0, n = listeners.length; i < n; ++i) {
	        listeners[i](begin, chunk);
	      }
	    },
	    onDataProgress: function PDFDataRangeTransport_onDataProgress(loaded) {
	      var _this2 = this;

	      this._readyCapability.promise.then(function () {
	        var listeners = _this2._progressListeners;
	        for (var i = 0, n = listeners.length; i < n; ++i) {
	          listeners[i](loaded);
	        }
	      });
	    },
	    onDataProgressiveRead: function PDFDataRangeTransport_onDataProgress(chunk) {
	      var _this3 = this;

	      this._readyCapability.promise.then(function () {
	        var listeners = _this3._progressiveReadListeners;
	        for (var i = 0, n = listeners.length; i < n; ++i) {
	          listeners[i](chunk);
	        }
	      });
	    },
	    transportReady: function PDFDataRangeTransport_transportReady() {
	      this._readyCapability.resolve();
	    },
	    requestDataRange: function PDFDataRangeTransport_requestDataRange(begin, end) {
	      throw new Error('Abstract method PDFDataRangeTransport.requestDataRange');
	    },
	    abort: function PDFDataRangeTransport_abort() {}
	  };
	  return PDFDataRangeTransport;
	}();
	var PDFDocumentProxy = function PDFDocumentProxyClosure() {
	  function PDFDocumentProxy(pdfInfo, transport, loadingTask) {
	    this.pdfInfo = pdfInfo;
	    this.transport = transport;
	    this.loadingTask = loadingTask;
	  }
	  PDFDocumentProxy.prototype = {
	    get numPages() {
	      return this.pdfInfo.numPages;
	    },
	    get fingerprint() {
	      return this.pdfInfo.fingerprint;
	    },
	    getPage: function PDFDocumentProxy_getPage(pageNumber) {
	      return this.transport.getPage(pageNumber);
	    },
	    getPageIndex: function PDFDocumentProxy_getPageIndex(ref) {
	      return this.transport.getPageIndex(ref);
	    },
	    getDestinations: function PDFDocumentProxy_getDestinations() {
	      return this.transport.getDestinations();
	    },
	    getDestination: function PDFDocumentProxy_getDestination(id) {
	      return this.transport.getDestination(id);
	    },
	    getPageLabels: function PDFDocumentProxy_getPageLabels() {
	      return this.transport.getPageLabels();
	    },
	    getPageMode: function getPageMode() {
	      return this.transport.getPageMode();
	    },

	    getAttachments: function PDFDocumentProxy_getAttachments() {
	      return this.transport.getAttachments();
	    },
	    getJavaScript: function PDFDocumentProxy_getJavaScript() {
	      return this.transport.getJavaScript();
	    },
	    getOutline: function PDFDocumentProxy_getOutline() {
	      return this.transport.getOutline();
	    },
	    getMetadata: function PDFDocumentProxy_getMetadata() {
	      return this.transport.getMetadata();
	    },
	    getData: function PDFDocumentProxy_getData() {
	      return this.transport.getData();
	    },
	    getDownloadInfo: function PDFDocumentProxy_getDownloadInfo() {
	      return this.transport.downloadInfoCapability.promise;
	    },
	    getStats: function PDFDocumentProxy_getStats() {
	      return this.transport.getStats();
	    },
	    cleanup: function PDFDocumentProxy_cleanup() {
	      this.transport.startCleanup();
	    },
	    destroy: function PDFDocumentProxy_destroy() {
	      return this.loadingTask.destroy();
	    }
	  };
	  return PDFDocumentProxy;
	}();
	var PDFPageProxy = function PDFPageProxyClosure() {
	  function PDFPageProxy(pageIndex, pageInfo, transport) {
	    this.pageIndex = pageIndex;
	    this.pageInfo = pageInfo;
	    this.transport = transport;
	    this.stats = new _util.StatTimer();
	    this.stats.enabled = (0, _dom_utils.getDefaultSetting)('enableStats');
	    this.commonObjs = transport.commonObjs;
	    this.objs = new PDFObjects();
	    this.cleanupAfterRender = false;
	    this.pendingCleanup = false;
	    this.intentStates = Object.create(null);
	    this.destroyed = false;
	  }
	  PDFPageProxy.prototype = {
	    get pageNumber() {
	      return this.pageIndex + 1;
	    },
	    get rotate() {
	      return this.pageInfo.rotate;
	    },
	    get ref() {
	      return this.pageInfo.ref;
	    },
	    get userUnit() {
	      return this.pageInfo.userUnit;
	    },
	    get view() {
	      return this.pageInfo.view;
	    },
	    getViewport: function PDFPageProxy_getViewport(scale, rotate) {
	      if (arguments.length < 2) {
	        rotate = this.rotate;
	      }
	      return new _util.PageViewport(this.view, scale, rotate, 0, 0);
	    },
	    getAnnotations: function PDFPageProxy_getAnnotations(params) {
	      var intent = params && params.intent || null;
	      if (!this.annotationsPromise || this.annotationsIntent !== intent) {
	        this.annotationsPromise = this.transport.getAnnotations(this.pageIndex, intent);
	        this.annotationsIntent = intent;
	      }
	      return this.annotationsPromise;
	    },
	    render: function PDFPageProxy_render(params) {
	      var _this4 = this;

	      var stats = this.stats;
	      stats.time('Overall');
	      this.pendingCleanup = false;
	      var renderingIntent = params.intent === 'print' ? 'print' : 'display';
	      var canvasFactory = params.canvasFactory || new _dom_utils.DOMCanvasFactory();
	      if (!this.intentStates[renderingIntent]) {
	        this.intentStates[renderingIntent] = Object.create(null);
	      }
	      var intentState = this.intentStates[renderingIntent];
	      if (!intentState.displayReadyCapability) {
	        intentState.receivingOperatorList = true;
	        intentState.displayReadyCapability = (0, _util.createPromiseCapability)();
	        intentState.operatorList = {
	          fnArray: [],
	          argsArray: [],
	          lastChunk: false
	        };
	        this.stats.time('Page Request');
	        this.transport.messageHandler.send('RenderPageRequest', {
	          pageIndex: this.pageNumber - 1,
	          intent: renderingIntent,
	          renderInteractiveForms: params.renderInteractiveForms === true
	        });
	      }
	      var complete = function complete(error) {
	        var i = intentState.renderTasks.indexOf(internalRenderTask);
	        if (i >= 0) {
	          intentState.renderTasks.splice(i, 1);
	        }
	        if (_this4.cleanupAfterRender) {
	          _this4.pendingCleanup = true;
	        }
	        _this4._tryCleanup();
	        if (error) {
	          internalRenderTask.capability.reject(error);
	        } else {
	          internalRenderTask.capability.resolve();
	        }
	        stats.timeEnd('Rendering');
	        stats.timeEnd('Overall');
	      };
	      var internalRenderTask = new InternalRenderTask(complete, params, this.objs, this.commonObjs, intentState.operatorList, this.pageNumber, canvasFactory);
	      internalRenderTask.useRequestAnimationFrame = renderingIntent !== 'print';
	      if (!intentState.renderTasks) {
	        intentState.renderTasks = [];
	      }
	      intentState.renderTasks.push(internalRenderTask);
	      var renderTask = internalRenderTask.task;
	      if (params.continueCallback) {
	        (0, _util.deprecated)('render is used with continueCallback parameter');
	        renderTask.onContinue = params.continueCallback;
	      }
	      intentState.displayReadyCapability.promise.then(function (transparency) {
	        if (_this4.pendingCleanup) {
	          complete();
	          return;
	        }
	        stats.time('Rendering');
	        internalRenderTask.initializeGraphics(transparency);
	        internalRenderTask.operatorListChanged();
	      }).catch(complete);
	      return renderTask;
	    },
	    getOperatorList: function PDFPageProxy_getOperatorList() {
	      function operatorListChanged() {
	        if (intentState.operatorList.lastChunk) {
	          intentState.opListReadCapability.resolve(intentState.operatorList);
	          var i = intentState.renderTasks.indexOf(opListTask);
	          if (i >= 0) {
	            intentState.renderTasks.splice(i, 1);
	          }
	        }
	      }
	      var renderingIntent = 'oplist';
	      if (!this.intentStates[renderingIntent]) {
	        this.intentStates[renderingIntent] = Object.create(null);
	      }
	      var intentState = this.intentStates[renderingIntent];
	      var opListTask;
	      if (!intentState.opListReadCapability) {
	        opListTask = {};
	        opListTask.operatorListChanged = operatorListChanged;
	        intentState.receivingOperatorList = true;
	        intentState.opListReadCapability = (0, _util.createPromiseCapability)();
	        intentState.renderTasks = [];
	        intentState.renderTasks.push(opListTask);
	        intentState.operatorList = {
	          fnArray: [],
	          argsArray: [],
	          lastChunk: false
	        };
	        this.transport.messageHandler.send('RenderPageRequest', {
	          pageIndex: this.pageIndex,
	          intent: renderingIntent
	        });
	      }
	      return intentState.opListReadCapability.promise;
	    },
	    streamTextContent: function streamTextContent() {
	      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      var TEXT_CONTENT_CHUNK_SIZE = 100;
	      return this.transport.messageHandler.sendWithStream('GetTextContent', {
	        pageIndex: this.pageNumber - 1,
	        normalizeWhitespace: params.normalizeWhitespace === true,
	        combineTextItems: params.disableCombineTextItems !== true
	      }, {
	        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,
	        size: function size(textContent) {
	          return textContent.items.length;
	        }
	      });
	    },

	    getTextContent: function PDFPageProxy_getTextContent(params) {
	      params = params || {};
	      var readableStream = this.streamTextContent(params);
	      return new Promise(function (resolve, reject) {
	        function pump() {
	          reader.read().then(function (_ref) {
	            var value = _ref.value,
	                done = _ref.done;

	            if (done) {
	              resolve(textContent);
	              return;
	            }
	            _util.Util.extendObj(textContent.styles, value.styles);
	            _util.Util.appendToArray(textContent.items, value.items);
	            pump();
	          }, reject);
	        }
	        var reader = readableStream.getReader();
	        var textContent = {
	          items: [],
	          styles: Object.create(null)
	        };
	        pump();
	      });
	    },
	    _destroy: function PDFPageProxy_destroy() {
	      this.destroyed = true;
	      this.transport.pageCache[this.pageIndex] = null;
	      var waitOn = [];
	      Object.keys(this.intentStates).forEach(function (intent) {
	        if (intent === 'oplist') {
	          return;
	        }
	        var intentState = this.intentStates[intent];
	        intentState.renderTasks.forEach(function (renderTask) {
	          var renderCompleted = renderTask.capability.promise.catch(function () {});
	          waitOn.push(renderCompleted);
	          renderTask.cancel();
	        });
	      }, this);
	      this.objs.clear();
	      this.annotationsPromise = null;
	      this.pendingCleanup = false;
	      return Promise.all(waitOn);
	    },
	    destroy: function destroy() {
	      (0, _util.deprecated)('page destroy method, use cleanup() instead');
	      this.cleanup();
	    },

	    cleanup: function PDFPageProxy_cleanup() {
	      this.pendingCleanup = true;
	      this._tryCleanup();
	    },
	    _tryCleanup: function PDFPageProxy_tryCleanup() {
	      if (!this.pendingCleanup || Object.keys(this.intentStates).some(function (intent) {
	        var intentState = this.intentStates[intent];
	        return intentState.renderTasks.length !== 0 || intentState.receivingOperatorList;
	      }, this)) {
	        return;
	      }
	      Object.keys(this.intentStates).forEach(function (intent) {
	        delete this.intentStates[intent];
	      }, this);
	      this.objs.clear();
	      this.annotationsPromise = null;
	      this.pendingCleanup = false;
	    },
	    _startRenderPage: function PDFPageProxy_startRenderPage(transparency, intent) {
	      var intentState = this.intentStates[intent];
	      if (intentState.displayReadyCapability) {
	        intentState.displayReadyCapability.resolve(transparency);
	      }
	    },
	    _renderPageChunk: function PDFPageProxy_renderPageChunk(operatorListChunk, intent) {
	      var intentState = this.intentStates[intent];
	      var i, ii;
	      for (i = 0, ii = operatorListChunk.length; i < ii; i++) {
	        intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
	        intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
	      }
	      intentState.operatorList.lastChunk = operatorListChunk.lastChunk;
	      for (i = 0; i < intentState.renderTasks.length; i++) {
	        intentState.renderTasks[i].operatorListChanged();
	      }
	      if (operatorListChunk.lastChunk) {
	        intentState.receivingOperatorList = false;
	        this._tryCleanup();
	      }
	    }
	  };
	  return PDFPageProxy;
	}();

	var LoopbackPort = function () {
	  function LoopbackPort(defer) {
	    _classCallCheck(this, LoopbackPort);

	    this._listeners = [];
	    this._defer = defer;
	    this._deferred = Promise.resolve(undefined);
	  }

	  _createClass(LoopbackPort, [{
	    key: 'postMessage',
	    value: function postMessage(obj, transfers) {
	      var _this5 = this;

	      function cloneValue(value) {
	        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null) {
	          return value;
	        }
	        if (cloned.has(value)) {
	          return cloned.get(value);
	        }
	        var result;
	        var buffer;
	        if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {
	          var transferable = transfers && transfers.indexOf(buffer) >= 0;
	          if (value === buffer) {
	            result = value;
	          } else if (transferable) {
	            result = new value.constructor(buffer, value.byteOffset, value.byteLength);
	          } else {
	            result = new value.constructor(value);
	          }
	          cloned.set(value, result);
	          return result;
	        }
	        result = Array.isArray(value) ? [] : {};
	        cloned.set(value, result);
	        for (var i in value) {
	          var desc,
	              p = value;
	          while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {
	            p = Object.getPrototypeOf(p);
	          }
	          if (typeof desc.value === 'undefined' || typeof desc.value === 'function') {
	            continue;
	          }
	          result[i] = cloneValue(desc.value);
	        }
	        return result;
	      }
	      if (!this._defer) {
	        this._listeners.forEach(function (listener) {
	          listener.call(this, { data: obj });
	        }, this);
	        return;
	      }
	      var cloned = new WeakMap();
	      var e = { data: cloneValue(obj) };
	      this._deferred.then(function () {
	        _this5._listeners.forEach(function (listener) {
	          listener.call(this, e);
	        }, _this5);
	      });
	    }
	  }, {
	    key: 'addEventListener',
	    value: function addEventListener(name, listener) {
	      this._listeners.push(listener);
	    }
	  }, {
	    key: 'removeEventListener',
	    value: function removeEventListener(name, listener) {
	      var i = this._listeners.indexOf(listener);
	      this._listeners.splice(i, 1);
	    }
	  }, {
	    key: 'terminate',
	    value: function terminate() {
	      this._listeners = [];
	    }
	  }]);

	  return LoopbackPort;
	}();

	var PDFWorker = function PDFWorkerClosure() {
	  var nextFakeWorkerId = 0;
	  function getWorkerSrc() {
	    if (typeof workerSrc !== 'undefined') {
	      return workerSrc;
	    }
	    if ((0, _dom_utils.getDefaultSetting)('workerSrc')) {
	      return (0, _dom_utils.getDefaultSetting)('workerSrc');
	    }
	    if (pdfjsFilePath) {
	      return pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, '.worker$1$2');
	    }
	    throw new Error('No PDFJS.workerSrc specified');
	  }
	  var fakeWorkerFilesLoadedCapability = void 0;
	  function setupFakeWorkerGlobal() {
	    var WorkerMessageHandler;
	    if (fakeWorkerFilesLoadedCapability) {
	      return fakeWorkerFilesLoadedCapability.promise;
	    }
	    fakeWorkerFilesLoadedCapability = (0, _util.createPromiseCapability)();
	    var loader = fakeWorkerFilesLoader || function (callback) {
	      _util.Util.loadScript(getWorkerSrc(), function () {
	        callback(window.pdfjsDistBuildPdfWorker.WorkerMessageHandler);
	      });
	    };
	    loader(fakeWorkerFilesLoadedCapability.resolve);
	    return fakeWorkerFilesLoadedCapability.promise;
	  }
	  function createCDNWrapper(url) {
	    var wrapper = 'importScripts(\'' + url + '\');';
	    return URL.createObjectURL(new Blob([wrapper]));
	  }
	  var pdfWorkerPorts = new WeakMap();
	  function PDFWorker(name, port) {
	    if (port && pdfWorkerPorts.has(port)) {
	      throw new Error('Cannot use more than one PDFWorker per port');
	    }
	    this.name = name;
	    this.destroyed = false;
	    this.postMessageTransfers = true;
	    this._readyCapability = (0, _util.createPromiseCapability)();
	    this._port = null;
	    this._webWorker = null;
	    this._messageHandler = null;
	    if (port) {
	      pdfWorkerPorts.set(port, this);
	      this._initializeFromPort(port);
	      return;
	    }
	    this._initialize();
	  }
	  PDFWorker.prototype = {
	    get promise() {
	      return this._readyCapability.promise;
	    },
	    get port() {
	      return this._port;
	    },
	    get messageHandler() {
	      return this._messageHandler;
	    },
	    _initializeFromPort: function PDFWorker_initializeFromPort(port) {
	      this._port = port;
	      this._messageHandler = new _util.MessageHandler('main', 'worker', port);
	      this._messageHandler.on('ready', function () {});
	      this._readyCapability.resolve();
	    },
	    _initialize: function PDFWorker_initialize() {
	      var _this6 = this;

	      if (!isWorkerDisabled && !(0, _dom_utils.getDefaultSetting)('disableWorker') && typeof Worker !== 'undefined') {
	        var workerSrc = getWorkerSrc();
	        try {
	          if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {
	            workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);
	          }
	          var worker = new Worker(workerSrc);
	          var messageHandler = new _util.MessageHandler('main', 'worker', worker);
	          var terminateEarly = function terminateEarly() {
	            worker.removeEventListener('error', onWorkerError);
	            messageHandler.destroy();
	            worker.terminate();
	            if (_this6.destroyed) {
	              _this6._readyCapability.reject(new Error('Worker was destroyed'));
	            } else {
	              _this6._setupFakeWorker();
	            }
	          };
	          var onWorkerError = function onWorkerError() {
	            if (!_this6._webWorker) {
	              terminateEarly();
	            }
	          };
	          worker.addEventListener('error', onWorkerError);
	          messageHandler.on('test', function (data) {
	            worker.removeEventListener('error', onWorkerError);
	            if (_this6.destroyed) {
	              terminateEarly();
	              return;
	            }
	            var supportTypedArray = data && data.supportTypedArray;
	            if (supportTypedArray) {
	              _this6._messageHandler = messageHandler;
	              _this6._port = worker;
	              _this6._webWorker = worker;
	              if (!data.supportTransfers) {
	                _this6.postMessageTransfers = false;
	                isPostMessageTransfersDisabled = true;
	              }
	              _this6._readyCapability.resolve();
	              messageHandler.send('configure', { verbosity: (0, _util.getVerbosityLevel)() });
	            } else {
	              _this6._setupFakeWorker();
	              messageHandler.destroy();
	              worker.terminate();
	            }
	          });
	          messageHandler.on('console_log', function (data) {
	            console.log.apply(console, data);
	          });
	          messageHandler.on('console_error', function (data) {
	            console.error.apply(console, data);
	          });
	          messageHandler.on('ready', function (data) {
	            worker.removeEventListener('error', onWorkerError);
	            if (_this6.destroyed) {
	              terminateEarly();
	              return;
	            }
	            try {
	              sendTest();
	            } catch (e) {
	              _this6._setupFakeWorker();
	            }
	          });
	          var sendTest = function sendTest() {
	            var postMessageTransfers = (0, _dom_utils.getDefaultSetting)('postMessageTransfers') && !isPostMessageTransfersDisabled;
	            var testObj = new Uint8Array([postMessageTransfers ? 255 : 0]);
	            try {
	              messageHandler.send('test', testObj, [testObj.buffer]);
	            } catch (ex) {
	              (0, _util.info)('Cannot use postMessage transfers');
	              testObj[0] = 0;
	              messageHandler.send('test', testObj);
	            }
	          };
	          sendTest();
	          return;
	        } catch (e) {
	          (0, _util.info)('The worker has been disabled.');
	        }
	      }
	      this._setupFakeWorker();
	    },
	    _setupFakeWorker: function PDFWorker_setupFakeWorker() {
	      var _this7 = this;

	      if (!isWorkerDisabled && !(0, _dom_utils.getDefaultSetting)('disableWorker')) {
	        (0, _util.warn)('Setting up fake worker.');
	        isWorkerDisabled = true;
	      }
	      setupFakeWorkerGlobal().then(function (WorkerMessageHandler) {
	        if (_this7.destroyed) {
	          _this7._readyCapability.reject(new Error('Worker was destroyed'));
	          return;
	        }
	        var isTypedArraysPresent = Uint8Array !== Float32Array;
	        var port = new LoopbackPort(isTypedArraysPresent);
	        _this7._port = port;
	        var id = 'fake' + nextFakeWorkerId++;
	        var workerHandler = new _util.MessageHandler(id + '_worker', id, port);
	        WorkerMessageHandler.setup(workerHandler, port);
	        var messageHandler = new _util.MessageHandler(id, id + '_worker', port);
	        _this7._messageHandler = messageHandler;
	        _this7._readyCapability.resolve();
	      });
	    },
	    destroy: function PDFWorker_destroy() {
	      this.destroyed = true;
	      if (this._webWorker) {
	        this._webWorker.terminate();
	        this._webWorker = null;
	      }
	      pdfWorkerPorts.delete(this._port);
	      this._port = null;
	      if (this._messageHandler) {
	        this._messageHandler.destroy();
	        this._messageHandler = null;
	      }
	    }
	  };
	  PDFWorker.fromPort = function (port) {
	    if (pdfWorkerPorts.has(port)) {
	      return pdfWorkerPorts.get(port);
	    }
	    return new PDFWorker(null, port);
	  };
	  return PDFWorker;
	}();
	var WorkerTransport = function WorkerTransportClosure() {
	  function WorkerTransport(messageHandler, loadingTask, networkStream, CMapReaderFactory) {
	    this.messageHandler = messageHandler;
	    this.loadingTask = loadingTask;
	    this.commonObjs = new PDFObjects();
	    this.fontLoader = new _font_loader.FontLoader(loadingTask.docId);
	    this.CMapReaderFactory = new CMapReaderFactory({
	      baseUrl: (0, _dom_utils.getDefaultSetting)('cMapUrl'),
	      isCompressed: (0, _dom_utils.getDefaultSetting)('cMapPacked')
	    });
	    this.destroyed = false;
	    this.destroyCapability = null;
	    this._passwordCapability = null;
	    this._networkStream = networkStream;
	    this._fullReader = null;
	    this._lastProgress = null;
	    this.pageCache = [];
	    this.pagePromises = [];
	    this.downloadInfoCapability = (0, _util.createPromiseCapability)();
	    this.setupMessageHandler();
	  }
	  WorkerTransport.prototype = {
	    destroy: function WorkerTransport_destroy() {
	      var _this8 = this;

	      if (this.destroyCapability) {
	        return this.destroyCapability.promise;
	      }
	      this.destroyed = true;
	      this.destroyCapability = (0, _util.createPromiseCapability)();
	      if (this._passwordCapability) {
	        this._passwordCapability.reject(new Error('Worker was destroyed during onPassword callback'));
	      }
	      var waitOn = [];
	      this.pageCache.forEach(function (page) {
	        if (page) {
	          waitOn.push(page._destroy());
	        }
	      });
	      this.pageCache = [];
	      this.pagePromises = [];
	      var terminated = this.messageHandler.sendWithPromise('Terminate', null);
	      waitOn.push(terminated);
	      Promise.all(waitOn).then(function () {
	        _this8.fontLoader.clear();
	        if (_this8._networkStream) {
	          _this8._networkStream.cancelAllRequests();
	        }
	        if (_this8.messageHandler) {
	          _this8.messageHandler.destroy();
	          _this8.messageHandler = null;
	        }
	        _this8.destroyCapability.resolve();
	      }, this.destroyCapability.reject);
	      return this.destroyCapability.promise;
	    },
	    setupMessageHandler: function WorkerTransport_setupMessageHandler() {
	      var messageHandler = this.messageHandler;
	      var loadingTask = this.loadingTask;
	      messageHandler.on('GetReader', function (data, sink) {
	        var _this9 = this;

	        (0, _util.assert)(this._networkStream);
	        this._fullReader = this._networkStream.getFullReader();
	        this._fullReader.onProgress = function (evt) {
	          _this9._lastProgress = {
	            loaded: evt.loaded,
	            total: evt.total
	          };
	        };
	        sink.onPull = function () {
	          _this9._fullReader.read().then(function (_ref2) {
	            var value = _ref2.value,
	                done = _ref2.done;

	            if (done) {
	              sink.close();
	              return;
	            }
	            (0, _util.assert)((0, _util.isArrayBuffer)(value));
	            sink.enqueue(new Uint8Array(value), 1, [value]);
	          }).catch(function (reason) {
	            sink.error(reason);
	          });
	        };
	        sink.onCancel = function (reason) {
	          _this9._fullReader.cancel(reason);
	        };
	      }, this);
	      messageHandler.on('ReaderHeadersReady', function (data) {
	        var _this10 = this;

	        var headersCapability = (0, _util.createPromiseCapability)();
	        var fullReader = this._fullReader;
	        fullReader.headersReady.then(function () {
	          if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
	            if (_this10._lastProgress) {
	              var _loadingTask = _this10.loadingTask;
	              if (_loadingTask.onProgress) {
	                _loadingTask.onProgress(_this10._lastProgress);
	              }
	            }
	            fullReader.onProgress = function (evt) {
	              var loadingTask = _this10.loadingTask;
	              if (loadingTask.onProgress) {
	                loadingTask.onProgress({
	                  loaded: evt.loaded,
	                  total: evt.total
	                });
	              }
	            };
	          }
	          headersCapability.resolve({
	            isStreamingSupported: fullReader.isStreamingSupported,
	            isRangeSupported: fullReader.isRangeSupported,
	            contentLength: fullReader.contentLength
	          });
	        }, headersCapability.reject);
	        return headersCapability.promise;
	      }, this);
	      messageHandler.on('GetRangeReader', function (data, sink) {
	        (0, _util.assert)(this._networkStream);
	        var _rangeReader = this._networkStream.getRangeReader(data.begin, data.end);
	        sink.onPull = function () {
	          _rangeReader.read().then(function (_ref3) {
	            var value = _ref3.value,
	                done = _ref3.done;

	            if (done) {
	              sink.close();
	              return;
	            }
	            (0, _util.assert)((0, _util.isArrayBuffer)(value));
	            sink.enqueue(new Uint8Array(value), 1, [value]);
	          }).catch(function (reason) {
	            sink.error(reason);
	          });
	        };
	        sink.onCancel = function (reason) {
	          _rangeReader.cancel(reason);
	        };
	      }, this);
	      messageHandler.on('GetDoc', function transportDoc(data) {
	        var pdfInfo = data.pdfInfo;
	        this.numPages = data.pdfInfo.numPages;
	        var loadingTask = this.loadingTask;
	        var pdfDocument = new PDFDocumentProxy(pdfInfo, this, loadingTask);
	        this.pdfDocument = pdfDocument;
	        loadingTask._capability.resolve(pdfDocument);
	      }, this);
	      messageHandler.on('PasswordRequest', function transportPasswordRequest(exception) {
	        var _this11 = this;

	        this._passwordCapability = (0, _util.createPromiseCapability)();
	        if (loadingTask.onPassword) {
	          var updatePassword = function updatePassword(password) {
	            _this11._passwordCapability.resolve({ password: password });
	          };
	          loadingTask.onPassword(updatePassword, exception.code);
	        } else {
	          this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
	        }
	        return this._passwordCapability.promise;
	      }, this);
	      messageHandler.on('PasswordException', function transportPasswordException(exception) {
	        loadingTask._capability.reject(new _util.PasswordException(exception.message, exception.code));
	      }, this);
	      messageHandler.on('InvalidPDF', function transportInvalidPDF(exception) {
	        this.loadingTask._capability.reject(new _util.InvalidPDFException(exception.message));
	      }, this);
	      messageHandler.on('MissingPDF', function transportMissingPDF(exception) {
	        this.loadingTask._capability.reject(new _util.MissingPDFException(exception.message));
	      }, this);
	      messageHandler.on('UnexpectedResponse', function transportUnexpectedResponse(exception) {
	        this.loadingTask._capability.reject(new _util.UnexpectedResponseException(exception.message, exception.status));
	      }, this);
	      messageHandler.on('UnknownError', function transportUnknownError(exception) {
	        this.loadingTask._capability.reject(new _util.UnknownErrorException(exception.message, exception.details));
	      }, this);
	      messageHandler.on('DataLoaded', function transportPage(data) {
	        this.downloadInfoCapability.resolve(data);
	      }, this);
	      messageHandler.on('PDFManagerReady', function transportPage(data) {}, this);
	      messageHandler.on('StartRenderPage', function transportRender(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var page = this.pageCache[data.pageIndex];
	        page.stats.timeEnd('Page Request');
	        page._startRenderPage(data.transparency, data.intent);
	      }, this);
	      messageHandler.on('RenderPageChunk', function transportRender(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var page = this.pageCache[data.pageIndex];
	        page._renderPageChunk(data.operatorList, data.intent);
	      }, this);
	      messageHandler.on('commonobj', function transportObj(data) {
	        var _this12 = this;

	        if (this.destroyed) {
	          return;
	        }
	        var id = data[0];
	        var type = data[1];
	        if (this.commonObjs.hasData(id)) {
	          return;
	        }
	        switch (type) {
	          case 'Font':
	            var exportedData = data[2];
	            if ('error' in exportedData) {
	              var exportedError = exportedData.error;
	              (0, _util.warn)('Error during font loading: ' + exportedError);
	              this.commonObjs.resolve(id, exportedError);
	              break;
	            }
	            var fontRegistry = null;
	            if ((0, _dom_utils.getDefaultSetting)('pdfBug') && _global_scope2.default.FontInspector && _global_scope2.default['FontInspector'].enabled) {
	              fontRegistry = {
	                registerFont: function registerFont(font, url) {
	                  _global_scope2.default['FontInspector'].fontAdded(font, url);
	                }
	              };
	            }
	            var font = new _font_loader.FontFaceObject(exportedData, {
	              isEvalSuported: (0, _dom_utils.getDefaultSetting)('isEvalSupported'),
	              disableFontFace: (0, _dom_utils.getDefaultSetting)('disableFontFace'),
	              fontRegistry: fontRegistry
	            });
	            var fontReady = function fontReady(fontObjs) {
	              _this12.commonObjs.resolve(id, font);
	            };
	            this.fontLoader.bind([font], fontReady);
	            break;
	          case 'FontPath':
	            this.commonObjs.resolve(id, data[2]);
	            break;
	          default:
	            throw new Error('Got unknown common object type ' + type);
	        }
	      }, this);
	      messageHandler.on('obj', function transportObj(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var id = data[0];
	        var pageIndex = data[1];
	        var type = data[2];
	        var pageProxy = this.pageCache[pageIndex];
	        var imageData;
	        if (pageProxy.objs.hasData(id)) {
	          return;
	        }
	        switch (type) {
	          case 'JpegStream':
	            imageData = data[3];
	            (0, _util.loadJpegStream)(id, imageData, pageProxy.objs);
	            break;
	          case 'Image':
	            imageData = data[3];
	            pageProxy.objs.resolve(id, imageData);
	            var MAX_IMAGE_SIZE_TO_STORE = 8000000;
	            if (imageData && 'data' in imageData && imageData.data.length > MAX_IMAGE_SIZE_TO_STORE) {
	              pageProxy.cleanupAfterRender = true;
	            }
	            break;
	          default:
	            throw new Error('Got unknown object type ' + type);
	        }
	      }, this);
	      messageHandler.on('DocProgress', function transportDocProgress(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var loadingTask = this.loadingTask;
	        if (loadingTask.onProgress) {
	          loadingTask.onProgress({
	            loaded: data.loaded,
	            total: data.total
	          });
	        }
	      }, this);
	      messageHandler.on('PageError', function transportError(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var page = this.pageCache[data.pageNum - 1];
	        var intentState = page.intentStates[data.intent];
	        if (intentState.displayReadyCapability) {
	          intentState.displayReadyCapability.reject(data.error);
	        } else {
	          throw new Error(data.error);
	        }
	        if (intentState.operatorList) {
	          intentState.operatorList.lastChunk = true;
	          for (var i = 0; i < intentState.renderTasks.length; i++) {
	            intentState.renderTasks[i].operatorListChanged();
	          }
	        }
	      }, this);
	      messageHandler.on('UnsupportedFeature', function transportUnsupportedFeature(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var featureId = data.featureId;
	        var loadingTask = this.loadingTask;
	        if (loadingTask.onUnsupportedFeature) {
	          loadingTask.onUnsupportedFeature(featureId);
	        }
	        _UnsupportedManager.notify(featureId);
	      }, this);
	      messageHandler.on('JpegDecode', function (data) {
	        if (this.destroyed) {
	          return Promise.reject(new Error('Worker was destroyed'));
	        }
	        if (typeof document === 'undefined') {
	          return Promise.reject(new Error('"document" is not defined.'));
	        }
	        var imageUrl = data[0];
	        var components = data[1];
	        if (components !== 3 && components !== 1) {
	          return Promise.reject(new Error('Only 3 components or 1 component can be returned'));
	        }
	        return new Promise(function (resolve, reject) {
	          var img = new Image();
	          img.onload = function () {
	            var width = img.width;
	            var height = img.height;
	            var size = width * height;
	            var rgbaLength = size * 4;
	            var buf = new Uint8Array(size * components);
	            var tmpCanvas = document.createElement('canvas');
	            tmpCanvas.width = width;
	            tmpCanvas.height = height;
	            var tmpCtx = tmpCanvas.getContext('2d');
	            tmpCtx.drawImage(img, 0, 0);
	            var data = tmpCtx.getImageData(0, 0, width, height).data;
	            var i, j;
	            if (components === 3) {
	              for (i = 0, j = 0; i < rgbaLength; i += 4, j += 3) {
	                buf[j] = data[i];
	                buf[j + 1] = data[i + 1];
	                buf[j + 2] = data[i + 2];
	              }
	            } else if (components === 1) {
	              for (i = 0, j = 0; i < rgbaLength; i += 4, j++) {
	                buf[j] = data[i];
	              }
	            }
	            resolve({
	              data: buf,
	              width: width,
	              height: height
	            });
	          };
	          img.onerror = function () {
	            reject(new Error('JpegDecode failed to load image'));
	          };
	          img.src = imageUrl;
	        });
	      }, this);
	      messageHandler.on('FetchBuiltInCMap', function (data) {
	        if (this.destroyed) {
	          return Promise.reject(new Error('Worker was destroyed'));
	        }
	        return this.CMapReaderFactory.fetch({ name: data.name });
	      }, this);
	    },
	    getData: function WorkerTransport_getData() {
	      return this.messageHandler.sendWithPromise('GetData', null);
	    },
	    getPage: function WorkerTransport_getPage(pageNumber, capability) {
	      var _this13 = this;

	      if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this.numPages) {
	        return Promise.reject(new Error('Invalid page request'));
	      }
	      var pageIndex = pageNumber - 1;
	      if (pageIndex in this.pagePromises) {
	        return this.pagePromises[pageIndex];
	      }
	      var promise = this.messageHandler.sendWithPromise('GetPage', { pageIndex: pageIndex }).then(function (pageInfo) {
	        if (_this13.destroyed) {
	          throw new Error('Transport destroyed');
	        }
	        var page = new PDFPageProxy(pageIndex, pageInfo, _this13);
	        _this13.pageCache[pageIndex] = page;
	        return page;
	      });
	      this.pagePromises[pageIndex] = promise;
	      return promise;
	    },
	    getPageIndex: function WorkerTransport_getPageIndexByRef(ref) {
	      return this.messageHandler.sendWithPromise('GetPageIndex', { ref: ref }).catch(function (reason) {
	        return Promise.reject(new Error(reason));
	      });
	    },
	    getAnnotations: function WorkerTransport_getAnnotations(pageIndex, intent) {
	      return this.messageHandler.sendWithPromise('GetAnnotations', {
	        pageIndex: pageIndex,
	        intent: intent
	      });
	    },
	    getDestinations: function WorkerTransport_getDestinations() {
	      return this.messageHandler.sendWithPromise('GetDestinations', null);
	    },
	    getDestination: function WorkerTransport_getDestination(id) {
	      return this.messageHandler.sendWithPromise('GetDestination', { id: id });
	    },
	    getPageLabels: function WorkerTransport_getPageLabels() {
	      return this.messageHandler.sendWithPromise('GetPageLabels', null);
	    },
	    getPageMode: function getPageMode() {
	      return this.messageHandler.sendWithPromise('GetPageMode', null);
	    },

	    getAttachments: function WorkerTransport_getAttachments() {
	      return this.messageHandler.sendWithPromise('GetAttachments', null);
	    },
	    getJavaScript: function WorkerTransport_getJavaScript() {
	      return this.messageHandler.sendWithPromise('GetJavaScript', null);
	    },
	    getOutline: function WorkerTransport_getOutline() {
	      return this.messageHandler.sendWithPromise('GetOutline', null);
	    },
	    getMetadata: function WorkerTransport_getMetadata() {
	      return this.messageHandler.sendWithPromise('GetMetadata', null).then(function transportMetadata(results) {
	        return {
	          info: results[0],
	          metadata: results[1] ? new _metadata.Metadata(results[1]) : null
	        };
	      });
	    },
	    getStats: function WorkerTransport_getStats() {
	      return this.messageHandler.sendWithPromise('GetStats', null);
	    },
	    startCleanup: function WorkerTransport_startCleanup() {
	      var _this14 = this;

	      this.messageHandler.sendWithPromise('Cleanup', null).then(function () {
	        for (var i = 0, ii = _this14.pageCache.length; i < ii; i++) {
	          var page = _this14.pageCache[i];
	          if (page) {
	            page.cleanup();
	          }
	        }
	        _this14.commonObjs.clear();
	        _this14.fontLoader.clear();
	      });
	    }
	  };
	  return WorkerTransport;
	}();
	var PDFObjects = function PDFObjectsClosure() {
	  function PDFObjects() {
	    this.objs = Object.create(null);
	  }
	  PDFObjects.prototype = {
	    ensureObj: function PDFObjects_ensureObj(objId) {
	      if (this.objs[objId]) {
	        return this.objs[objId];
	      }
	      var obj = {
	        capability: (0, _util.createPromiseCapability)(),
	        data: null,
	        resolved: false
	      };
	      this.objs[objId] = obj;
	      return obj;
	    },
	    get: function PDFObjects_get(objId, callback) {
	      if (callback) {
	        this.ensureObj(objId).capability.promise.then(callback);
	        return null;
	      }
	      var obj = this.objs[objId];
	      if (!obj || !obj.resolved) {
	        throw new Error('Requesting object that isn\'t resolved yet ' + objId);
	      }
	      return obj.data;
	    },
	    resolve: function PDFObjects_resolve(objId, data) {
	      var obj = this.ensureObj(objId);
	      obj.resolved = true;
	      obj.data = data;
	      obj.capability.resolve(data);
	    },
	    isResolved: function PDFObjects_isResolved(objId) {
	      var objs = this.objs;
	      if (!objs[objId]) {
	        return false;
	      }
	      return objs[objId].resolved;
	    },
	    hasData: function PDFObjects_hasData(objId) {
	      return this.isResolved(objId);
	    },
	    getData: function PDFObjects_getData(objId) {
	      var objs = this.objs;
	      if (!objs[objId] || !objs[objId].resolved) {
	        return null;
	      }
	      return objs[objId].data;
	    },
	    clear: function PDFObjects_clear() {
	      this.objs = Object.create(null);
	    }
	  };
	  return PDFObjects;
	}();
	var RenderTask = function RenderTaskClosure() {
	  function RenderTask(internalRenderTask) {
	    this._internalRenderTask = internalRenderTask;
	    this.onContinue = null;
	  }
	  RenderTask.prototype = {
	    get promise() {
	      return this._internalRenderTask.capability.promise;
	    },
	    cancel: function RenderTask_cancel() {
	      this._internalRenderTask.cancel();
	    },
	    then: function RenderTask_then(onFulfilled, onRejected) {
	      return this.promise.then.apply(this.promise, arguments);
	    }
	  };
	  return RenderTask;
	}();
	var InternalRenderTask = function InternalRenderTaskClosure() {
	  var canvasInRendering = new WeakMap();
	  function InternalRenderTask(callback, params, objs, commonObjs, operatorList, pageNumber, canvasFactory) {
	    this.callback = callback;
	    this.params = params;
	    this.objs = objs;
	    this.commonObjs = commonObjs;
	    this.operatorListIdx = null;
	    this.operatorList = operatorList;
	    this.pageNumber = pageNumber;
	    this.canvasFactory = canvasFactory;
	    this.running = false;
	    this.graphicsReadyCallback = null;
	    this.graphicsReady = false;
	    this.useRequestAnimationFrame = false;
	    this.cancelled = false;
	    this.capability = (0, _util.createPromiseCapability)();
	    this.task = new RenderTask(this);
	    this._continueBound = this._continue.bind(this);
	    this._scheduleNextBound = this._scheduleNext.bind(this);
	    this._nextBound = this._next.bind(this);
	    this._canvas = params.canvasContext.canvas;
	  }
	  InternalRenderTask.prototype = {
	    initializeGraphics: function InternalRenderTask_initializeGraphics(transparency) {
	      if (this._canvas) {
	        if (canvasInRendering.has(this._canvas)) {
	          throw new Error('Cannot use the same canvas during multiple render() operations. ' + 'Use different canvas or ensure previous operations were ' + 'cancelled or completed.');
	        }
	        canvasInRendering.set(this._canvas, this);
	      }
	      if (this.cancelled) {
	        return;
	      }
	      if ((0, _dom_utils.getDefaultSetting)('pdfBug') && _global_scope2.default.StepperManager && _global_scope2.default.StepperManager.enabled) {
	        this.stepper = _global_scope2.default.StepperManager.create(this.pageNumber - 1);
	        this.stepper.init(this.operatorList);
	        this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
	      }
	      var params = this.params;
	      this.gfx = new _canvas.CanvasGraphics(params.canvasContext, this.commonObjs, this.objs, this.canvasFactory, params.imageLayer);
	      this.gfx.beginDrawing({
	        transform: params.transform,
	        viewport: params.viewport,
	        transparency: transparency,
	        background: params.background
	      });
	      this.operatorListIdx = 0;
	      this.graphicsReady = true;
	      if (this.graphicsReadyCallback) {
	        this.graphicsReadyCallback();
	      }
	    },
	    cancel: function InternalRenderTask_cancel() {
	      this.running = false;
	      this.cancelled = true;
	      if (this._canvas) {
	        canvasInRendering.delete(this._canvas);
	      }
	      if ((0, _dom_utils.getDefaultSetting)('pdfjsNext')) {
	        this.callback(new _dom_utils.RenderingCancelledException('Rendering cancelled, page ' + this.pageNumber, 'canvas'));
	      } else {
	        this.callback('cancelled');
	      }
	    },
	    operatorListChanged: function InternalRenderTask_operatorListChanged() {
	      if (!this.graphicsReady) {
	        if (!this.graphicsReadyCallback) {
	          this.graphicsReadyCallback = this._continueBound;
	        }
	        return;
	      }
	      if (this.stepper) {
	        this.stepper.updateOperatorList(this.operatorList);
	      }
	      if (this.running) {
	        return;
	      }
	      this._continue();
	    },
	    _continue: function InternalRenderTask__continue() {
	      this.running = true;
	      if (this.cancelled) {
	        return;
	      }
	      if (this.task.onContinue) {
	        this.task.onContinue(this._scheduleNextBound);
	      } else {
	        this._scheduleNext();
	      }
	    },
	    _scheduleNext: function InternalRenderTask__scheduleNext() {
	      if (this.useRequestAnimationFrame && typeof window !== 'undefined') {
	        window.requestAnimationFrame(this._nextBound);
	      } else {
	        Promise.resolve(undefined).then(this._nextBound);
	      }
	    },
	    _next: function InternalRenderTask__next() {
	      if (this.cancelled) {
	        return;
	      }
	      this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);
	      if (this.operatorListIdx === this.operatorList.argsArray.length) {
	        this.running = false;
	        if (this.operatorList.lastChunk) {
	          this.gfx.endDrawing();
	          if (this._canvas) {
	            canvasInRendering.delete(this._canvas);
	          }
	          this.callback();
	        }
	      }
	    }
	  };
	  return InternalRenderTask;
	}();
	var _UnsupportedManager = function UnsupportedManagerClosure() {
	  var listeners = [];
	  return {
	    listen: function listen(cb) {
	      (0, _util.deprecated)('Global UnsupportedManager.listen is used: ' + ' use PDFDocumentLoadingTask.onUnsupportedFeature instead');
	      listeners.push(cb);
	    },
	    notify: function notify(featureId) {
	      for (var i = 0, ii = listeners.length; i < ii; i++) {
	        listeners[i](featureId);
	      }
	    }
	  };
	}();
	var version, build;
	{
	  exports.version = version = '1.9.634';
	  exports.build = build = '509d3728';
	}
	exports.getDocument = getDocument;
	exports.LoopbackPort = LoopbackPort;
	exports.PDFDataRangeTransport = PDFDataRangeTransport;
	exports.PDFWorker = PDFWorker;
	exports.PDFDocumentProxy = PDFDocumentProxy;
	exports.PDFPageProxy = PDFPageProxy;
	exports.setPDFNetworkStreamClass = setPDFNetworkStreamClass;
	exports._UnsupportedManager = _UnsupportedManager;
	exports.version = version;
	exports.build = build;

	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.WebGLUtils = undefined;

	var _dom_utils = __w_pdfjs_require__(5);

	var _util = __w_pdfjs_require__(0);

	var WebGLUtils = function WebGLUtilsClosure() {
	  function loadShader(gl, code, shaderType) {
	    var shader = gl.createShader(shaderType);
	    gl.shaderSource(shader, code);
	    gl.compileShader(shader);
	    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
	    if (!compiled) {
	      var errorMsg = gl.getShaderInfoLog(shader);
	      throw new Error('Error during shader compilation: ' + errorMsg);
	    }
	    return shader;
	  }
	  function createVertexShader(gl, code) {
	    return loadShader(gl, code, gl.VERTEX_SHADER);
	  }
	  function createFragmentShader(gl, code) {
	    return loadShader(gl, code, gl.FRAGMENT_SHADER);
	  }
	  function createProgram(gl, shaders) {
	    var program = gl.createProgram();
	    for (var i = 0, ii = shaders.length; i < ii; ++i) {
	      gl.attachShader(program, shaders[i]);
	    }
	    gl.linkProgram(program);
	    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
	    if (!linked) {
	      var errorMsg = gl.getProgramInfoLog(program);
	      throw new Error('Error during program linking: ' + errorMsg);
	    }
	    return program;
	  }
	  function createTexture(gl, image, textureId) {
	    gl.activeTexture(textureId);
	    var texture = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, texture);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
	    return texture;
	  }
	  var currentGL, currentCanvas;
	  function generateGL() {
	    if (currentGL) {
	      return;
	    }
	    currentCanvas = document.createElement('canvas');
	    currentGL = currentCanvas.getContext('webgl', { premultipliedalpha: false });
	  }
	  var smaskVertexShaderCode = '\
	  attribute vec2 a_position;                                    \
	  attribute vec2 a_texCoord;                                    \
	                                                                \
	  uniform vec2 u_resolution;                                    \
	                                                                \
	  varying vec2 v_texCoord;                                      \
	                                                                \
	  void main() {                                                 \
	    vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \
	    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \
	                                                                \
	    v_texCoord = a_texCoord;                                    \
	  }                                                             ';
	  var smaskFragmentShaderCode = '\
	  precision mediump float;                                      \
	                                                                \
	  uniform vec4 u_backdrop;                                      \
	  uniform int u_subtype;                                        \
	  uniform sampler2D u_image;                                    \
	  uniform sampler2D u_mask;                                     \
	                                                                \
	  varying vec2 v_texCoord;                                      \
	                                                                \
	  void main() {                                                 \
	    vec4 imageColor = texture2D(u_image, v_texCoord);           \
	    vec4 maskColor = texture2D(u_mask, v_texCoord);             \
	    if (u_backdrop.a > 0.0) {                                   \
	      maskColor.rgb = maskColor.rgb * maskColor.a +             \
	                      u_backdrop.rgb * (1.0 - maskColor.a);     \
	    }                                                           \
	    float lum;                                                  \
	    if (u_subtype == 0) {                                       \
	      lum = maskColor.a;                                        \
	    } else {                                                    \
	      lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \
	            maskColor.b * 0.11;                                 \
	    }                                                           \
	    imageColor.a *= lum;                                        \
	    imageColor.rgb *= imageColor.a;                             \
	    gl_FragColor = imageColor;                                  \
	  }                                                             ';
	  var smaskCache = null;
	  function initSmaskGL() {
	    var canvas, gl;
	    generateGL();
	    canvas = currentCanvas;
	    currentCanvas = null;
	    gl = currentGL;
	    currentGL = null;
	    var vertexShader = createVertexShader(gl, smaskVertexShaderCode);
	    var fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);
	    var program = createProgram(gl, [vertexShader, fragmentShader]);
	    gl.useProgram(program);
	    var cache = {};
	    cache.gl = gl;
	    cache.canvas = canvas;
	    cache.resolutionLocation = gl.getUniformLocation(program, 'u_resolution');
	    cache.positionLocation = gl.getAttribLocation(program, 'a_position');
	    cache.backdropLocation = gl.getUniformLocation(program, 'u_backdrop');
	    cache.subtypeLocation = gl.getUniformLocation(program, 'u_subtype');
	    var texCoordLocation = gl.getAttribLocation(program, 'a_texCoord');
	    var texLayerLocation = gl.getUniformLocation(program, 'u_image');
	    var texMaskLocation = gl.getUniformLocation(program, 'u_mask');
	    var texCoordBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(texCoordLocation);
	    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
	    gl.uniform1i(texLayerLocation, 0);
	    gl.uniform1i(texMaskLocation, 1);
	    smaskCache = cache;
	  }
	  function composeSMask(layer, mask, properties) {
	    var width = layer.width,
	        height = layer.height;
	    if (!smaskCache) {
	      initSmaskGL();
	    }
	    var cache = smaskCache,
	        canvas = cache.canvas,
	        gl = cache.gl;
	    canvas.width = width;
	    canvas.height = height;
	    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
	    gl.uniform2f(cache.resolutionLocation, width, height);
	    if (properties.backdrop) {
	      gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);
	    } else {
	      gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);
	    }
	    gl.uniform1i(cache.subtypeLocation, properties.subtype === 'Luminosity' ? 1 : 0);
	    var texture = createTexture(gl, layer, gl.TEXTURE0);
	    var maskTexture = createTexture(gl, mask, gl.TEXTURE1);
	    var buffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, width, 0, 0, height, 0, height, width, 0, width, height]), gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(cache.positionLocation);
	    gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);
	    gl.clearColor(0, 0, 0, 0);
	    gl.enable(gl.BLEND);
	    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
	    gl.clear(gl.COLOR_BUFFER_BIT);
	    gl.drawArrays(gl.TRIANGLES, 0, 6);
	    gl.flush();
	    gl.deleteTexture(texture);
	    gl.deleteTexture(maskTexture);
	    gl.deleteBuffer(buffer);
	    return canvas;
	  }
	  var figuresVertexShaderCode = '\
	  attribute vec2 a_position;                                    \
	  attribute vec3 a_color;                                       \
	                                                                \
	  uniform vec2 u_resolution;                                    \
	  uniform vec2 u_scale;                                         \
	  uniform vec2 u_offset;                                        \
	                                                                \
	  varying vec4 v_color;                                         \
	                                                                \
	  void main() {                                                 \
	    vec2 position = (a_position + u_offset) * u_scale;          \
	    vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \
	    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \
	                                                                \
	    v_color = vec4(a_color / 255.0, 1.0);                       \
	  }                                                             ';
	  var figuresFragmentShaderCode = '\
	  precision mediump float;                                      \
	                                                                \
	  varying vec4 v_color;                                         \
	                                                                \
	  void main() {                                                 \
	    gl_FragColor = v_color;                                     \
	  }                                                             ';
	  var figuresCache = null;
	  function initFiguresGL() {
	    var canvas, gl;
	    generateGL();
	    canvas = currentCanvas;
	    currentCanvas = null;
	    gl = currentGL;
	    currentGL = null;
	    var vertexShader = createVertexShader(gl, figuresVertexShaderCode);
	    var fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);
	    var program = createProgram(gl, [vertexShader, fragmentShader]);
	    gl.useProgram(program);
	    var cache = {};
	    cache.gl = gl;
	    cache.canvas = canvas;
	    cache.resolutionLocation = gl.getUniformLocation(program, 'u_resolution');
	    cache.scaleLocation = gl.getUniformLocation(program, 'u_scale');
	    cache.offsetLocation = gl.getUniformLocation(program, 'u_offset');
	    cache.positionLocation = gl.getAttribLocation(program, 'a_position');
	    cache.colorLocation = gl.getAttribLocation(program, 'a_color');
	    figuresCache = cache;
	  }
	  function drawFigures(width, height, backgroundColor, figures, context) {
	    if (!figuresCache) {
	      initFiguresGL();
	    }
	    var cache = figuresCache,
	        canvas = cache.canvas,
	        gl = cache.gl;
	    canvas.width = width;
	    canvas.height = height;
	    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
	    gl.uniform2f(cache.resolutionLocation, width, height);
	    var count = 0;
	    var i, ii, rows;
	    for (i = 0, ii = figures.length; i < ii; i++) {
	      switch (figures[i].type) {
	        case 'lattice':
	          rows = figures[i].coords.length / figures[i].verticesPerRow | 0;
	          count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;
	          break;
	        case 'triangles':
	          count += figures[i].coords.length;
	          break;
	      }
	    }
	    var coords = new Float32Array(count * 2);
	    var colors = new Uint8Array(count * 3);
	    var coordsMap = context.coords,
	        colorsMap = context.colors;
	    var pIndex = 0,
	        cIndex = 0;
	    for (i = 0, ii = figures.length; i < ii; i++) {
	      var figure = figures[i],
	          ps = figure.coords,
	          cs = figure.colors;
	      switch (figure.type) {
	        case 'lattice':
	          var cols = figure.verticesPerRow;
	          rows = ps.length / cols | 0;
	          for (var row = 1; row < rows; row++) {
	            var offset = row * cols + 1;
	            for (var col = 1; col < cols; col++, offset++) {
	              coords[pIndex] = coordsMap[ps[offset - cols - 1]];
	              coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];
	              coords[pIndex + 2] = coordsMap[ps[offset - cols]];
	              coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];
	              coords[pIndex + 4] = coordsMap[ps[offset - 1]];
	              coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];
	              colors[cIndex] = colorsMap[cs[offset - cols - 1]];
	              colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];
	              colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];
	              colors[cIndex + 3] = colorsMap[cs[offset - cols]];
	              colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];
	              colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];
	              colors[cIndex + 6] = colorsMap[cs[offset - 1]];
	              colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];
	              colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];
	              coords[pIndex + 6] = coords[pIndex + 2];
	              coords[pIndex + 7] = coords[pIndex + 3];
	              coords[pIndex + 8] = coords[pIndex + 4];
	              coords[pIndex + 9] = coords[pIndex + 5];
	              coords[pIndex + 10] = coordsMap[ps[offset]];
	              coords[pIndex + 11] = coordsMap[ps[offset] + 1];
	              colors[cIndex + 9] = colors[cIndex + 3];
	              colors[cIndex + 10] = colors[cIndex + 4];
	              colors[cIndex + 11] = colors[cIndex + 5];
	              colors[cIndex + 12] = colors[cIndex + 6];
	              colors[cIndex + 13] = colors[cIndex + 7];
	              colors[cIndex + 14] = colors[cIndex + 8];
	              colors[cIndex + 15] = colorsMap[cs[offset]];
	              colors[cIndex + 16] = colorsMap[cs[offset] + 1];
	              colors[cIndex + 17] = colorsMap[cs[offset] + 2];
	              pIndex += 12;
	              cIndex += 18;
	            }
	          }
	          break;
	        case 'triangles':
	          for (var j = 0, jj = ps.length; j < jj; j++) {
	            coords[pIndex] = coordsMap[ps[j]];
	            coords[pIndex + 1] = coordsMap[ps[j] + 1];
	            colors[cIndex] = colorsMap[cs[j]];
	            colors[cIndex + 1] = colorsMap[cs[j] + 1];
	            colors[cIndex + 2] = colorsMap[cs[j] + 2];
	            pIndex += 2;
	            cIndex += 3;
	          }
	          break;
	      }
	    }
	    if (backgroundColor) {
	      gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1.0);
	    } else {
	      gl.clearColor(0, 0, 0, 0);
	    }
	    gl.clear(gl.COLOR_BUFFER_BIT);
	    var coordsBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(cache.positionLocation);
	    gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);
	    var colorsBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(cache.colorLocation);
	    gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);
	    gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);
	    gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);
	    gl.drawArrays(gl.TRIANGLES, 0, count);
	    gl.flush();
	    gl.deleteBuffer(coordsBuffer);
	    gl.deleteBuffer(colorsBuffer);
	    return canvas;
	  }
	  function cleanup() {
	    if (smaskCache && smaskCache.canvas) {
	      smaskCache.canvas.width = 0;
	      smaskCache.canvas.height = 0;
	    }
	    if (figuresCache && figuresCache.canvas) {
	      figuresCache.canvas.width = 0;
	      figuresCache.canvas.height = 0;
	    }
	    smaskCache = null;
	    figuresCache = null;
	  }
	  return {
	    get isEnabled() {
	      if ((0, _dom_utils.getDefaultSetting)('disableWebGL')) {
	        return false;
	      }
	      var enabled = false;
	      try {
	        generateGL();
	        enabled = !!currentGL;
	      } catch (e) {}
	      return (0, _util.shadow)(this, 'isEnabled', enabled);
	    },
	    composeSMask: composeSMask,
	    drawFigures: drawFigures,
	    clear: cleanup
	  };
	}();
	exports.WebGLUtils = WebGLUtils;

	/***/ }),
	/* 50 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Metadata = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _util = __w_pdfjs_require__(0);

	var _dom_utils = __w_pdfjs_require__(5);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Metadata = function () {
	  function Metadata(data) {
	    _classCallCheck(this, Metadata);

	    (0, _util.assert)(typeof data === 'string', 'Metadata: input is not a string');
	    data = this._repair(data);
	    var parser = new _dom_utils.SimpleXMLParser();
	    data = parser.parseFromString(data);
	    this._metadata = Object.create(null);
	    this._parse(data);
	  }

	  _createClass(Metadata, [{
	    key: '_repair',
	    value: function _repair(data) {
	      return data.replace(/>\\376\\377([^<]+)/g, function (all, codes) {
	        var bytes = codes.replace(/\\([0-3])([0-7])([0-7])/g, function (code, d1, d2, d3) {
	          return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);
	        });
	        var chars = '';
	        for (var i = 0, ii = bytes.length; i < ii; i += 2) {
	          var code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);
	          if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {
	            chars += String.fromCharCode(code);
	          } else {
	            chars += '&#x' + (0x10000 + code).toString(16).substring(1) + ';';
	          }
	        }
	        return '>' + chars;
	      });
	    }
	  }, {
	    key: '_parse',
	    value: function _parse(domDocument) {
	      var rdf = domDocument.documentElement;
	      if (rdf.nodeName.toLowerCase() !== 'rdf:rdf') {
	        rdf = rdf.firstChild;
	        while (rdf && rdf.nodeName.toLowerCase() !== 'rdf:rdf') {
	          rdf = rdf.nextSibling;
	        }
	      }
	      var nodeName = rdf ? rdf.nodeName.toLowerCase() : null;
	      if (!rdf || nodeName !== 'rdf:rdf' || !rdf.hasChildNodes()) {
	        return;
	      }
	      var children = rdf.childNodes;
	      for (var i = 0, ii = children.length; i < ii; i++) {
	        var desc = children[i];
	        if (desc.nodeName.toLowerCase() !== 'rdf:description') {
	          continue;
	        }
	        for (var j = 0, jj = desc.childNodes.length; j < jj; j++) {
	          if (desc.childNodes[j].nodeName.toLowerCase() !== '#text') {
	            var entry = desc.childNodes[j];
	            var name = entry.nodeName.toLowerCase();
	            this._metadata[name] = entry.textContent.trim();
	          }
	        }
	      }
	    }
	  }, {
	    key: 'get',
	    value: function get(name) {
	      return this._metadata[name] || null;
	    }
	  }, {
	    key: 'getAll',
	    value: function getAll() {
	      return this._metadata;
	    }
	  }, {
	    key: 'has',
	    value: function has(name) {
	      return typeof this._metadata[name] !== 'undefined';
	    }
	  }, {
	    key: 'metadata',
	    get: function get() {
	      (0, _util.deprecated)('`metadata` getter; use `getAll()` instead.');
	      return this.getAll();
	    }
	  }]);

	  return Metadata;
	}();

	exports.Metadata = Metadata;

	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AnnotationLayer = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _dom_utils = __w_pdfjs_require__(5);

	var _util = __w_pdfjs_require__(0);

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var AnnotationElementFactory = function () {
	  function AnnotationElementFactory() {
	    _classCallCheck(this, AnnotationElementFactory);
	  }

	  _createClass(AnnotationElementFactory, null, [{
	    key: 'create',
	    value: function create(parameters) {
	      var subtype = parameters.data.annotationType;
	      switch (subtype) {
	        case _util.AnnotationType.LINK:
	          return new LinkAnnotationElement(parameters);
	        case _util.AnnotationType.TEXT:
	          return new TextAnnotationElement(parameters);
	        case _util.AnnotationType.WIDGET:
	          var fieldType = parameters.data.fieldType;
	          switch (fieldType) {
	            case 'Tx':
	              return new TextWidgetAnnotationElement(parameters);
	            case 'Btn':
	              if (parameters.data.radioButton) {
	                return new RadioButtonWidgetAnnotationElement(parameters);
	              } else if (parameters.data.checkBox) {
	                return new CheckboxWidgetAnnotationElement(parameters);
	              }
	              (0, _util.warn)('Unimplemented button widget annotation: pushbutton');
	              break;
	            case 'Ch':
	              return new ChoiceWidgetAnnotationElement(parameters);
	          }
	          return new WidgetAnnotationElement(parameters);
	        case _util.AnnotationType.POPUP:
	          return new PopupAnnotationElement(parameters);
	        case _util.AnnotationType.LINE:
	          return new LineAnnotationElement(parameters);
	        case _util.AnnotationType.SQUARE:
	          return new SquareAnnotationElement(parameters);
	        case _util.AnnotationType.CIRCLE:
	          return new CircleAnnotationElement(parameters);
	        case _util.AnnotationType.POLYLINE:
	          return new PolylineAnnotationElement(parameters);
	        case _util.AnnotationType.POLYGON:
	          return new PolygonAnnotationElement(parameters);
	        case _util.AnnotationType.HIGHLIGHT:
	          return new HighlightAnnotationElement(parameters);
	        case _util.AnnotationType.UNDERLINE:
	          return new UnderlineAnnotationElement(parameters);
	        case _util.AnnotationType.SQUIGGLY:
	          return new SquigglyAnnotationElement(parameters);
	        case _util.AnnotationType.STRIKEOUT:
	          return new StrikeOutAnnotationElement(parameters);
	        case _util.AnnotationType.STAMP:
	          return new StampAnnotationElement(parameters);
	        case _util.AnnotationType.FILEATTACHMENT:
	          return new FileAttachmentAnnotationElement(parameters);
	        default:
	          return new AnnotationElement(parameters);
	      }
	    }
	  }]);

	  return AnnotationElementFactory;
	}();

	var AnnotationElement = function () {
	  function AnnotationElement(parameters) {
	    var isRenderable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	    var ignoreBorder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    _classCallCheck(this, AnnotationElement);

	    this.isRenderable = isRenderable;
	    this.data = parameters.data;
	    this.layer = parameters.layer;
	    this.page = parameters.page;
	    this.viewport = parameters.viewport;
	    this.linkService = parameters.linkService;
	    this.downloadManager = parameters.downloadManager;
	    this.imageResourcesPath = parameters.imageResourcesPath;
	    this.renderInteractiveForms = parameters.renderInteractiveForms;
	    this.svgFactory = parameters.svgFactory;
	    if (isRenderable) {
	      this.container = this._createContainer(ignoreBorder);
	    }
	  }

	  _createClass(AnnotationElement, [{
	    key: '_createContainer',
	    value: function _createContainer() {
	      var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	      var data = this.data,
	          page = this.page,
	          viewport = this.viewport;
	      var container = document.createElement('section');
	      var width = data.rect[2] - data.rect[0];
	      var height = data.rect[3] - data.rect[1];
	      container.setAttribute('data-annotation-id', data.id);
	      var rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);
	      _dom_utils.CustomStyle.setProp('transform', container, 'matrix(' + viewport.transform.join(',') + ')');
	      _dom_utils.CustomStyle.setProp('transformOrigin', container, -rect[0] + 'px ' + -rect[1] + 'px');
	      if (!ignoreBorder && data.borderStyle.width > 0) {
	        container.style.borderWidth = data.borderStyle.width + 'px';
	        if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {
	          width = width - 2 * data.borderStyle.width;
	          height = height - 2 * data.borderStyle.width;
	        }
	        var horizontalRadius = data.borderStyle.horizontalCornerRadius;
	        var verticalRadius = data.borderStyle.verticalCornerRadius;
	        if (horizontalRadius > 0 || verticalRadius > 0) {
	          var radius = horizontalRadius + 'px / ' + verticalRadius + 'px';
	          _dom_utils.CustomStyle.setProp('borderRadius', container, radius);
	        }
	        switch (data.borderStyle.style) {
	          case _util.AnnotationBorderStyleType.SOLID:
	            container.style.borderStyle = 'solid';
	            break;
	          case _util.AnnotationBorderStyleType.DASHED:
	            container.style.borderStyle = 'dashed';
	            break;
	          case _util.AnnotationBorderStyleType.BEVELED:
	            (0, _util.warn)('Unimplemented border style: beveled');
	            break;
	          case _util.AnnotationBorderStyleType.INSET:
	            (0, _util.warn)('Unimplemented border style: inset');
	            break;
	          case _util.AnnotationBorderStyleType.UNDERLINE:
	            container.style.borderBottomStyle = 'solid';
	            break;
	          default:
	            break;
	        }
	        if (data.color) {
	          container.style.borderColor = _util.Util.makeCssRgb(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);
	        } else {
	          container.style.borderWidth = 0;
	        }
	      }
	      container.style.left = rect[0] + 'px';
	      container.style.top = rect[1] + 'px';
	      container.style.width = width + 'px';
	      container.style.height = height + 'px';
	      return container;
	    }
	  }, {
	    key: '_createPopup',
	    value: function _createPopup(container, trigger, data) {
	      if (!trigger) {
	        trigger = document.createElement('div');
	        trigger.style.height = container.style.height;
	        trigger.style.width = container.style.width;
	        container.appendChild(trigger);
	      }
	      var popupElement = new PopupElement({
	        container: container,
	        trigger: trigger,
	        color: data.color,
	        title: data.title,
	        contents: data.contents,
	        hideWrapper: true
	      });
	      var popup = popupElement.render();
	      popup.style.left = container.style.width;
	      container.appendChild(popup);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      throw new Error('Abstract method `AnnotationElement.render` called');
	    }
	  }]);

	  return AnnotationElement;
	}();

	var LinkAnnotationElement = function (_AnnotationElement) {
	  _inherits(LinkAnnotationElement, _AnnotationElement);

	  function LinkAnnotationElement(parameters) {
	    _classCallCheck(this, LinkAnnotationElement);

	    var isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action);
	    return _possibleConstructorReturn(this, (LinkAnnotationElement.__proto__ || Object.getPrototypeOf(LinkAnnotationElement)).call(this, parameters, isRenderable));
	  }

	  _createClass(LinkAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'linkAnnotation';
	      var link = document.createElement('a');
	      (0, _dom_utils.addLinkAttributes)(link, {
	        url: this.data.url,
	        target: this.data.newWindow ? _dom_utils.LinkTarget.BLANK : undefined
	      });
	      if (!this.data.url) {
	        if (this.data.action) {
	          this._bindNamedAction(link, this.data.action);
	        } else {
	          this._bindLink(link, this.data.dest);
	        }
	      }
	      this.container.appendChild(link);
	      return this.container;
	    }
	  }, {
	    key: '_bindLink',
	    value: function _bindLink(link, destination) {
	      var _this2 = this;

	      link.href = this.linkService.getDestinationHash(destination);
	      link.onclick = function () {
	        if (destination) {
	          _this2.linkService.navigateTo(destination);
	        }
	        return false;
	      };
	      if (destination) {
	        link.className = 'internalLink';
	      }
	    }
	  }, {
	    key: '_bindNamedAction',
	    value: function _bindNamedAction(link, action) {
	      var _this3 = this;

	      link.href = this.linkService.getAnchorUrl('');
	      link.onclick = function () {
	        _this3.linkService.executeNamedAction(action);
	        return false;
	      };
	      link.className = 'internalLink';
	    }
	  }]);

	  return LinkAnnotationElement;
	}(AnnotationElement);

	var TextAnnotationElement = function (_AnnotationElement2) {
	  _inherits(TextAnnotationElement, _AnnotationElement2);

	  function TextAnnotationElement(parameters) {
	    _classCallCheck(this, TextAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (TextAnnotationElement.__proto__ || Object.getPrototypeOf(TextAnnotationElement)).call(this, parameters, isRenderable));
	  }

	  _createClass(TextAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'textAnnotation';
	      var image = document.createElement('img');
	      image.style.height = this.container.style.height;
	      image.style.width = this.container.style.width;
	      image.src = this.imageResourcesPath + 'annotation-' + this.data.name.toLowerCase() + '.svg';
	      image.alt = '[{{type}} Annotation]';
	      image.dataset.l10nId = 'text_annotation_type';
	      image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, image, this.data);
	      }
	      this.container.appendChild(image);
	      return this.container;
	    }
	  }]);

	  return TextAnnotationElement;
	}(AnnotationElement);

	var WidgetAnnotationElement = function (_AnnotationElement3) {
	  _inherits(WidgetAnnotationElement, _AnnotationElement3);

	  function WidgetAnnotationElement() {
	    _classCallCheck(this, WidgetAnnotationElement);

	    return _possibleConstructorReturn(this, (WidgetAnnotationElement.__proto__ || Object.getPrototypeOf(WidgetAnnotationElement)).apply(this, arguments));
	  }

	  _createClass(WidgetAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      return this.container;
	    }
	  }]);

	  return WidgetAnnotationElement;
	}(AnnotationElement);

	var TextWidgetAnnotationElement = function (_WidgetAnnotationElem) {
	  _inherits(TextWidgetAnnotationElement, _WidgetAnnotationElem);

	  function TextWidgetAnnotationElement(parameters) {
	    _classCallCheck(this, TextWidgetAnnotationElement);

	    var isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
	    return _possibleConstructorReturn(this, (TextWidgetAnnotationElement.__proto__ || Object.getPrototypeOf(TextWidgetAnnotationElement)).call(this, parameters, isRenderable));
	  }

	  _createClass(TextWidgetAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      var TEXT_ALIGNMENT = ['left', 'center', 'right'];
	      this.container.className = 'textWidgetAnnotation';
	      var element = null;
	      if (this.renderInteractiveForms) {
	        if (this.data.multiLine) {
	          element = document.createElement('textarea');
	          element.textContent = this.data.fieldValue;
	        } else {
	          element = document.createElement('input');
	          element.type = 'text';
	          element.setAttribute('value', this.data.fieldValue);
	        }
	        element.disabled = this.data.readOnly;
	        if (this.data.maxLen !== null) {
	          element.maxLength = this.data.maxLen;
	        }
	        if (this.data.comb) {
	          var fieldWidth = this.data.rect[2] - this.data.rect[0];
	          var combWidth = fieldWidth / this.data.maxLen;
	          element.classList.add('comb');
	          element.style.letterSpacing = 'calc(' + combWidth + 'px - 1ch)';
	        }
	      } else {
	        element = document.createElement('div');
	        element.textContent = this.data.fieldValue;
	        element.style.verticalAlign = 'middle';
	        element.style.display = 'table-cell';
	        var font = null;
	        if (this.data.fontRefName) {
	          font = this.page.commonObjs.getData(this.data.fontRefName);
	        }
	        this._setTextStyle(element, font);
	      }
	      if (this.data.textAlignment !== null) {
	        element.style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
	      }
	      this.container.appendChild(element);
	      return this.container;
	    }
	  }, {
	    key: '_setTextStyle',
	    value: function _setTextStyle(element, font) {
	      var style = element.style;
	      style.fontSize = this.data.fontSize + 'px';
	      style.direction = this.data.fontDirection < 0 ? 'rtl' : 'ltr';
	      if (!font) {
	        return;
	      }
	      style.fontWeight = font.black ? font.bold ? '900' : 'bold' : font.bold ? 'bold' : 'normal';
	      style.fontStyle = font.italic ? 'italic' : 'normal';
	      var fontFamily = font.loadedName ? '"' + font.loadedName + '", ' : '';
	      var fallbackName = font.fallbackName || 'Helvetica, sans-serif';
	      style.fontFamily = fontFamily + fallbackName;
	    }
	  }]);

	  return TextWidgetAnnotationElement;
	}(WidgetAnnotationElement);

	var CheckboxWidgetAnnotationElement = function (_WidgetAnnotationElem2) {
	  _inherits(CheckboxWidgetAnnotationElement, _WidgetAnnotationElem2);

	  function CheckboxWidgetAnnotationElement(parameters) {
	    _classCallCheck(this, CheckboxWidgetAnnotationElement);

	    return _possibleConstructorReturn(this, (CheckboxWidgetAnnotationElement.__proto__ || Object.getPrototypeOf(CheckboxWidgetAnnotationElement)).call(this, parameters, parameters.renderInteractiveForms));
	  }

	  _createClass(CheckboxWidgetAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'buttonWidgetAnnotation checkBox';
	      var element = document.createElement('input');
	      element.disabled = this.data.readOnly;
	      element.type = 'checkbox';
	      if (this.data.fieldValue && this.data.fieldValue !== 'Off') {
	        element.setAttribute('checked', true);
	      }
	      this.container.appendChild(element);
	      return this.container;
	    }
	  }]);

	  return CheckboxWidgetAnnotationElement;
	}(WidgetAnnotationElement);

	var RadioButtonWidgetAnnotationElement = function (_WidgetAnnotationElem3) {
	  _inherits(RadioButtonWidgetAnnotationElement, _WidgetAnnotationElem3);

	  function RadioButtonWidgetAnnotationElement(parameters) {
	    _classCallCheck(this, RadioButtonWidgetAnnotationElement);

	    return _possibleConstructorReturn(this, (RadioButtonWidgetAnnotationElement.__proto__ || Object.getPrototypeOf(RadioButtonWidgetAnnotationElement)).call(this, parameters, parameters.renderInteractiveForms));
	  }

	  _createClass(RadioButtonWidgetAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'buttonWidgetAnnotation radioButton';
	      var element = document.createElement('input');
	      element.disabled = this.data.readOnly;
	      element.type = 'radio';
	      element.name = this.data.fieldName;
	      if (this.data.fieldValue === this.data.buttonValue) {
	        element.setAttribute('checked', true);
	      }
	      this.container.appendChild(element);
	      return this.container;
	    }
	  }]);

	  return RadioButtonWidgetAnnotationElement;
	}(WidgetAnnotationElement);

	var ChoiceWidgetAnnotationElement = function (_WidgetAnnotationElem4) {
	  _inherits(ChoiceWidgetAnnotationElement, _WidgetAnnotationElem4);

	  function ChoiceWidgetAnnotationElement(parameters) {
	    _classCallCheck(this, ChoiceWidgetAnnotationElement);

	    return _possibleConstructorReturn(this, (ChoiceWidgetAnnotationElement.__proto__ || Object.getPrototypeOf(ChoiceWidgetAnnotationElement)).call(this, parameters, parameters.renderInteractiveForms));
	  }

	  _createClass(ChoiceWidgetAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'choiceWidgetAnnotation';
	      var selectElement = document.createElement('select');
	      selectElement.disabled = this.data.readOnly;
	      if (!this.data.combo) {
	        selectElement.size = this.data.options.length;
	        if (this.data.multiSelect) {
	          selectElement.multiple = true;
	        }
	      }
	      for (var i = 0, ii = this.data.options.length; i < ii; i++) {
	        var option = this.data.options[i];
	        var optionElement = document.createElement('option');
	        optionElement.textContent = option.displayValue;
	        optionElement.value = option.exportValue;
	        if (this.data.fieldValue.indexOf(option.displayValue) >= 0) {
	          optionElement.setAttribute('selected', true);
	        }
	        selectElement.appendChild(optionElement);
	      }
	      this.container.appendChild(selectElement);
	      return this.container;
	    }
	  }]);

	  return ChoiceWidgetAnnotationElement;
	}(WidgetAnnotationElement);

	var PopupAnnotationElement = function (_AnnotationElement4) {
	  _inherits(PopupAnnotationElement, _AnnotationElement4);

	  function PopupAnnotationElement(parameters) {
	    _classCallCheck(this, PopupAnnotationElement);

	    var isRenderable = !!(parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (PopupAnnotationElement.__proto__ || Object.getPrototypeOf(PopupAnnotationElement)).call(this, parameters, isRenderable));
	  }

	  _createClass(PopupAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      var IGNORE_TYPES = ['Line', 'Square', 'Circle', 'PolyLine', 'Polygon'];
	      this.container.className = 'popupAnnotation';
	      if (IGNORE_TYPES.indexOf(this.data.parentType) >= 0) {
	        return this.container;
	      }
	      var selector = '[data-annotation-id="' + this.data.parentId + '"]';
	      var parentElement = this.layer.querySelector(selector);
	      if (!parentElement) {
	        return this.container;
	      }
	      var popup = new PopupElement({
	        container: this.container,
	        trigger: parentElement,
	        color: this.data.color,
	        title: this.data.title,
	        contents: this.data.contents
	      });
	      var parentLeft = parseFloat(parentElement.style.left);
	      var parentWidth = parseFloat(parentElement.style.width);
	      _dom_utils.CustomStyle.setProp('transformOrigin', this.container, -(parentLeft + parentWidth) + 'px -' + parentElement.style.top);
	      this.container.style.left = parentLeft + parentWidth + 'px';
	      this.container.appendChild(popup.render());
	      return this.container;
	    }
	  }]);

	  return PopupAnnotationElement;
	}(AnnotationElement);

	var PopupElement = function () {
	  function PopupElement(parameters) {
	    _classCallCheck(this, PopupElement);

	    this.container = parameters.container;
	    this.trigger = parameters.trigger;
	    this.color = parameters.color;
	    this.title = parameters.title;
	    this.contents = parameters.contents;
	    this.hideWrapper = parameters.hideWrapper || false;
	    this.pinned = false;
	  }

	  _createClass(PopupElement, [{
	    key: 'render',
	    value: function render() {
	      var BACKGROUND_ENLIGHT = 0.7;
	      var wrapper = document.createElement('div');
	      wrapper.className = 'popupWrapper';
	      this.hideElement = this.hideWrapper ? wrapper : this.container;
	      this.hideElement.setAttribute('hidden', true);
	      var popup = document.createElement('div');
	      popup.className = 'popup';
	      var color = this.color;
	      if (color) {
	        var r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];
	        var g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];
	        var b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];
	        popup.style.backgroundColor = _util.Util.makeCssRgb(r | 0, g | 0, b | 0);
	      }
	      var contents = this._formatContents(this.contents);
	      var title = document.createElement('h1');
	      title.textContent = this.title;
	      this.trigger.addEventListener('click', this._toggle.bind(this));
	      this.trigger.addEventListener('mouseover', this._show.bind(this, false));
	      this.trigger.addEventListener('mouseout', this._hide.bind(this, false));
	      popup.addEventListener('click', this._hide.bind(this, true));
	      popup.appendChild(title);
	      popup.appendChild(contents);
	      wrapper.appendChild(popup);
	      return wrapper;
	    }
	  }, {
	    key: '_formatContents',
	    value: function _formatContents(contents) {
	      var p = document.createElement('p');
	      var lines = contents.split(/(?:\r\n?|\n)/);
	      for (var i = 0, ii = lines.length; i < ii; ++i) {
	        var line = lines[i];
	        p.appendChild(document.createTextNode(line));
	        if (i < ii - 1) {
	          p.appendChild(document.createElement('br'));
	        }
	      }
	      return p;
	    }
	  }, {
	    key: '_toggle',
	    value: function _toggle() {
	      if (this.pinned) {
	        this._hide(true);
	      } else {
	        this._show(true);
	      }
	    }
	  }, {
	    key: '_show',
	    value: function _show() {
	      var pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	      if (pin) {
	        this.pinned = true;
	      }
	      if (this.hideElement.hasAttribute('hidden')) {
	        this.hideElement.removeAttribute('hidden');
	        this.container.style.zIndex += 1;
	      }
	    }
	  }, {
	    key: '_hide',
	    value: function _hide() {
	      var unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	      if (unpin) {
	        this.pinned = false;
	      }
	      if (!this.hideElement.hasAttribute('hidden') && !this.pinned) {
	        this.hideElement.setAttribute('hidden', true);
	        this.container.style.zIndex -= 1;
	      }
	    }
	  }]);

	  return PopupElement;
	}();

	var LineAnnotationElement = function (_AnnotationElement5) {
	  _inherits(LineAnnotationElement, _AnnotationElement5);

	  function LineAnnotationElement(parameters) {
	    _classCallCheck(this, LineAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (LineAnnotationElement.__proto__ || Object.getPrototypeOf(LineAnnotationElement)).call(this, parameters, isRenderable, true));
	  }

	  _createClass(LineAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'lineAnnotation';
	      var data = this.data;
	      var width = data.rect[2] - data.rect[0];
	      var height = data.rect[3] - data.rect[1];
	      var svg = this.svgFactory.create(width, height);
	      var line = this.svgFactory.createElement('svg:line');
	      line.setAttribute('x1', data.rect[2] - data.lineCoordinates[0]);
	      line.setAttribute('y1', data.rect[3] - data.lineCoordinates[1]);
	      line.setAttribute('x2', data.rect[2] - data.lineCoordinates[2]);
	      line.setAttribute('y2', data.rect[3] - data.lineCoordinates[3]);
	      line.setAttribute('stroke-width', data.borderStyle.width);
	      line.setAttribute('stroke', 'transparent');
	      svg.appendChild(line);
	      this.container.append(svg);
	      this._createPopup(this.container, line, data);
	      return this.container;
	    }
	  }]);

	  return LineAnnotationElement;
	}(AnnotationElement);

	var SquareAnnotationElement = function (_AnnotationElement6) {
	  _inherits(SquareAnnotationElement, _AnnotationElement6);

	  function SquareAnnotationElement(parameters) {
	    _classCallCheck(this, SquareAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (SquareAnnotationElement.__proto__ || Object.getPrototypeOf(SquareAnnotationElement)).call(this, parameters, isRenderable, true));
	  }

	  _createClass(SquareAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'squareAnnotation';
	      var data = this.data;
	      var width = data.rect[2] - data.rect[0];
	      var height = data.rect[3] - data.rect[1];
	      var svg = this.svgFactory.create(width, height);
	      var borderWidth = data.borderStyle.width;
	      var square = this.svgFactory.createElement('svg:rect');
	      square.setAttribute('x', borderWidth / 2);
	      square.setAttribute('y', borderWidth / 2);
	      square.setAttribute('width', width - borderWidth);
	      square.setAttribute('height', height - borderWidth);
	      square.setAttribute('stroke-width', borderWidth);
	      square.setAttribute('stroke', 'transparent');
	      square.setAttribute('fill', 'none');
	      svg.appendChild(square);
	      this.container.append(svg);
	      this._createPopup(this.container, square, data);
	      return this.container;
	    }
	  }]);

	  return SquareAnnotationElement;
	}(AnnotationElement);

	var CircleAnnotationElement = function (_AnnotationElement7) {
	  _inherits(CircleAnnotationElement, _AnnotationElement7);

	  function CircleAnnotationElement(parameters) {
	    _classCallCheck(this, CircleAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (CircleAnnotationElement.__proto__ || Object.getPrototypeOf(CircleAnnotationElement)).call(this, parameters, isRenderable, true));
	  }

	  _createClass(CircleAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'circleAnnotation';
	      var data = this.data;
	      var width = data.rect[2] - data.rect[0];
	      var height = data.rect[3] - data.rect[1];
	      var svg = this.svgFactory.create(width, height);
	      var borderWidth = data.borderStyle.width;
	      var circle = this.svgFactory.createElement('svg:ellipse');
	      circle.setAttribute('cx', width / 2);
	      circle.setAttribute('cy', height / 2);
	      circle.setAttribute('rx', width / 2 - borderWidth / 2);
	      circle.setAttribute('ry', height / 2 - borderWidth / 2);
	      circle.setAttribute('stroke-width', borderWidth);
	      circle.setAttribute('stroke', 'transparent');
	      circle.setAttribute('fill', 'none');
	      svg.appendChild(circle);
	      this.container.append(svg);
	      this._createPopup(this.container, circle, data);
	      return this.container;
	    }
	  }]);

	  return CircleAnnotationElement;
	}(AnnotationElement);

	var PolylineAnnotationElement = function (_AnnotationElement8) {
	  _inherits(PolylineAnnotationElement, _AnnotationElement8);

	  function PolylineAnnotationElement(parameters) {
	    _classCallCheck(this, PolylineAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);

	    var _this14 = _possibleConstructorReturn(this, (PolylineAnnotationElement.__proto__ || Object.getPrototypeOf(PolylineAnnotationElement)).call(this, parameters, isRenderable, true));

	    _this14.containerClassName = 'polylineAnnotation';
	    _this14.svgElementName = 'svg:polyline';
	    return _this14;
	  }

	  _createClass(PolylineAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = this.containerClassName;
	      var data = this.data;
	      var width = data.rect[2] - data.rect[0];
	      var height = data.rect[3] - data.rect[1];
	      var svg = this.svgFactory.create(width, height);
	      var vertices = data.vertices;
	      var points = [];
	      for (var i = 0, ii = vertices.length; i < ii; i++) {
	        var x = vertices[i].x - data.rect[0];
	        var y = data.rect[3] - vertices[i].y;
	        points.push(x + ',' + y);
	      }
	      points = points.join(' ');
	      var borderWidth = data.borderStyle.width;
	      var polyline = this.svgFactory.createElement(this.svgElementName);
	      polyline.setAttribute('points', points);
	      polyline.setAttribute('stroke-width', borderWidth);
	      polyline.setAttribute('stroke', 'transparent');
	      polyline.setAttribute('fill', 'none');
	      svg.appendChild(polyline);
	      this.container.append(svg);
	      this._createPopup(this.container, polyline, data);
	      return this.container;
	    }
	  }]);

	  return PolylineAnnotationElement;
	}(AnnotationElement);

	var PolygonAnnotationElement = function (_PolylineAnnotationEl) {
	  _inherits(PolygonAnnotationElement, _PolylineAnnotationEl);

	  function PolygonAnnotationElement(parameters) {
	    _classCallCheck(this, PolygonAnnotationElement);

	    var _this15 = _possibleConstructorReturn(this, (PolygonAnnotationElement.__proto__ || Object.getPrototypeOf(PolygonAnnotationElement)).call(this, parameters));

	    _this15.containerClassName = 'polygonAnnotation';
	    _this15.svgElementName = 'svg:polygon';
	    return _this15;
	  }

	  return PolygonAnnotationElement;
	}(PolylineAnnotationElement);

	var HighlightAnnotationElement = function (_AnnotationElement9) {
	  _inherits(HighlightAnnotationElement, _AnnotationElement9);

	  function HighlightAnnotationElement(parameters) {
	    _classCallCheck(this, HighlightAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (HighlightAnnotationElement.__proto__ || Object.getPrototypeOf(HighlightAnnotationElement)).call(this, parameters, isRenderable, true));
	  }

	  _createClass(HighlightAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'highlightAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  }]);

	  return HighlightAnnotationElement;
	}(AnnotationElement);

	var UnderlineAnnotationElement = function (_AnnotationElement10) {
	  _inherits(UnderlineAnnotationElement, _AnnotationElement10);

	  function UnderlineAnnotationElement(parameters) {
	    _classCallCheck(this, UnderlineAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (UnderlineAnnotationElement.__proto__ || Object.getPrototypeOf(UnderlineAnnotationElement)).call(this, parameters, isRenderable, true));
	  }

	  _createClass(UnderlineAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'underlineAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  }]);

	  return UnderlineAnnotationElement;
	}(AnnotationElement);

	var SquigglyAnnotationElement = function (_AnnotationElement11) {
	  _inherits(SquigglyAnnotationElement, _AnnotationElement11);

	  function SquigglyAnnotationElement(parameters) {
	    _classCallCheck(this, SquigglyAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (SquigglyAnnotationElement.__proto__ || Object.getPrototypeOf(SquigglyAnnotationElement)).call(this, parameters, isRenderable, true));
	  }

	  _createClass(SquigglyAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'squigglyAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  }]);

	  return SquigglyAnnotationElement;
	}(AnnotationElement);

	var StrikeOutAnnotationElement = function (_AnnotationElement12) {
	  _inherits(StrikeOutAnnotationElement, _AnnotationElement12);

	  function StrikeOutAnnotationElement(parameters) {
	    _classCallCheck(this, StrikeOutAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (StrikeOutAnnotationElement.__proto__ || Object.getPrototypeOf(StrikeOutAnnotationElement)).call(this, parameters, isRenderable, true));
	  }

	  _createClass(StrikeOutAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'strikeoutAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  }]);

	  return StrikeOutAnnotationElement;
	}(AnnotationElement);

	var StampAnnotationElement = function (_AnnotationElement13) {
	  _inherits(StampAnnotationElement, _AnnotationElement13);

	  function StampAnnotationElement(parameters) {
	    _classCallCheck(this, StampAnnotationElement);

	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    return _possibleConstructorReturn(this, (StampAnnotationElement.__proto__ || Object.getPrototypeOf(StampAnnotationElement)).call(this, parameters, isRenderable, true));
	  }

	  _createClass(StampAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'stampAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  }]);

	  return StampAnnotationElement;
	}(AnnotationElement);

	var FileAttachmentAnnotationElement = function (_AnnotationElement14) {
	  _inherits(FileAttachmentAnnotationElement, _AnnotationElement14);

	  function FileAttachmentAnnotationElement(parameters) {
	    _classCallCheck(this, FileAttachmentAnnotationElement);

	    var _this21 = _possibleConstructorReturn(this, (FileAttachmentAnnotationElement.__proto__ || Object.getPrototypeOf(FileAttachmentAnnotationElement)).call(this, parameters, true));

	    var file = _this21.data.file;
	    _this21.filename = (0, _dom_utils.getFilenameFromUrl)(file.filename);
	    _this21.content = file.content;
	    _this21.linkService.onFileAttachmentAnnotation({
	      id: (0, _util.stringToPDFString)(file.filename),
	      filename: file.filename,
	      content: file.content
	    });
	    return _this21;
	  }

	  _createClass(FileAttachmentAnnotationElement, [{
	    key: 'render',
	    value: function render() {
	      this.container.className = 'fileAttachmentAnnotation';
	      var trigger = document.createElement('div');
	      trigger.style.height = this.container.style.height;
	      trigger.style.width = this.container.style.width;
	      trigger.addEventListener('dblclick', this._download.bind(this));
	      if (!this.data.hasPopup && (this.data.title || this.data.contents)) {
	        this._createPopup(this.container, trigger, this.data);
	      }
	      this.container.appendChild(trigger);
	      return this.container;
	    }
	  }, {
	    key: '_download',
	    value: function _download() {
	      if (!this.downloadManager) {
	        (0, _util.warn)('Download cannot be started due to unavailable download manager');
	        return;
	      }
	      this.downloadManager.downloadData(this.content, this.filename, '');
	    }
	  }]);

	  return FileAttachmentAnnotationElement;
	}(AnnotationElement);

	var AnnotationLayer = function () {
	  function AnnotationLayer() {
	    _classCallCheck(this, AnnotationLayer);
	  }

	  _createClass(AnnotationLayer, null, [{
	    key: 'render',
	    value: function render(parameters) {
	      for (var i = 0, ii = parameters.annotations.length; i < ii; i++) {
	        var data = parameters.annotations[i];
	        if (!data) {
	          continue;
	        }
	        var element = AnnotationElementFactory.create({
	          data: data,
	          layer: parameters.div,
	          page: parameters.page,
	          viewport: parameters.viewport,
	          linkService: parameters.linkService,
	          downloadManager: parameters.downloadManager,
	          imageResourcesPath: parameters.imageResourcesPath || (0, _dom_utils.getDefaultSetting)('imageResourcesPath'),
	          renderInteractiveForms: parameters.renderInteractiveForms || false,
	          svgFactory: new _dom_utils.DOMSVGFactory()
	        });
	        if (element.isRenderable) {
	          parameters.div.appendChild(element.render());
	        }
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update(parameters) {
	      for (var i = 0, ii = parameters.annotations.length; i < ii; i++) {
	        var data = parameters.annotations[i];
	        var element = parameters.div.querySelector('[data-annotation-id="' + data.id + '"]');
	        if (element) {
	          _dom_utils.CustomStyle.setProp('transform', element, 'matrix(' + parameters.viewport.transform.join(',') + ')');
	        }
	      }
	      parameters.div.removeAttribute('hidden');
	    }
	  }]);

	  return AnnotationLayer;
	}();

	exports.AnnotationLayer = AnnotationLayer;

	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.renderTextLayer = undefined;

	var _util = __w_pdfjs_require__(0);

	var _dom_utils = __w_pdfjs_require__(5);

	var renderTextLayer = function renderTextLayerClosure() {
	  var MAX_TEXT_DIVS_TO_RENDER = 100000;
	  var NonWhitespaceRegexp = /\S/;
	  function isAllWhitespace(str) {
	    return !NonWhitespaceRegexp.test(str);
	  }
	  var styleBuf = ['left: ', 0, 'px; top: ', 0, 'px; font-size: ', 0, 'px; font-family: ', '', ';'];
	  function appendText(task, geom, styles) {
	    var textDiv = document.createElement('div');
	    var textDivProperties = {
	      style: null,
	      angle: 0,
	      canvasWidth: 0,
	      isWhitespace: false,
	      originalTransform: null,
	      paddingBottom: 0,
	      paddingLeft: 0,
	      paddingRight: 0,
	      paddingTop: 0,
	      scale: 1
	    };
	    task._textDivs.push(textDiv);
	    if (isAllWhitespace(geom.str)) {
	      textDivProperties.isWhitespace = true;
	      task._textDivProperties.set(textDiv, textDivProperties);
	      return;
	    }
	    var tx = _util.Util.transform(task._viewport.transform, geom.transform);
	    var angle = Math.atan2(tx[1], tx[0]);
	    var style = styles[geom.fontName];
	    if (style.vertical) {
	      angle += Math.PI / 2;
	    }
	    var fontHeight = Math.sqrt(tx[2] * tx[2] + tx[3] * tx[3]);
	    var fontAscent = fontHeight;
	    if (style.ascent) {
	      fontAscent = style.ascent * fontAscent;
	    } else if (style.descent) {
	      fontAscent = (1 + style.descent) * fontAscent;
	    }
	    var left;
	    var top;
	    if (angle === 0) {
	      left = tx[4];
	      top = tx[5] - fontAscent;
	    } else {
	      left = tx[4] + fontAscent * Math.sin(angle);
	      top = tx[5] - fontAscent * Math.cos(angle);
	    }
	    styleBuf[1] = left;
	    styleBuf[3] = top;
	    styleBuf[5] = fontHeight;
	    styleBuf[7] = style.fontFamily;
	    textDivProperties.style = styleBuf.join('');
	    textDiv.setAttribute('style', textDivProperties.style);
	    textDiv.textContent = geom.str;
	    if ((0, _dom_utils.getDefaultSetting)('pdfBug')) {
	      textDiv.dataset.fontName = geom.fontName;
	    }
	    if (angle !== 0) {
	      textDivProperties.angle = angle * (180 / Math.PI);
	    }
	    if (geom.str.length > 1) {
	      if (style.vertical) {
	        textDivProperties.canvasWidth = geom.height * task._viewport.scale;
	      } else {
	        textDivProperties.canvasWidth = geom.width * task._viewport.scale;
	      }
	    }
	    task._textDivProperties.set(textDiv, textDivProperties);
	    if (task._textContentStream) {
	      task._layoutText(textDiv);
	    }
	    if (task._enhanceTextSelection) {
	      var angleCos = 1,
	          angleSin = 0;
	      if (angle !== 0) {
	        angleCos = Math.cos(angle);
	        angleSin = Math.sin(angle);
	      }
	      var divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;
	      var divHeight = fontHeight;
	      var m, b;
	      if (angle !== 0) {
	        m = [angleCos, angleSin, -angleSin, angleCos, left, top];
	        b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);
	      } else {
	        b = [left, top, left + divWidth, top + divHeight];
	      }
	      task._bounds.push({
	        left: b[0],
	        top: b[1],
	        right: b[2],
	        bottom: b[3],
	        div: textDiv,
	        size: [divWidth, divHeight],
	        m: m
	      });
	    }
	  }
	  function render(task) {
	    if (task._canceled) {
	      return;
	    }
	    var textDivs = task._textDivs;
	    var capability = task._capability;
	    var textDivsLength = textDivs.length;
	    if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
	      task._renderingDone = true;
	      capability.resolve();
	      return;
	    }
	    if (!task._textContentStream) {
	      for (var i = 0; i < textDivsLength; i++) {
	        task._layoutText(textDivs[i]);
	      }
	    }
	    task._renderingDone = true;
	    capability.resolve();
	  }
	  function expand(task) {
	    var bounds = task._bounds;
	    var viewport = task._viewport;
	    var expanded = expandBounds(viewport.width, viewport.height, bounds);
	    for (var i = 0; i < expanded.length; i++) {
	      var div = bounds[i].div;
	      var divProperties = task._textDivProperties.get(div);
	      if (divProperties.angle === 0) {
	        divProperties.paddingLeft = bounds[i].left - expanded[i].left;
	        divProperties.paddingTop = bounds[i].top - expanded[i].top;
	        divProperties.paddingRight = expanded[i].right - bounds[i].right;
	        divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;
	        task._textDivProperties.set(div, divProperties);
	        continue;
	      }
	      var e = expanded[i],
	          b = bounds[i];
	      var m = b.m,
	          c = m[0],
	          s = m[1];
	      var points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];
	      var ts = new Float64Array(64);
	      points.forEach(function (p, i) {
	        var t = _util.Util.applyTransform(p, m);
	        ts[i + 0] = c && (e.left - t[0]) / c;
	        ts[i + 4] = s && (e.top - t[1]) / s;
	        ts[i + 8] = c && (e.right - t[0]) / c;
	        ts[i + 12] = s && (e.bottom - t[1]) / s;
	        ts[i + 16] = s && (e.left - t[0]) / -s;
	        ts[i + 20] = c && (e.top - t[1]) / c;
	        ts[i + 24] = s && (e.right - t[0]) / -s;
	        ts[i + 28] = c && (e.bottom - t[1]) / c;
	        ts[i + 32] = c && (e.left - t[0]) / -c;
	        ts[i + 36] = s && (e.top - t[1]) / -s;
	        ts[i + 40] = c && (e.right - t[0]) / -c;
	        ts[i + 44] = s && (e.bottom - t[1]) / -s;
	        ts[i + 48] = s && (e.left - t[0]) / s;
	        ts[i + 52] = c && (e.top - t[1]) / -c;
	        ts[i + 56] = s && (e.right - t[0]) / s;
	        ts[i + 60] = c && (e.bottom - t[1]) / -c;
	      });
	      var findPositiveMin = function findPositiveMin(ts, offset, count) {
	        var result = 0;
	        for (var i = 0; i < count; i++) {
	          var t = ts[offset++];
	          if (t > 0) {
	            result = result ? Math.min(t, result) : t;
	          }
	        }
	        return result;
	      };
	      var boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));
	      divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;
	      divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;
	      divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;
	      divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;
	      task._textDivProperties.set(div, divProperties);
	    }
	  }
	  function expandBounds(width, height, boxes) {
	    var bounds = boxes.map(function (box, i) {
	      return {
	        x1: box.left,
	        y1: box.top,
	        x2: box.right,
	        y2: box.bottom,
	        index: i,
	        x1New: undefined,
	        x2New: undefined
	      };
	    });
	    expandBoundsLTR(width, bounds);
	    var expanded = new Array(boxes.length);
	    bounds.forEach(function (b) {
	      var i = b.index;
	      expanded[i] = {
	        left: b.x1New,
	        top: 0,
	        right: b.x2New,
	        bottom: 0
	      };
	    });
	    boxes.map(function (box, i) {
	      var e = expanded[i],
	          b = bounds[i];
	      b.x1 = box.top;
	      b.y1 = width - e.right;
	      b.x2 = box.bottom;
	      b.y2 = width - e.left;
	      b.index = i;
	      b.x1New = undefined;
	      b.x2New = undefined;
	    });
	    expandBoundsLTR(height, bounds);
	    bounds.forEach(function (b) {
	      var i = b.index;
	      expanded[i].top = b.x1New;
	      expanded[i].bottom = b.x2New;
	    });
	    return expanded;
	  }
	  function expandBoundsLTR(width, bounds) {
	    bounds.sort(function (a, b) {
	      return a.x1 - b.x1 || a.index - b.index;
	    });
	    var fakeBoundary = {
	      x1: -Infinity,
	      y1: -Infinity,
	      x2: 0,
	      y2: Infinity,
	      index: -1,
	      x1New: 0,
	      x2New: 0
	    };
	    var horizon = [{
	      start: -Infinity,
	      end: Infinity,
	      boundary: fakeBoundary
	    }];
	    bounds.forEach(function (boundary) {
	      var i = 0;
	      while (i < horizon.length && horizon[i].end <= boundary.y1) {
	        i++;
	      }
	      var j = horizon.length - 1;
	      while (j >= 0 && horizon[j].start >= boundary.y2) {
	        j--;
	      }
	      var horizonPart, affectedBoundary;
	      var q,
	          k,
	          maxXNew = -Infinity;
	      for (q = i; q <= j; q++) {
	        horizonPart = horizon[q];
	        affectedBoundary = horizonPart.boundary;
	        var xNew;
	        if (affectedBoundary.x2 > boundary.x1) {
	          xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;
	        } else if (affectedBoundary.x2New === undefined) {
	          xNew = (affectedBoundary.x2 + boundary.x1) / 2;
	        } else {
	          xNew = affectedBoundary.x2New;
	        }
	        if (xNew > maxXNew) {
	          maxXNew = xNew;
	        }
	      }
	      boundary.x1New = maxXNew;
	      for (q = i; q <= j; q++) {
	        horizonPart = horizon[q];
	        affectedBoundary = horizonPart.boundary;
	        if (affectedBoundary.x2New === undefined) {
	          if (affectedBoundary.x2 > boundary.x1) {
	            if (affectedBoundary.index > boundary.index) {
	              affectedBoundary.x2New = affectedBoundary.x2;
	            }
	          } else {
	            affectedBoundary.x2New = maxXNew;
	          }
	        } else if (affectedBoundary.x2New > maxXNew) {
	          affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);
	        }
	      }
	      var changedHorizon = [],
	          lastBoundary = null;
	      for (q = i; q <= j; q++) {
	        horizonPart = horizon[q];
	        affectedBoundary = horizonPart.boundary;
	        var useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;
	        if (lastBoundary === useBoundary) {
	          changedHorizon[changedHorizon.length - 1].end = horizonPart.end;
	        } else {
	          changedHorizon.push({
	            start: horizonPart.start,
	            end: horizonPart.end,
	            boundary: useBoundary
	          });
	          lastBoundary = useBoundary;
	        }
	      }
	      if (horizon[i].start < boundary.y1) {
	        changedHorizon[0].start = boundary.y1;
	        changedHorizon.unshift({
	          start: horizon[i].start,
	          end: boundary.y1,
	          boundary: horizon[i].boundary
	        });
	      }
	      if (boundary.y2 < horizon[j].end) {
	        changedHorizon[changedHorizon.length - 1].end = boundary.y2;
	        changedHorizon.push({
	          start: boundary.y2,
	          end: horizon[j].end,
	          boundary: horizon[j].boundary
	        });
	      }
	      for (q = i; q <= j; q++) {
	        horizonPart = horizon[q];
	        affectedBoundary = horizonPart.boundary;
	        if (affectedBoundary.x2New !== undefined) {
	          continue;
	        }
	        var used = false;
	        for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {
	          used = horizon[k].boundary === affectedBoundary;
	        }
	        for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {
	          used = horizon[k].boundary === affectedBoundary;
	        }
	        for (k = 0; !used && k < changedHorizon.length; k++) {
	          used = changedHorizon[k].boundary === affectedBoundary;
	        }
	        if (!used) {
	          affectedBoundary.x2New = maxXNew;
	        }
	      }
	      Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));
	    });
	    horizon.forEach(function (horizonPart) {
	      var affectedBoundary = horizonPart.boundary;
	      if (affectedBoundary.x2New === undefined) {
	        affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);
	      }
	    });
	  }
	  function TextLayerRenderTask(_ref) {
	    var textContent = _ref.textContent,
	        textContentStream = _ref.textContentStream,
	        container = _ref.container,
	        viewport = _ref.viewport,
	        textDivs = _ref.textDivs,
	        textContentItemsStr = _ref.textContentItemsStr,
	        enhanceTextSelection = _ref.enhanceTextSelection;

	    this._textContent = textContent;
	    this._textContentStream = textContentStream;
	    this._container = container;
	    this._viewport = viewport;
	    this._textDivs = textDivs || [];
	    this._textContentItemsStr = textContentItemsStr || [];
	    this._enhanceTextSelection = !!enhanceTextSelection;
	    this._reader = null;
	    this._layoutTextLastFontSize = null;
	    this._layoutTextLastFontFamily = null;
	    this._layoutTextCtx = null;
	    this._textDivProperties = new WeakMap();
	    this._renderingDone = false;
	    this._canceled = false;
	    this._capability = (0, _util.createPromiseCapability)();
	    this._renderTimer = null;
	    this._bounds = [];
	  }
	  TextLayerRenderTask.prototype = {
	    get promise() {
	      return this._capability.promise;
	    },
	    cancel: function TextLayer_cancel() {
	      if (this._reader) {
	        this._reader.cancel(new _util.AbortException('text layer task cancelled'));
	        this._reader = null;
	      }
	      this._canceled = true;
	      if (this._renderTimer !== null) {
	        clearTimeout(this._renderTimer);
	        this._renderTimer = null;
	      }
	      this._capability.reject('canceled');
	    },
	    _processItems: function _processItems(items, styleCache) {
	      for (var i = 0, len = items.length; i < len; i++) {
	        this._textContentItemsStr.push(items[i].str);
	        appendText(this, items[i], styleCache);
	      }
	    },
	    _layoutText: function _layoutText(textDiv) {
	      var textLayerFrag = this._container;
	      var textDivProperties = this._textDivProperties.get(textDiv);
	      if (textDivProperties.isWhitespace) {
	        return;
	      }
	      var fontSize = textDiv.style.fontSize;
	      var fontFamily = textDiv.style.fontFamily;
	      if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {
	        this._layoutTextCtx.font = fontSize + ' ' + fontFamily;
	        this._lastFontSize = fontSize;
	        this._lastFontFamily = fontFamily;
	      }
	      var width = this._layoutTextCtx.measureText(textDiv.textContent).width;
	      var transform = '';
	      if (textDivProperties.canvasWidth !== 0 && width > 0) {
	        textDivProperties.scale = textDivProperties.canvasWidth / width;
	        transform = 'scaleX(' + textDivProperties.scale + ')';
	      }
	      if (textDivProperties.angle !== 0) {
	        transform = 'rotate(' + textDivProperties.angle + 'deg) ' + transform;
	      }
	      if (transform !== '') {
	        textDivProperties.originalTransform = transform;
	        _dom_utils.CustomStyle.setProp('transform', textDiv, transform);
	      }
	      this._textDivProperties.set(textDiv, textDivProperties);
	      textLayerFrag.appendChild(textDiv);
	    },

	    _render: function TextLayer_render(timeout) {
	      var _this = this;

	      var capability = (0, _util.createPromiseCapability)();
	      var styleCache = Object.create(null);
	      var canvas = document.createElement('canvas');
	      canvas.mozOpaque = true;
	      this._layoutTextCtx = canvas.getContext('2d', { alpha: false });
	      if (this._textContent) {
	        var textItems = this._textContent.items;
	        var textStyles = this._textContent.styles;
	        this._processItems(textItems, textStyles);
	        capability.resolve();
	      } else if (this._textContentStream) {
	        var pump = function pump() {
	          _this._reader.read().then(function (_ref2) {
	            var value = _ref2.value,
	                done = _ref2.done;

	            if (done) {
	              capability.resolve();
	              return;
	            }
	            _util.Util.extendObj(styleCache, value.styles);
	            _this._processItems(value.items, styleCache);
	            pump();
	          }, capability.reject);
	        };
	        this._reader = this._textContentStream.getReader();
	        pump();
	      } else {
	        throw new Error('Neither "textContent" nor "textContentStream"' + ' parameters specified.');
	      }
	      capability.promise.then(function () {
	        styleCache = null;
	        if (!timeout) {
	          render(_this);
	        } else {
	          _this._renderTimer = setTimeout(function () {
	            render(_this);
	            _this._renderTimer = null;
	          }, timeout);
	        }
	      }, this._capability.reject);
	    },
	    expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {
	      if (!this._enhanceTextSelection || !this._renderingDone) {
	        return;
	      }
	      if (this._bounds !== null) {
	        expand(this);
	        this._bounds = null;
	      }
	      for (var i = 0, ii = this._textDivs.length; i < ii; i++) {
	        var div = this._textDivs[i];
	        var divProperties = this._textDivProperties.get(div);
	        if (divProperties.isWhitespace) {
	          continue;
	        }
	        if (expandDivs) {
	          var transform = '',
	              padding = '';
	          if (divProperties.scale !== 1) {
	            transform = 'scaleX(' + divProperties.scale + ')';
	          }
	          if (divProperties.angle !== 0) {
	            transform = 'rotate(' + divProperties.angle + 'deg) ' + transform;
	          }
	          if (divProperties.paddingLeft !== 0) {
	            padding += ' padding-left: ' + divProperties.paddingLeft / divProperties.scale + 'px;';
	            transform += ' translateX(' + -divProperties.paddingLeft / divProperties.scale + 'px)';
	          }
	          if (divProperties.paddingTop !== 0) {
	            padding += ' padding-top: ' + divProperties.paddingTop + 'px;';
	            transform += ' translateY(' + -divProperties.paddingTop + 'px)';
	          }
	          if (divProperties.paddingRight !== 0) {
	            padding += ' padding-right: ' + divProperties.paddingRight / divProperties.scale + 'px;';
	          }
	          if (divProperties.paddingBottom !== 0) {
	            padding += ' padding-bottom: ' + divProperties.paddingBottom + 'px;';
	          }
	          if (padding !== '') {
	            div.setAttribute('style', divProperties.style + padding);
	          }
	          if (transform !== '') {
	            _dom_utils.CustomStyle.setProp('transform', div, transform);
	          }
	        } else {
	          div.style.padding = 0;
	          _dom_utils.CustomStyle.setProp('transform', div, divProperties.originalTransform || '');
	        }
	      }
	    }
	  };
	  function renderTextLayer(renderParameters) {
	    var task = new TextLayerRenderTask({
	      textContent: renderParameters.textContent,
	      textContentStream: renderParameters.textContentStream,
	      container: renderParameters.container,
	      viewport: renderParameters.viewport,
	      textDivs: renderParameters.textDivs,
	      textContentItemsStr: renderParameters.textContentItemsStr,
	      enhanceTextSelection: renderParameters.enhanceTextSelection
	    });
	    task._render(renderParameters.timeout);
	    return task;
	  }
	  return renderTextLayer;
	}();
	exports.renderTextLayer = renderTextLayer;

	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SVGGraphics = undefined;

	var _util = __w_pdfjs_require__(0);

	var _dom_utils = __w_pdfjs_require__(5);

	var SVGGraphics = function SVGGraphics() {
	  throw new Error('Not implemented: SVGGraphics');
	};
	{
	  var SVG_DEFAULTS = {
	    fontStyle: 'normal',
	    fontWeight: 'normal',
	    fillColor: '#000000'
	  };
	  var convertImgDataToPng = function convertImgDataToPngClosure() {
	    var PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);
	    var CHUNK_WRAPPER_SIZE = 12;
	    var crcTable = new Int32Array(256);
	    for (var i = 0; i < 256; i++) {
	      var c = i;
	      for (var h = 0; h < 8; h++) {
	        if (c & 1) {
	          c = 0xedB88320 ^ c >> 1 & 0x7fffffff;
	        } else {
	          c = c >> 1 & 0x7fffffff;
	        }
	      }
	      crcTable[i] = c;
	    }
	    function crc32(data, start, end) {
	      var crc = -1;
	      for (var i = start; i < end; i++) {
	        var a = (crc ^ data[i]) & 0xff;
	        var b = crcTable[a];
	        crc = crc >>> 8 ^ b;
	      }
	      return crc ^ -1;
	    }
	    function writePngChunk(type, body, data, offset) {
	      var p = offset;
	      var len = body.length;
	      data[p] = len >> 24 & 0xff;
	      data[p + 1] = len >> 16 & 0xff;
	      data[p + 2] = len >> 8 & 0xff;
	      data[p + 3] = len & 0xff;
	      p += 4;
	      data[p] = type.charCodeAt(0) & 0xff;
	      data[p + 1] = type.charCodeAt(1) & 0xff;
	      data[p + 2] = type.charCodeAt(2) & 0xff;
	      data[p + 3] = type.charCodeAt(3) & 0xff;
	      p += 4;
	      data.set(body, p);
	      p += body.length;
	      var crc = crc32(data, offset + 4, p);
	      data[p] = crc >> 24 & 0xff;
	      data[p + 1] = crc >> 16 & 0xff;
	      data[p + 2] = crc >> 8 & 0xff;
	      data[p + 3] = crc & 0xff;
	    }
	    function adler32(data, start, end) {
	      var a = 1;
	      var b = 0;
	      for (var i = start; i < end; ++i) {
	        a = (a + (data[i] & 0xff)) % 65521;
	        b = (b + a) % 65521;
	      }
	      return b << 16 | a;
	    }
	    function deflateSync(literals) {
	      if (!(0, _util.isNodeJS)()) {
	        return deflateSyncUncompressed(literals);
	      }
	      try {
	        var input;
	        if (parseInt(process.versions.node) >= 8) {
	          input = literals;
	        } else {
	          input = new Buffer(literals);
	        }
	        var output = __webpack_require__(110).deflateSync(input, { level: 9 });
	        return output instanceof Uint8Array ? output : new Uint8Array(output);
	      } catch (e) {
	        (0, _util.warn)('Not compressing PNG because zlib.deflateSync is unavailable: ' + e);
	      }
	      return deflateSyncUncompressed(literals);
	    }
	    function deflateSyncUncompressed(literals) {
	      var len = literals.length;
	      var maxBlockLength = 0xFFFF;
	      var deflateBlocks = Math.ceil(len / maxBlockLength);
	      var idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
	      var pi = 0;
	      idat[pi++] = 0x78;
	      idat[pi++] = 0x9c;
	      var pos = 0;
	      while (len > maxBlockLength) {
	        idat[pi++] = 0x00;
	        idat[pi++] = 0xff;
	        idat[pi++] = 0xff;
	        idat[pi++] = 0x00;
	        idat[pi++] = 0x00;
	        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
	        pi += maxBlockLength;
	        pos += maxBlockLength;
	        len -= maxBlockLength;
	      }
	      idat[pi++] = 0x01;
	      idat[pi++] = len & 0xff;
	      idat[pi++] = len >> 8 & 0xff;
	      idat[pi++] = ~len & 0xffff & 0xff;
	      idat[pi++] = (~len & 0xffff) >> 8 & 0xff;
	      idat.set(literals.subarray(pos), pi);
	      pi += literals.length - pos;
	      var adler = adler32(literals, 0, literals.length);
	      idat[pi++] = adler >> 24 & 0xff;
	      idat[pi++] = adler >> 16 & 0xff;
	      idat[pi++] = adler >> 8 & 0xff;
	      idat[pi++] = adler & 0xff;
	      return idat;
	    }
	    function encode(imgData, kind, forceDataSchema) {
	      var width = imgData.width;
	      var height = imgData.height;
	      var bitDepth, colorType, lineSize;
	      var bytes = imgData.data;
	      switch (kind) {
	        case _util.ImageKind.GRAYSCALE_1BPP:
	          colorType = 0;
	          bitDepth = 1;
	          lineSize = width + 7 >> 3;
	          break;
	        case _util.ImageKind.RGB_24BPP:
	          colorType = 2;
	          bitDepth = 8;
	          lineSize = width * 3;
	          break;
	        case _util.ImageKind.RGBA_32BPP:
	          colorType = 6;
	          bitDepth = 8;
	          lineSize = width * 4;
	          break;
	        default:
	          throw new Error('invalid format');
	      }
	      var literals = new Uint8Array((1 + lineSize) * height);
	      var offsetLiterals = 0,
	          offsetBytes = 0;
	      var y, i;
	      for (y = 0; y < height; ++y) {
	        literals[offsetLiterals++] = 0;
	        literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
	        offsetBytes += lineSize;
	        offsetLiterals += lineSize;
	      }
	      if (kind === _util.ImageKind.GRAYSCALE_1BPP) {
	        offsetLiterals = 0;
	        for (y = 0; y < height; y++) {
	          offsetLiterals++;
	          for (i = 0; i < lineSize; i++) {
	            literals[offsetLiterals++] ^= 0xFF;
	          }
	        }
	      }
	      var ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);
	      var idat = deflateSync(literals);
	      var pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
	      var data = new Uint8Array(pngLength);
	      var offset = 0;
	      data.set(PNG_HEADER, offset);
	      offset += PNG_HEADER.length;
	      writePngChunk('IHDR', ihdr, data, offset);
	      offset += CHUNK_WRAPPER_SIZE + ihdr.length;
	      writePngChunk('IDATA', idat, data, offset);
	      offset += CHUNK_WRAPPER_SIZE + idat.length;
	      writePngChunk('IEND', new Uint8Array(0), data, offset);
	      return (0, _util.createObjectURL)(data, 'image/png', forceDataSchema);
	    }
	    return function convertImgDataToPng(imgData, forceDataSchema) {
	      var kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;
	      return encode(imgData, kind, forceDataSchema);
	    };
	  }();
	  var SVGExtraState = function SVGExtraStateClosure() {
	    function SVGExtraState() {
	      this.fontSizeScale = 1;
	      this.fontWeight = SVG_DEFAULTS.fontWeight;
	      this.fontSize = 0;
	      this.textMatrix = _util.IDENTITY_MATRIX;
	      this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
	      this.leading = 0;
	      this.x = 0;
	      this.y = 0;
	      this.lineX = 0;
	      this.lineY = 0;
	      this.charSpacing = 0;
	      this.wordSpacing = 0;
	      this.textHScale = 1;
	      this.textRise = 0;
	      this.fillColor = SVG_DEFAULTS.fillColor;
	      this.strokeColor = '#000000';
	      this.fillAlpha = 1;
	      this.strokeAlpha = 1;
	      this.lineWidth = 1;
	      this.lineJoin = '';
	      this.lineCap = '';
	      this.miterLimit = 0;
	      this.dashArray = [];
	      this.dashPhase = 0;
	      this.dependencies = [];
	      this.activeClipUrl = null;
	      this.clipGroup = null;
	      this.maskId = '';
	    }
	    SVGExtraState.prototype = {
	      clone: function SVGExtraState_clone() {
	        return Object.create(this);
	      },
	      setCurrentPoint: function SVGExtraState_setCurrentPoint(x, y) {
	        this.x = x;
	        this.y = y;
	      }
	    };
	    return SVGExtraState;
	  }();
	  exports.SVGGraphics = SVGGraphics = function SVGGraphicsClosure() {
	    function opListToTree(opList) {
	      var opTree = [];
	      var tmp = [];
	      var opListLen = opList.length;
	      for (var x = 0; x < opListLen; x++) {
	        if (opList[x].fn === 'save') {
	          opTree.push({
	            'fnId': 92,
	            'fn': 'group',
	            'items': []
	          });
	          tmp.push(opTree);
	          opTree = opTree[opTree.length - 1].items;
	          continue;
	        }
	        if (opList[x].fn === 'restore') {
	          opTree = tmp.pop();
	        } else {
	          opTree.push(opList[x]);
	        }
	      }
	      return opTree;
	    }
	    function pf(value) {
	      if (Number.isInteger(value)) {
	        return value.toString();
	      }
	      var s = value.toFixed(10);
	      var i = s.length - 1;
	      if (s[i] !== '0') {
	        return s;
	      }
	      do {
	        i--;
	      } while (s[i] === '0');
	      return s.substr(0, s[i] === '.' ? i : i + 1);
	    }
	    function pm(m) {
	      if (m[4] === 0 && m[5] === 0) {
	        if (m[1] === 0 && m[2] === 0) {
	          if (m[0] === 1 && m[3] === 1) {
	            return '';
	          }
	          return 'scale(' + pf(m[0]) + ' ' + pf(m[3]) + ')';
	        }
	        if (m[0] === m[3] && m[1] === -m[2]) {
	          var a = Math.acos(m[0]) * 180 / Math.PI;
	          return 'rotate(' + pf(a) + ')';
	        }
	      } else {
	        if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
	          return 'translate(' + pf(m[4]) + ' ' + pf(m[5]) + ')';
	        }
	      }
	      return 'matrix(' + pf(m[0]) + ' ' + pf(m[1]) + ' ' + pf(m[2]) + ' ' + pf(m[3]) + ' ' + pf(m[4]) + ' ' + pf(m[5]) + ')';
	    }
	    function SVGGraphics(commonObjs, objs, forceDataSchema) {
	      this.svgFactory = new _dom_utils.DOMSVGFactory();
	      this.current = new SVGExtraState();
	      this.transformMatrix = _util.IDENTITY_MATRIX;
	      this.transformStack = [];
	      this.extraStack = [];
	      this.commonObjs = commonObjs;
	      this.objs = objs;
	      this.pendingClip = null;
	      this.pendingEOFill = false;
	      this.embedFonts = false;
	      this.embeddedFonts = Object.create(null);
	      this.cssStyle = null;
	      this.forceDataSchema = !!forceDataSchema;
	    }
	    var XML_NS = 'http://www.w3.org/XML/1998/namespace';
	    var XLINK_NS = 'http://www.w3.org/1999/xlink';
	    var LINE_CAP_STYLES = ['butt', 'round', 'square'];
	    var LINE_JOIN_STYLES = ['miter', 'round', 'bevel'];
	    var clipCount = 0;
	    var maskCount = 0;
	    SVGGraphics.prototype = {
	      save: function SVGGraphics_save() {
	        this.transformStack.push(this.transformMatrix);
	        var old = this.current;
	        this.extraStack.push(old);
	        this.current = old.clone();
	      },
	      restore: function SVGGraphics_restore() {
	        this.transformMatrix = this.transformStack.pop();
	        this.current = this.extraStack.pop();
	        this.pendingClip = null;
	        this.tgrp = null;
	      },
	      group: function SVGGraphics_group(items) {
	        this.save();
	        this.executeOpTree(items);
	        this.restore();
	      },
	      loadDependencies: function SVGGraphics_loadDependencies(operatorList) {
	        var _this = this;

	        var fnArray = operatorList.fnArray;
	        var fnArrayLen = fnArray.length;
	        var argsArray = operatorList.argsArray;
	        for (var i = 0; i < fnArrayLen; i++) {
	          if (_util.OPS.dependency === fnArray[i]) {
	            var deps = argsArray[i];
	            for (var n = 0, nn = deps.length; n < nn; n++) {
	              var obj = deps[n];
	              var common = obj.substring(0, 2) === 'g_';
	              var promise;
	              if (common) {
	                promise = new Promise(function (resolve) {
	                  _this.commonObjs.get(obj, resolve);
	                });
	              } else {
	                promise = new Promise(function (resolve) {
	                  _this.objs.get(obj, resolve);
	                });
	              }
	              this.current.dependencies.push(promise);
	            }
	          }
	        }
	        return Promise.all(this.current.dependencies);
	      },
	      transform: function SVGGraphics_transform(a, b, c, d, e, f) {
	        var transformMatrix = [a, b, c, d, e, f];
	        this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);
	        this.tgrp = null;
	      },
	      getSVG: function SVGGraphics_getSVG(operatorList, viewport) {
	        var _this2 = this;

	        this.viewport = viewport;
	        var svgElement = this._initialize(viewport);
	        return this.loadDependencies(operatorList).then(function () {
	          _this2.transformMatrix = _util.IDENTITY_MATRIX;
	          var opTree = _this2.convertOpList(operatorList);
	          _this2.executeOpTree(opTree);
	          return svgElement;
	        });
	      },
	      convertOpList: function SVGGraphics_convertOpList(operatorList) {
	        var argsArray = operatorList.argsArray;
	        var fnArray = operatorList.fnArray;
	        var fnArrayLen = fnArray.length;
	        var REVOPS = [];
	        var opList = [];
	        for (var op in _util.OPS) {
	          REVOPS[_util.OPS[op]] = op;
	        }
	        for (var x = 0; x < fnArrayLen; x++) {
	          var fnId = fnArray[x];
	          opList.push({
	            'fnId': fnId,
	            'fn': REVOPS[fnId],
	            'args': argsArray[x]
	          });
	        }
	        return opListToTree(opList);
	      },
	      executeOpTree: function SVGGraphics_executeOpTree(opTree) {
	        var opTreeLen = opTree.length;
	        for (var x = 0; x < opTreeLen; x++) {
	          var fn = opTree[x].fn;
	          var fnId = opTree[x].fnId;
	          var args = opTree[x].args;
	          switch (fnId | 0) {
	            case _util.OPS.beginText:
	              this.beginText();
	              break;
	            case _util.OPS.setLeading:
	              this.setLeading(args);
	              break;
	            case _util.OPS.setLeadingMoveText:
	              this.setLeadingMoveText(args[0], args[1]);
	              break;
	            case _util.OPS.setFont:
	              this.setFont(args);
	              break;
	            case _util.OPS.showText:
	              this.showText(args[0]);
	              break;
	            case _util.OPS.showSpacedText:
	              this.showText(args[0]);
	              break;
	            case _util.OPS.endText:
	              this.endText();
	              break;
	            case _util.OPS.moveText:
	              this.moveText(args[0], args[1]);
	              break;
	            case _util.OPS.setCharSpacing:
	              this.setCharSpacing(args[0]);
	              break;
	            case _util.OPS.setWordSpacing:
	              this.setWordSpacing(args[0]);
	              break;
	            case _util.OPS.setHScale:
	              this.setHScale(args[0]);
	              break;
	            case _util.OPS.setTextMatrix:
	              this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
	              break;
	            case _util.OPS.setTextRise:
	              this.setTextRise(args[0]);
	              break;
	            case _util.OPS.setLineWidth:
	              this.setLineWidth(args[0]);
	              break;
	            case _util.OPS.setLineJoin:
	              this.setLineJoin(args[0]);
	              break;
	            case _util.OPS.setLineCap:
	              this.setLineCap(args[0]);
	              break;
	            case _util.OPS.setMiterLimit:
	              this.setMiterLimit(args[0]);
	              break;
	            case _util.OPS.setFillRGBColor:
	              this.setFillRGBColor(args[0], args[1], args[2]);
	              break;
	            case _util.OPS.setStrokeRGBColor:
	              this.setStrokeRGBColor(args[0], args[1], args[2]);
	              break;
	            case _util.OPS.setDash:
	              this.setDash(args[0], args[1]);
	              break;
	            case _util.OPS.setGState:
	              this.setGState(args[0]);
	              break;
	            case _util.OPS.fill:
	              this.fill();
	              break;
	            case _util.OPS.eoFill:
	              this.eoFill();
	              break;
	            case _util.OPS.stroke:
	              this.stroke();
	              break;
	            case _util.OPS.fillStroke:
	              this.fillStroke();
	              break;
	            case _util.OPS.eoFillStroke:
	              this.eoFillStroke();
	              break;
	            case _util.OPS.clip:
	              this.clip('nonzero');
	              break;
	            case _util.OPS.eoClip:
	              this.clip('evenodd');
	              break;
	            case _util.OPS.paintSolidColorImageMask:
	              this.paintSolidColorImageMask();
	              break;
	            case _util.OPS.paintJpegXObject:
	              this.paintJpegXObject(args[0], args[1], args[2]);
	              break;
	            case _util.OPS.paintImageXObject:
	              this.paintImageXObject(args[0]);
	              break;
	            case _util.OPS.paintInlineImageXObject:
	              this.paintInlineImageXObject(args[0]);
	              break;
	            case _util.OPS.paintImageMaskXObject:
	              this.paintImageMaskXObject(args[0]);
	              break;
	            case _util.OPS.paintFormXObjectBegin:
	              this.paintFormXObjectBegin(args[0], args[1]);
	              break;
	            case _util.OPS.paintFormXObjectEnd:
	              this.paintFormXObjectEnd();
	              break;
	            case _util.OPS.closePath:
	              this.closePath();
	              break;
	            case _util.OPS.closeStroke:
	              this.closeStroke();
	              break;
	            case _util.OPS.closeFillStroke:
	              this.closeFillStroke();
	              break;
	            case _util.OPS.nextLine:
	              this.nextLine();
	              break;
	            case _util.OPS.transform:
	              this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
	              break;
	            case _util.OPS.constructPath:
	              this.constructPath(args[0], args[1]);
	              break;
	            case _util.OPS.endPath:
	              this.endPath();
	              break;
	            case 92:
	              this.group(opTree[x].items);
	              break;
	            default:
	              (0, _util.warn)('Unimplemented operator ' + fn);
	              break;
	          }
	        }
	      },
	      setWordSpacing: function SVGGraphics_setWordSpacing(wordSpacing) {
	        this.current.wordSpacing = wordSpacing;
	      },
	      setCharSpacing: function SVGGraphics_setCharSpacing(charSpacing) {
	        this.current.charSpacing = charSpacing;
	      },
	      nextLine: function SVGGraphics_nextLine() {
	        this.moveText(0, this.current.leading);
	      },
	      setTextMatrix: function SVGGraphics_setTextMatrix(a, b, c, d, e, f) {
	        var current = this.current;
	        this.current.textMatrix = this.current.lineMatrix = [a, b, c, d, e, f];
	        this.current.x = this.current.lineX = 0;
	        this.current.y = this.current.lineY = 0;
	        current.xcoords = [];
	        current.tspan = this.svgFactory.createElement('svg:tspan');
	        current.tspan.setAttributeNS(null, 'font-family', current.fontFamily);
	        current.tspan.setAttributeNS(null, 'font-size', pf(current.fontSize) + 'px');
	        current.tspan.setAttributeNS(null, 'y', pf(-current.y));
	        current.txtElement = this.svgFactory.createElement('svg:text');
	        current.txtElement.appendChild(current.tspan);
	      },
	      beginText: function SVGGraphics_beginText() {
	        this.current.x = this.current.lineX = 0;
	        this.current.y = this.current.lineY = 0;
	        this.current.textMatrix = _util.IDENTITY_MATRIX;
	        this.current.lineMatrix = _util.IDENTITY_MATRIX;
	        this.current.tspan = this.svgFactory.createElement('svg:tspan');
	        this.current.txtElement = this.svgFactory.createElement('svg:text');
	        this.current.txtgrp = this.svgFactory.createElement('svg:g');
	        this.current.xcoords = [];
	      },
	      moveText: function SVGGraphics_moveText(x, y) {
	        var current = this.current;
	        this.current.x = this.current.lineX += x;
	        this.current.y = this.current.lineY += y;
	        current.xcoords = [];
	        current.tspan = this.svgFactory.createElement('svg:tspan');
	        current.tspan.setAttributeNS(null, 'font-family', current.fontFamily);
	        current.tspan.setAttributeNS(null, 'font-size', pf(current.fontSize) + 'px');
	        current.tspan.setAttributeNS(null, 'y', pf(-current.y));
	      },
	      showText: function SVGGraphics_showText(glyphs) {
	        var current = this.current;
	        var font = current.font;
	        var fontSize = current.fontSize;
	        if (fontSize === 0) {
	          return;
	        }
	        var charSpacing = current.charSpacing;
	        var wordSpacing = current.wordSpacing;
	        var fontDirection = current.fontDirection;
	        var textHScale = current.textHScale * fontDirection;
	        var glyphsLength = glyphs.length;
	        var vertical = font.vertical;
	        var widthAdvanceScale = fontSize * current.fontMatrix[0];
	        var x = 0,
	            i;
	        for (i = 0; i < glyphsLength; ++i) {
	          var glyph = glyphs[i];
	          if (glyph === null) {
	            x += fontDirection * wordSpacing;
	            continue;
	          } else if ((0, _util.isNum)(glyph)) {
	            x += -glyph * fontSize * 0.001;
	            continue;
	          }
	          var width = glyph.width;
	          var character = glyph.fontChar;
	          var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
	          var charWidth = width * widthAdvanceScale + spacing * fontDirection;
	          if (!glyph.isInFont && !font.missingFile) {
	            x += charWidth;
	            continue;
	          }
	          current.xcoords.push(current.x + x * textHScale);
	          current.tspan.textContent += character;
	          x += charWidth;
	        }
	        if (vertical) {
	          current.y -= x * textHScale;
	        } else {
	          current.x += x * textHScale;
	        }
	        current.tspan.setAttributeNS(null, 'x', current.xcoords.map(pf).join(' '));
	        current.tspan.setAttributeNS(null, 'y', pf(-current.y));
	        current.tspan.setAttributeNS(null, 'font-family', current.fontFamily);
	        current.tspan.setAttributeNS(null, 'font-size', pf(current.fontSize) + 'px');
	        if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
	          current.tspan.setAttributeNS(null, 'font-style', current.fontStyle);
	        }
	        if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
	          current.tspan.setAttributeNS(null, 'font-weight', current.fontWeight);
	        }
	        if (current.fillColor !== SVG_DEFAULTS.fillColor) {
	          current.tspan.setAttributeNS(null, 'fill', current.fillColor);
	        }
	        var textMatrix = current.textMatrix;
	        if (current.textRise !== 0) {
	          textMatrix = textMatrix.slice();
	          textMatrix[5] += current.textRise;
	        }
	        current.txtElement.setAttributeNS(null, 'transform', pm(textMatrix) + ' scale(1, -1)');
	        current.txtElement.setAttributeNS(XML_NS, 'xml:space', 'preserve');
	        current.txtElement.appendChild(current.tspan);
	        current.txtgrp.appendChild(current.txtElement);
	        this._ensureTransformGroup().appendChild(current.txtElement);
	      },
	      setLeadingMoveText: function SVGGraphics_setLeadingMoveText(x, y) {
	        this.setLeading(-y);
	        this.moveText(x, y);
	      },
	      addFontStyle: function SVGGraphics_addFontStyle(fontObj) {
	        if (!this.cssStyle) {
	          this.cssStyle = this.svgFactory.createElement('svg:style');
	          this.cssStyle.setAttributeNS(null, 'type', 'text/css');
	          this.defs.appendChild(this.cssStyle);
	        }
	        var url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);
	        this.cssStyle.textContent += '@font-face { font-family: "' + fontObj.loadedName + '";' + ' src: url(' + url + '); }\n';
	      },
	      setFont: function SVGGraphics_setFont(details) {
	        var current = this.current;
	        var fontObj = this.commonObjs.get(details[0]);
	        var size = details[1];
	        this.current.font = fontObj;
	        if (this.embedFonts && fontObj.data && !this.embeddedFonts[fontObj.loadedName]) {
	          this.addFontStyle(fontObj);
	          this.embeddedFonts[fontObj.loadedName] = fontObj;
	        }
	        current.fontMatrix = fontObj.fontMatrix ? fontObj.fontMatrix : _util.FONT_IDENTITY_MATRIX;
	        var bold = fontObj.black ? fontObj.bold ? 'bolder' : 'bold' : fontObj.bold ? 'bold' : 'normal';
	        var italic = fontObj.italic ? 'italic' : 'normal';
	        if (size < 0) {
	          size = -size;
	          current.fontDirection = -1;
	        } else {
	          current.fontDirection = 1;
	        }
	        current.fontSize = size;
	        current.fontFamily = fontObj.loadedName;
	        current.fontWeight = bold;
	        current.fontStyle = italic;
	        current.tspan = this.svgFactory.createElement('svg:tspan');
	        current.tspan.setAttributeNS(null, 'y', pf(-current.y));
	        current.xcoords = [];
	      },
	      endText: function SVGGraphics_endText() {},
	      setLineWidth: function SVGGraphics_setLineWidth(width) {
	        this.current.lineWidth = width;
	      },
	      setLineCap: function SVGGraphics_setLineCap(style) {
	        this.current.lineCap = LINE_CAP_STYLES[style];
	      },
	      setLineJoin: function SVGGraphics_setLineJoin(style) {
	        this.current.lineJoin = LINE_JOIN_STYLES[style];
	      },
	      setMiterLimit: function SVGGraphics_setMiterLimit(limit) {
	        this.current.miterLimit = limit;
	      },
	      setStrokeAlpha: function SVGGraphics_setStrokeAlpha(strokeAlpha) {
	        this.current.strokeAlpha = strokeAlpha;
	      },
	      setStrokeRGBColor: function SVGGraphics_setStrokeRGBColor(r, g, b) {
	        var color = _util.Util.makeCssRgb(r, g, b);
	        this.current.strokeColor = color;
	      },
	      setFillAlpha: function SVGGraphics_setFillAlpha(fillAlpha) {
	        this.current.fillAlpha = fillAlpha;
	      },
	      setFillRGBColor: function SVGGraphics_setFillRGBColor(r, g, b) {
	        var color = _util.Util.makeCssRgb(r, g, b);
	        this.current.fillColor = color;
	        this.current.tspan = this.svgFactory.createElement('svg:tspan');
	        this.current.xcoords = [];
	      },
	      setDash: function SVGGraphics_setDash(dashArray, dashPhase) {
	        this.current.dashArray = dashArray;
	        this.current.dashPhase = dashPhase;
	      },
	      constructPath: function SVGGraphics_constructPath(ops, args) {
	        var current = this.current;
	        var x = current.x,
	            y = current.y;
	        current.path = this.svgFactory.createElement('svg:path');
	        var d = [];
	        var opLength = ops.length;
	        for (var i = 0, j = 0; i < opLength; i++) {
	          switch (ops[i] | 0) {
	            case _util.OPS.rectangle:
	              x = args[j++];
	              y = args[j++];
	              var width = args[j++];
	              var height = args[j++];
	              var xw = x + width;
	              var yh = y + height;
	              d.push('M', pf(x), pf(y), 'L', pf(xw), pf(y), 'L', pf(xw), pf(yh), 'L', pf(x), pf(yh), 'Z');
	              break;
	            case _util.OPS.moveTo:
	              x = args[j++];
	              y = args[j++];
	              d.push('M', pf(x), pf(y));
	              break;
	            case _util.OPS.lineTo:
	              x = args[j++];
	              y = args[j++];
	              d.push('L', pf(x), pf(y));
	              break;
	            case _util.OPS.curveTo:
	              x = args[j + 4];
	              y = args[j + 5];
	              d.push('C', pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
	              j += 6;
	              break;
	            case _util.OPS.curveTo2:
	              x = args[j + 2];
	              y = args[j + 3];
	              d.push('C', pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
	              j += 4;
	              break;
	            case _util.OPS.curveTo3:
	              x = args[j + 2];
	              y = args[j + 3];
	              d.push('C', pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
	              j += 4;
	              break;
	            case _util.OPS.closePath:
	              d.push('Z');
	              break;
	          }
	        }
	        current.path.setAttributeNS(null, 'd', d.join(' '));
	        current.path.setAttributeNS(null, 'fill', 'none');
	        this._ensureTransformGroup().appendChild(current.path);
	        current.element = current.path;
	        current.setCurrentPoint(x, y);
	      },
	      endPath: function SVGGraphics_endPath() {
	        if (!this.pendingClip) {
	          return;
	        }
	        var current = this.current;
	        var clipId = 'clippath' + clipCount;
	        clipCount++;
	        var clipPath = this.svgFactory.createElement('svg:clipPath');
	        clipPath.setAttributeNS(null, 'id', clipId);
	        clipPath.setAttributeNS(null, 'transform', pm(this.transformMatrix));
	        var clipElement = current.element.cloneNode();
	        if (this.pendingClip === 'evenodd') {
	          clipElement.setAttributeNS(null, 'clip-rule', 'evenodd');
	        } else {
	          clipElement.setAttributeNS(null, 'clip-rule', 'nonzero');
	        }
	        this.pendingClip = null;
	        clipPath.appendChild(clipElement);
	        this.defs.appendChild(clipPath);
	        if (current.activeClipUrl) {
	          current.clipGroup = null;
	          this.extraStack.forEach(function (prev) {
	            prev.clipGroup = null;
	          });
	        }
	        current.activeClipUrl = 'url(#' + clipId + ')';
	        this.tgrp = null;
	      },
	      clip: function SVGGraphics_clip(type) {
	        this.pendingClip = type;
	      },
	      closePath: function SVGGraphics_closePath() {
	        var current = this.current;
	        var d = current.path.getAttributeNS(null, 'd');
	        d += 'Z';
	        current.path.setAttributeNS(null, 'd', d);
	      },
	      setLeading: function SVGGraphics_setLeading(leading) {
	        this.current.leading = -leading;
	      },
	      setTextRise: function SVGGraphics_setTextRise(textRise) {
	        this.current.textRise = textRise;
	      },
	      setHScale: function SVGGraphics_setHScale(scale) {
	        this.current.textHScale = scale / 100;
	      },
	      setGState: function SVGGraphics_setGState(states) {
	        for (var i = 0, ii = states.length; i < ii; i++) {
	          var state = states[i];
	          var key = state[0];
	          var value = state[1];
	          switch (key) {
	            case 'LW':
	              this.setLineWidth(value);
	              break;
	            case 'LC':
	              this.setLineCap(value);
	              break;
	            case 'LJ':
	              this.setLineJoin(value);
	              break;
	            case 'ML':
	              this.setMiterLimit(value);
	              break;
	            case 'D':
	              this.setDash(value[0], value[1]);
	              break;
	            case 'Font':
	              this.setFont(value);
	              break;
	            case 'CA':
	              this.setStrokeAlpha(value);
	              break;
	            case 'ca':
	              this.setFillAlpha(value);
	              break;
	            default:
	              (0, _util.warn)('Unimplemented graphic state ' + key);
	              break;
	          }
	        }
	      },
	      fill: function SVGGraphics_fill() {
	        var current = this.current;
	        current.element.setAttributeNS(null, 'fill', current.fillColor);
	        current.element.setAttributeNS(null, 'fill-opacity', current.fillAlpha);
	      },
	      stroke: function SVGGraphics_stroke() {
	        var current = this.current;
	        current.element.setAttributeNS(null, 'stroke', current.strokeColor);
	        current.element.setAttributeNS(null, 'stroke-opacity', current.strokeAlpha);
	        current.element.setAttributeNS(null, 'stroke-miterlimit', pf(current.miterLimit));
	        current.element.setAttributeNS(null, 'stroke-linecap', current.lineCap);
	        current.element.setAttributeNS(null, 'stroke-linejoin', current.lineJoin);
	        current.element.setAttributeNS(null, 'stroke-width', pf(current.lineWidth) + 'px');
	        current.element.setAttributeNS(null, 'stroke-dasharray', current.dashArray.map(pf).join(' '));
	        current.element.setAttributeNS(null, 'stroke-dashoffset', pf(current.dashPhase) + 'px');
	        current.element.setAttributeNS(null, 'fill', 'none');
	      },
	      eoFill: function SVGGraphics_eoFill() {
	        this.current.element.setAttributeNS(null, 'fill-rule', 'evenodd');
	        this.fill();
	      },
	      fillStroke: function SVGGraphics_fillStroke() {
	        this.stroke();
	        this.fill();
	      },
	      eoFillStroke: function SVGGraphics_eoFillStroke() {
	        this.current.element.setAttributeNS(null, 'fill-rule', 'evenodd');
	        this.fillStroke();
	      },
	      closeStroke: function SVGGraphics_closeStroke() {
	        this.closePath();
	        this.stroke();
	      },
	      closeFillStroke: function SVGGraphics_closeFillStroke() {
	        this.closePath();
	        this.fillStroke();
	      },
	      paintSolidColorImageMask: function SVGGraphics_paintSolidColorImageMask() {
	        var current = this.current;
	        var rect = this.svgFactory.createElement('svg:rect');
	        rect.setAttributeNS(null, 'x', '0');
	        rect.setAttributeNS(null, 'y', '0');
	        rect.setAttributeNS(null, 'width', '1px');
	        rect.setAttributeNS(null, 'height', '1px');
	        rect.setAttributeNS(null, 'fill', current.fillColor);
	        this._ensureTransformGroup().appendChild(rect);
	      },
	      paintJpegXObject: function SVGGraphics_paintJpegXObject(objId, w, h) {
	        var imgObj = this.objs.get(objId);
	        var imgEl = this.svgFactory.createElement('svg:image');
	        imgEl.setAttributeNS(XLINK_NS, 'xlink:href', imgObj.src);
	        imgEl.setAttributeNS(null, 'width', pf(w));
	        imgEl.setAttributeNS(null, 'height', pf(h));
	        imgEl.setAttributeNS(null, 'x', '0');
	        imgEl.setAttributeNS(null, 'y', pf(-h));
	        imgEl.setAttributeNS(null, 'transform', 'scale(' + pf(1 / w) + ' ' + pf(-1 / h) + ')');
	        this._ensureTransformGroup().appendChild(imgEl);
	      },
	      paintImageXObject: function SVGGraphics_paintImageXObject(objId) {
	        var imgData = this.objs.get(objId);
	        if (!imgData) {
	          (0, _util.warn)('Dependent image isn\'t ready yet');
	          return;
	        }
	        this.paintInlineImageXObject(imgData);
	      },
	      paintInlineImageXObject: function SVGGraphics_paintInlineImageXObject(imgData, mask) {
	        var width = imgData.width;
	        var height = imgData.height;
	        var imgSrc = convertImgDataToPng(imgData, this.forceDataSchema);
	        var cliprect = this.svgFactory.createElement('svg:rect');
	        cliprect.setAttributeNS(null, 'x', '0');
	        cliprect.setAttributeNS(null, 'y', '0');
	        cliprect.setAttributeNS(null, 'width', pf(width));
	        cliprect.setAttributeNS(null, 'height', pf(height));
	        this.current.element = cliprect;
	        this.clip('nonzero');
	        var imgEl = this.svgFactory.createElement('svg:image');
	        imgEl.setAttributeNS(XLINK_NS, 'xlink:href', imgSrc);
	        imgEl.setAttributeNS(null, 'x', '0');
	        imgEl.setAttributeNS(null, 'y', pf(-height));
	        imgEl.setAttributeNS(null, 'width', pf(width) + 'px');
	        imgEl.setAttributeNS(null, 'height', pf(height) + 'px');
	        imgEl.setAttributeNS(null, 'transform', 'scale(' + pf(1 / width) + ' ' + pf(-1 / height) + ')');
	        if (mask) {
	          mask.appendChild(imgEl);
	        } else {
	          this._ensureTransformGroup().appendChild(imgEl);
	        }
	      },
	      paintImageMaskXObject: function SVGGraphics_paintImageMaskXObject(imgData) {
	        var current = this.current;
	        var width = imgData.width;
	        var height = imgData.height;
	        var fillColor = current.fillColor;
	        current.maskId = 'mask' + maskCount++;
	        var mask = this.svgFactory.createElement('svg:mask');
	        mask.setAttributeNS(null, 'id', current.maskId);
	        var rect = this.svgFactory.createElement('svg:rect');
	        rect.setAttributeNS(null, 'x', '0');
	        rect.setAttributeNS(null, 'y', '0');
	        rect.setAttributeNS(null, 'width', pf(width));
	        rect.setAttributeNS(null, 'height', pf(height));
	        rect.setAttributeNS(null, 'fill', fillColor);
	        rect.setAttributeNS(null, 'mask', 'url(#' + current.maskId + ')');
	        this.defs.appendChild(mask);
	        this._ensureTransformGroup().appendChild(rect);
	        this.paintInlineImageXObject(imgData, mask);
	      },
	      paintFormXObjectBegin: function SVGGraphics_paintFormXObjectBegin(matrix, bbox) {
	        if (Array.isArray(matrix) && matrix.length === 6) {
	          this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
	        }
	        if (Array.isArray(bbox) && bbox.length === 4) {
	          var width = bbox[2] - bbox[0];
	          var height = bbox[3] - bbox[1];
	          var cliprect = this.svgFactory.createElement('svg:rect');
	          cliprect.setAttributeNS(null, 'x', bbox[0]);
	          cliprect.setAttributeNS(null, 'y', bbox[1]);
	          cliprect.setAttributeNS(null, 'width', pf(width));
	          cliprect.setAttributeNS(null, 'height', pf(height));
	          this.current.element = cliprect;
	          this.clip('nonzero');
	          this.endPath();
	        }
	      },
	      paintFormXObjectEnd: function SVGGraphics_paintFormXObjectEnd() {},
	      _initialize: function _initialize(viewport) {
	        var svg = this.svgFactory.create(viewport.width, viewport.height);
	        var definitions = this.svgFactory.createElement('svg:defs');
	        svg.appendChild(definitions);
	        this.defs = definitions;
	        var rootGroup = this.svgFactory.createElement('svg:g');
	        rootGroup.setAttributeNS(null, 'transform', pm(viewport.transform));
	        svg.appendChild(rootGroup);
	        this.svg = rootGroup;
	        return svg;
	      },

	      _ensureClipGroup: function SVGGraphics_ensureClipGroup() {
	        if (!this.current.clipGroup) {
	          var clipGroup = this.svgFactory.createElement('svg:g');
	          clipGroup.setAttributeNS(null, 'clip-path', this.current.activeClipUrl);
	          this.svg.appendChild(clipGroup);
	          this.current.clipGroup = clipGroup;
	        }
	        return this.current.clipGroup;
	      },
	      _ensureTransformGroup: function SVGGraphics_ensureTransformGroup() {
	        if (!this.tgrp) {
	          this.tgrp = this.svgFactory.createElement('svg:g');
	          this.tgrp.setAttributeNS(null, 'transform', pm(this.transformMatrix));
	          if (this.current.activeClipUrl) {
	            this._ensureClipGroup().appendChild(this.tgrp);
	          } else {
	            this.svg.appendChild(this.tgrp);
	          }
	        }
	        return this.tgrp;
	      }
	    };
	    return SVGGraphics;
	  }();
	}
	exports.SVGGraphics = SVGGraphics;

	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var pdfjsVersion = '1.9.634';
	var pdfjsBuild = '509d3728';
	var pdfjsSharedUtil = __w_pdfjs_require__(0);
	var pdfjsDisplayGlobal = __w_pdfjs_require__(82);
	var pdfjsDisplayAPI = __w_pdfjs_require__(48);
	var pdfjsDisplayTextLayer = __w_pdfjs_require__(52);
	var pdfjsDisplayAnnotationLayer = __w_pdfjs_require__(51);
	var pdfjsDisplayDOMUtils = __w_pdfjs_require__(5);
	var pdfjsDisplaySVG = __w_pdfjs_require__(53);
	{
	  if (pdfjsSharedUtil.isNodeJS()) {
	    var PDFNodeStream = __w_pdfjs_require__(87).PDFNodeStream;
	    pdfjsDisplayAPI.setPDFNetworkStreamClass(PDFNodeStream);
	  } else if (typeof Response !== 'undefined' && 'body' in Response.prototype && typeof ReadableStream !== 'undefined') {
	    var PDFFetchStream = __w_pdfjs_require__(88).PDFFetchStream;
	    pdfjsDisplayAPI.setPDFNetworkStreamClass(PDFFetchStream);
	  } else {
	    var PDFNetworkStream = __w_pdfjs_require__(89).PDFNetworkStream;
	    pdfjsDisplayAPI.setPDFNetworkStreamClass(PDFNetworkStream);
	  }
	}
	exports.PDFJS = pdfjsDisplayGlobal.PDFJS;
	exports.build = pdfjsDisplayAPI.build;
	exports.version = pdfjsDisplayAPI.version;
	exports.getDocument = pdfjsDisplayAPI.getDocument;
	exports.LoopbackPort = pdfjsDisplayAPI.LoopbackPort;
	exports.PDFDataRangeTransport = pdfjsDisplayAPI.PDFDataRangeTransport;
	exports.PDFWorker = pdfjsDisplayAPI.PDFWorker;
	exports.renderTextLayer = pdfjsDisplayTextLayer.renderTextLayer;
	exports.AnnotationLayer = pdfjsDisplayAnnotationLayer.AnnotationLayer;
	exports.CustomStyle = pdfjsDisplayDOMUtils.CustomStyle;
	exports.createPromiseCapability = pdfjsSharedUtil.createPromiseCapability;
	exports.PasswordResponses = pdfjsSharedUtil.PasswordResponses;
	exports.InvalidPDFException = pdfjsSharedUtil.InvalidPDFException;
	exports.MissingPDFException = pdfjsSharedUtil.MissingPDFException;
	exports.SVGGraphics = pdfjsDisplaySVG.SVGGraphics;
	exports.NativeImageDecoding = pdfjsSharedUtil.NativeImageDecoding;
	exports.UnexpectedResponseException = pdfjsSharedUtil.UnexpectedResponseException;
	exports.OPS = pdfjsSharedUtil.OPS;
	exports.UNSUPPORTED_FEATURES = pdfjsSharedUtil.UNSUPPORTED_FEATURES;
	exports.isValidUrl = pdfjsDisplayDOMUtils.isValidUrl;
	exports.createValidAbsoluteUrl = pdfjsSharedUtil.createValidAbsoluteUrl;
	exports.createObjectURL = pdfjsSharedUtil.createObjectURL;
	exports.removeNullCharacters = pdfjsSharedUtil.removeNullCharacters;
	exports.shadow = pdfjsSharedUtil.shadow;
	exports.createBlob = pdfjsSharedUtil.createBlob;
	exports.RenderingCancelledException = pdfjsDisplayDOMUtils.RenderingCancelledException;
	exports.getFilenameFromUrl = pdfjsDisplayDOMUtils.getFilenameFromUrl;
	exports.addLinkAttributes = pdfjsDisplayDOMUtils.addLinkAttributes;
	exports.StatTimer = pdfjsSharedUtil.StatTimer;

	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	if (typeof PDFJS === 'undefined' || !PDFJS.compatibilityChecked) {
	  var globalScope = __w_pdfjs_require__(9);
	  var userAgent = typeof navigator !== 'undefined' && navigator.userAgent || '';
	  var isAndroid = /Android/.test(userAgent);
	  var isAndroidPre3 = /Android\s[0-2][^\d]/.test(userAgent);
	  var isAndroidPre5 = /Android\s[0-4][^\d]/.test(userAgent);
	  var isChrome = userAgent.indexOf('Chrom') >= 0;
	  var isChromeWithRangeBug = /Chrome\/(39|40)\./.test(userAgent);
	  var isIOSChrome = userAgent.indexOf('CriOS') >= 0;
	  var isIE = userAgent.indexOf('Trident') >= 0;
	  var isIOS = /\b(iPad|iPhone|iPod)(?=;)/.test(userAgent);
	  var isOpera = userAgent.indexOf('Opera') >= 0;
	  var isSafari = /Safari\//.test(userAgent) && !/(Chrome\/|Android\s)/.test(userAgent);
	  var hasDOM = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object';
	  if (typeof PDFJS === 'undefined') {
	    globalScope.PDFJS = {};
	  }
	  PDFJS.compatibilityChecked = true;
	  (function checkTypedArrayCompatibility() {
	    if (typeof Uint8ClampedArray === 'undefined') {
	      globalScope.Uint8ClampedArray = __w_pdfjs_require__(56);
	    }
	    if (typeof Uint8Array !== 'undefined') {
	      if (typeof Uint8Array.prototype.subarray === 'undefined') {
	        Uint8Array.prototype.subarray = function subarray(start, end) {
	          return new Uint8Array(this.slice(start, end));
	        };
	        Float32Array.prototype.subarray = function subarray(start, end) {
	          return new Float32Array(this.slice(start, end));
	        };
	      }
	      if (typeof Float64Array === 'undefined') {
	        globalScope.Float64Array = Float32Array;
	      }
	      return;
	    }
	    function subarray(start, end) {
	      return new TypedArray(this.slice(start, end));
	    }
	    function setArrayOffset(array, offset) {
	      if (arguments.length < 2) {
	        offset = 0;
	      }
	      for (var i = 0, n = array.length; i < n; ++i, ++offset) {
	        this[offset] = array[i] & 0xFF;
	      }
	    }
	    function Uint32ArrayView(buffer, length) {
	      this.buffer = buffer;
	      this.byteLength = buffer.length;
	      this.length = length;
	      ensureUint32ArrayViewProps(this.length);
	    }
	    Uint32ArrayView.prototype = Object.create(null);
	    var uint32ArrayViewSetters = 0;
	    function createUint32ArrayProp(index) {
	      return {
	        get: function get() {
	          var buffer = this.buffer,
	              offset = index << 2;
	          return (buffer[offset] | buffer[offset + 1] << 8 | buffer[offset + 2] << 16 | buffer[offset + 3] << 24) >>> 0;
	        },
	        set: function set(value) {
	          var buffer = this.buffer,
	              offset = index << 2;
	          buffer[offset] = value & 255;
	          buffer[offset + 1] = value >> 8 & 255;
	          buffer[offset + 2] = value >> 16 & 255;
	          buffer[offset + 3] = value >>> 24 & 255;
	        }
	      };
	    }
	    function ensureUint32ArrayViewProps(length) {
	      while (uint32ArrayViewSetters < length) {
	        Object.defineProperty(Uint32ArrayView.prototype, uint32ArrayViewSetters, createUint32ArrayProp(uint32ArrayViewSetters));
	        uint32ArrayViewSetters++;
	      }
	    }
	    function TypedArray(arg1) {
	      var result, i, n;
	      if (typeof arg1 === 'number') {
	        result = [];
	        for (i = 0; i < arg1; ++i) {
	          result[i] = 0;
	        }
	      } else if ('slice' in arg1) {
	        result = arg1.slice(0);
	      } else {
	        result = [];
	        for (i = 0, n = arg1.length; i < n; ++i) {
	          result[i] = arg1[i];
	        }
	      }
	      result.subarray = subarray;
	      result.buffer = result;
	      result.byteLength = result.length;
	      result.set = setArrayOffset;
	      if ((typeof arg1 === 'undefined' ? 'undefined' : _typeof(arg1)) === 'object' && arg1.buffer) {
	        result.buffer = arg1.buffer;
	      }
	      return result;
	    }
	    globalScope.Uint8Array = TypedArray;
	    globalScope.Int8Array = TypedArray;
	    globalScope.Int32Array = TypedArray;
	    globalScope.Uint16Array = TypedArray;
	    globalScope.Float32Array = TypedArray;
	    globalScope.Float64Array = TypedArray;
	    globalScope.Uint32Array = function () {
	      if (arguments.length === 3) {
	        if (arguments[1] !== 0) {
	          throw new Error('offset !== 0 is not supported');
	        }
	        return new Uint32ArrayView(arguments[0], arguments[2]);
	      }
	      return TypedArray.apply(this, arguments);
	    };
	  })();
	  (function canvasPixelArrayBuffer() {
	    if (!hasDOM || !window.CanvasPixelArray) {
	      return;
	    }
	    var cpaProto = window.CanvasPixelArray.prototype;
	    if ('buffer' in cpaProto) {
	      return;
	    }
	    Object.defineProperty(cpaProto, 'buffer', {
	      get: function get() {
	        return this;
	      },

	      enumerable: false,
	      configurable: true
	    });
	    Object.defineProperty(cpaProto, 'byteLength', {
	      get: function get() {
	        return this.length;
	      },

	      enumerable: false,
	      configurable: true
	    });
	  })();
	  (function normalizeURLObject() {
	    if (!globalScope.URL) {
	      globalScope.URL = globalScope.webkitURL;
	    }
	  })();
	  (function checkObjectDefinePropertyCompatibility() {
	    if (typeof Object.defineProperty !== 'undefined') {
	      var definePropertyPossible = true;
	      try {
	        if (hasDOM) {
	          Object.defineProperty(new Image(), 'id', { value: 'test' });
	        }
	        var Test = function Test() {};
	        Test.prototype = {
	          get id() {}
	        };
	        Object.defineProperty(new Test(), 'id', {
	          value: '',
	          configurable: true,
	          enumerable: true,
	          writable: false
	        });
	      } catch (e) {
	        definePropertyPossible = false;
	      }
	      if (definePropertyPossible) {
	        return;
	      }
	    }
	    Object.defineProperty = function objectDefineProperty(obj, name, def) {
	      delete obj[name];
	      if ('get' in def) {
	        obj.__defineGetter__(name, def['get']);
	      }
	      if ('set' in def) {
	        obj.__defineSetter__(name, def['set']);
	      }
	      if ('value' in def) {
	        obj.__defineSetter__(name, function objectDefinePropertySetter(value) {
	          this.__defineGetter__(name, function objectDefinePropertyGetter() {
	            return value;
	          });
	          return value;
	        });
	        obj[name] = def.value;
	      }
	    };
	  })();
	  (function checkXMLHttpRequestResponseCompatibility() {
	    if (typeof XMLHttpRequest === 'undefined') {
	      return;
	    }
	    var xhrPrototype = XMLHttpRequest.prototype;
	    var xhr = new XMLHttpRequest();
	    if (!('overrideMimeType' in xhr)) {
	      Object.defineProperty(xhrPrototype, 'overrideMimeType', {
	        value: function xmlHttpRequestOverrideMimeType(mimeType) {}
	      });
	    }
	    if ('responseType' in xhr) {
	      return;
	    }
	    Object.defineProperty(xhrPrototype, 'responseType', {
	      get: function xmlHttpRequestGetResponseType() {
	        return this._responseType || 'text';
	      },
	      set: function xmlHttpRequestSetResponseType(value) {
	        if (value === 'text' || value === 'arraybuffer') {
	          this._responseType = value;
	          if (value === 'arraybuffer' && typeof this.overrideMimeType === 'function') {
	            this.overrideMimeType('text/plain; charset=x-user-defined');
	          }
	        }
	      }
	    });
	    if (typeof VBArray !== 'undefined') {
	      Object.defineProperty(xhrPrototype, 'response', {
	        get: function xmlHttpRequestResponseGet() {
	          if (this.responseType === 'arraybuffer') {
	            return new Uint8Array(new VBArray(this.responseBody).toArray());
	          }
	          return this.responseText;
	        }
	      });
	      return;
	    }
	    Object.defineProperty(xhrPrototype, 'response', {
	      get: function xmlHttpRequestResponseGet() {
	        if (this.responseType !== 'arraybuffer') {
	          return this.responseText;
	        }
	        var text = this.responseText;
	        var i,
	            n = text.length;
	        var result = new Uint8Array(n);
	        for (i = 0; i < n; ++i) {
	          result[i] = text.charCodeAt(i) & 0xFF;
	        }
	        return result.buffer;
	      }
	    });
	  })();
	  (function checkWindowBtoaCompatibility() {
	    if ('btoa' in globalScope) {
	      return;
	    }
	    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	    globalScope.btoa = function (chars) {
	      var buffer = '';
	      var i, n;
	      for (i = 0, n = chars.length; i < n; i += 3) {
	        var b1 = chars.charCodeAt(i) & 0xFF;
	        var b2 = chars.charCodeAt(i + 1) & 0xFF;
	        var b3 = chars.charCodeAt(i + 2) & 0xFF;
	        var d1 = b1 >> 2,
	            d2 = (b1 & 3) << 4 | b2 >> 4;
	        var d3 = i + 1 < n ? (b2 & 0xF) << 2 | b3 >> 6 : 64;
	        var d4 = i + 2 < n ? b3 & 0x3F : 64;
	        buffer += digits.charAt(d1) + digits.charAt(d2) + digits.charAt(d3) + digits.charAt(d4);
	      }
	      return buffer;
	    };
	  })();
	  (function checkWindowAtobCompatibility() {
	    if ('atob' in globalScope) {
	      return;
	    }
	    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	    globalScope.atob = function (input) {
	      input = input.replace(/=+$/, '');
	      if (input.length % 4 === 1) {
	        throw new Error('bad atob input');
	      }
	      for (var bc = 0, bs, buffer, idx = 0, output = ''; buffer = input.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
	        buffer = digits.indexOf(buffer);
	      }
	      return output;
	    };
	  })();
	  (function checkFunctionPrototypeBindCompatibility() {
	    if (typeof Function.prototype.bind !== 'undefined') {
	      return;
	    }
	    Function.prototype.bind = function functionPrototypeBind(obj) {
	      var fn = this,
	          headArgs = Array.prototype.slice.call(arguments, 1);
	      var bound = function functionPrototypeBindBound() {
	        var args = headArgs.concat(Array.prototype.slice.call(arguments));
	        return fn.apply(obj, args);
	      };
	      return bound;
	    };
	  })();
	  (function checkDatasetProperty() {
	    if (!hasDOM) {
	      return;
	    }
	    var div = document.createElement('div');
	    if ('dataset' in div) {
	      return;
	    }
	    Object.defineProperty(HTMLElement.prototype, 'dataset', {
	      get: function get() {
	        if (this._dataset) {
	          return this._dataset;
	        }
	        var dataset = {};
	        for (var j = 0, jj = this.attributes.length; j < jj; j++) {
	          var attribute = this.attributes[j];
	          if (attribute.name.substring(0, 5) !== 'data-') {
	            continue;
	          }
	          var key = attribute.name.substring(5).replace(/\-([a-z])/g, function (all, ch) {
	            return ch.toUpperCase();
	          });
	          dataset[key] = attribute.value;
	        }
	        Object.defineProperty(this, '_dataset', {
	          value: dataset,
	          writable: false,
	          enumerable: false
	        });
	        return dataset;
	      },

	      enumerable: true
	    });
	  })();
	  (function checkClassListProperty() {
	    function changeList(element, itemName, add, remove) {
	      var s = element.className || '';
	      var list = s.split(/\s+/g);
	      if (list[0] === '') {
	        list.shift();
	      }
	      var index = list.indexOf(itemName);
	      if (index < 0 && add) {
	        list.push(itemName);
	      }
	      if (index >= 0 && remove) {
	        list.splice(index, 1);
	      }
	      element.className = list.join(' ');
	      return index >= 0;
	    }
	    if (!hasDOM) {
	      return;
	    }
	    var div = document.createElement('div');
	    if ('classList' in div) {
	      return;
	    }
	    var classListPrototype = {
	      add: function add(name) {
	        changeList(this.element, name, true, false);
	      },
	      contains: function contains(name) {
	        return changeList(this.element, name, false, false);
	      },
	      remove: function remove(name) {
	        changeList(this.element, name, false, true);
	      },
	      toggle: function toggle(name) {
	        changeList(this.element, name, true, true);
	      }
	    };
	    Object.defineProperty(HTMLElement.prototype, 'classList', {
	      get: function get() {
	        if (this._classList) {
	          return this._classList;
	        }
	        var classList = Object.create(classListPrototype, {
	          element: {
	            value: this,
	            writable: false,
	            enumerable: true
	          }
	        });
	        Object.defineProperty(this, '_classList', {
	          value: classList,
	          writable: false,
	          enumerable: false
	        });
	        return classList;
	      },

	      enumerable: true
	    });
	  })();
	  (function checkWorkerConsoleCompatibility() {
	    if (typeof importScripts === 'undefined' || 'console' in globalScope) {
	      return;
	    }
	    var consoleTimer = {};
	    var workerConsole = {
	      log: function log() {
	        var args = Array.prototype.slice.call(arguments);
	        globalScope.postMessage({
	          targetName: 'main',
	          action: 'console_log',
	          data: args
	        });
	      },
	      error: function error() {
	        var args = Array.prototype.slice.call(arguments);
	        globalScope.postMessage({
	          targetName: 'main',
	          action: 'console_error',
	          data: args
	        });
	      },
	      time: function time(name) {
	        consoleTimer[name] = Date.now();
	      },
	      timeEnd: function timeEnd(name) {
	        var time = consoleTimer[name];
	        if (!time) {
	          throw new Error('Unknown timer name ' + name);
	        }
	        this.log('Timer:', name, Date.now() - time);
	      }
	    };
	    globalScope.console = workerConsole;
	  })();
	  (function checkConsoleCompatibility() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!('console' in window)) {
	      window.console = {
	        log: function log() {},
	        error: function error() {},
	        warn: function warn() {}
	      };
	      return;
	    }
	    if (!('bind' in console.log)) {
	      console.log = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.log);
	      console.error = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.error);
	      console.warn = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.warn);
	      return;
	    }
	  })();
	  (function checkOnClickCompatibility() {
	    function ignoreIfTargetDisabled(event) {
	      if (isDisabled(event.target)) {
	        event.stopPropagation();
	      }
	    }
	    function isDisabled(node) {
	      return node.disabled || node.parentNode && isDisabled(node.parentNode);
	    }
	    if (isOpera) {
	      document.addEventListener('click', ignoreIfTargetDisabled, true);
	    }
	  })();
	  (function checkOnBlobSupport() {
	    if (isIE || isIOSChrome) {
	      PDFJS.disableCreateObjectURL = true;
	    }
	  })();
	  (function checkNavigatorLanguage() {
	    if (typeof navigator === 'undefined') {
	      return;
	    }
	    if ('language' in navigator) {
	      return;
	    }
	    PDFJS.locale = navigator.userLanguage || 'en-US';
	  })();
	  (function checkRangeRequests() {
	    if (isSafari || isAndroidPre3 || isChromeWithRangeBug || isIOS) {
	      PDFJS.disableRange = true;
	      PDFJS.disableStream = true;
	    }
	  })();
	  (function checkHistoryManipulation() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!history.pushState || isAndroidPre3) {
	      PDFJS.disableHistory = true;
	    }
	  })();
	  (function checkSetPresenceInImageData() {
	    if (!hasDOM) {
	      return;
	    }
	    if (window.CanvasPixelArray) {
	      if (typeof window.CanvasPixelArray.prototype.set !== 'function') {
	        window.CanvasPixelArray.prototype.set = function (arr) {
	          for (var i = 0, ii = this.length; i < ii; i++) {
	            this[i] = arr[i];
	          }
	        };
	      }
	    } else {
	      var polyfill = false,
	          versionMatch;
	      if (isChrome) {
	        versionMatch = userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
	        polyfill = versionMatch && parseInt(versionMatch[2]) < 21;
	      } else if (isAndroid) {
	        polyfill = isAndroidPre5;
	      } else if (isSafari) {
	        versionMatch = userAgent.match(/Version\/([0-9]+)\.([0-9]+)\.([0-9]+) Safari\//);
	        polyfill = versionMatch && parseInt(versionMatch[1]) < 6;
	      }
	      if (polyfill) {
	        var contextPrototype = window.CanvasRenderingContext2D.prototype;
	        var createImageData = contextPrototype.createImageData;
	        contextPrototype.createImageData = function (w, h) {
	          var imageData = createImageData.call(this, w, h);
	          imageData.data.set = function (arr) {
	            for (var i = 0, ii = this.length; i < ii; i++) {
	              this[i] = arr[i];
	            }
	          };
	          return imageData;
	        };
	        contextPrototype = null;
	      }
	    }
	  })();
	  (function checkRequestAnimationFrame() {
	    function installFakeAnimationFrameFunctions() {
	      window.requestAnimationFrame = function (callback) {
	        return window.setTimeout(callback, 20);
	      };
	      window.cancelAnimationFrame = function (timeoutID) {
	        window.clearTimeout(timeoutID);
	      };
	    }
	    if (!hasDOM) {
	      return;
	    }
	    if (isIOS) {
	      installFakeAnimationFrameFunctions();
	      return;
	    }
	    if ('requestAnimationFrame' in window) {
	      return;
	    }
	    window.requestAnimationFrame = window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame;
	    if (window.requestAnimationFrame) {
	      return;
	    }
	    installFakeAnimationFrameFunctions();
	  })();
	  (function checkCanvasSizeLimitation() {
	    if (isIOS || isAndroid) {
	      PDFJS.maxCanvasPixels = 5242880;
	    }
	  })();
	  (function checkFullscreenSupport() {
	    if (!hasDOM) {
	      return;
	    }
	    if (isIE && window.parent !== window) {
	      PDFJS.disableFullscreen = true;
	    }
	  })();
	  (function checkCurrentScript() {
	    if (!hasDOM) {
	      return;
	    }
	    if ('currentScript' in document) {
	      return;
	    }
	    Object.defineProperty(document, 'currentScript', {
	      get: function get() {
	        var scripts = document.getElementsByTagName('script');
	        return scripts[scripts.length - 1];
	      },

	      enumerable: true,
	      configurable: true
	    });
	  })();
	  (function checkInputTypeNumberAssign() {
	    if (!hasDOM) {
	      return;
	    }
	    var el = document.createElement('input');
	    try {
	      el.type = 'number';
	    } catch (ex) {
	      var inputProto = el.constructor.prototype;
	      var typeProperty = Object.getOwnPropertyDescriptor(inputProto, 'type');
	      Object.defineProperty(inputProto, 'type', {
	        get: function get() {
	          return typeProperty.get.call(this);
	        },
	        set: function set(value) {
	          typeProperty.set.call(this, value === 'number' ? 'text' : value);
	        },

	        enumerable: true,
	        configurable: true
	      });
	    }
	  })();
	  (function checkDocumentReadyState() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!document.attachEvent) {
	      return;
	    }
	    var documentProto = document.constructor.prototype;
	    var readyStateProto = Object.getOwnPropertyDescriptor(documentProto, 'readyState');
	    Object.defineProperty(documentProto, 'readyState', {
	      get: function get() {
	        var value = readyStateProto.get.call(this);
	        return value === 'interactive' ? 'loading' : value;
	      },
	      set: function set(value) {
	        readyStateProto.set.call(this, value);
	      },

	      enumerable: true,
	      configurable: true
	    });
	  })();
	  (function checkChildNodeRemove() {
	    if (!hasDOM) {
	      return;
	    }
	    if (typeof Element.prototype.remove !== 'undefined') {
	      return;
	    }
	    Element.prototype.remove = function () {
	      if (this.parentNode) {
	        this.parentNode.removeChild(this);
	      }
	    };
	  })();
	  (function checkNumberIsNaN() {
	    if (Number.isNaN) {
	      return;
	    }
	    Number.isNaN = function (value) {
	      return typeof value === 'number' && isNaN(value);
	    };
	  })();
	  (function checkNumberIsInteger() {
	    if (Number.isInteger) {
	      return;
	    }
	    Number.isInteger = function (value) {
	      return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
	    };
	  })();
	  (function checkPromise() {
	    if (globalScope.Promise) {
	      if (typeof globalScope.Promise.all !== 'function') {
	        globalScope.Promise.all = function (iterable) {
	          var count = 0,
	              results = [],
	              resolve,
	              reject;
	          var promise = new globalScope.Promise(function (resolve_, reject_) {
	            resolve = resolve_;
	            reject = reject_;
	          });
	          iterable.forEach(function (p, i) {
	            count++;
	            p.then(function (result) {
	              results[i] = result;
	              count--;
	              if (count === 0) {
	                resolve(results);
	              }
	            }, reject);
	          });
	          if (count === 0) {
	            resolve(results);
	          }
	          return promise;
	        };
	      }
	      if (typeof globalScope.Promise.resolve !== 'function') {
	        globalScope.Promise.resolve = function (value) {
	          return new globalScope.Promise(function (resolve) {
	            resolve(value);
	          });
	        };
	      }
	      if (typeof globalScope.Promise.reject !== 'function') {
	        globalScope.Promise.reject = function (reason) {
	          return new globalScope.Promise(function (resolve, reject) {
	            reject(reason);
	          });
	        };
	      }
	      if (typeof globalScope.Promise.prototype.catch !== 'function') {
	        globalScope.Promise.prototype.catch = function (onReject) {
	          return globalScope.Promise.prototype.then(undefined, onReject);
	        };
	      }
	      return;
	    }
	    var STATUS_PENDING = 0;
	    var STATUS_RESOLVED = 1;
	    var STATUS_REJECTED = 2;
	    var REJECTION_TIMEOUT = 500;
	    var HandlerManager = {
	      handlers: [],
	      running: false,
	      unhandledRejections: [],
	      pendingRejectionCheck: false,
	      scheduleHandlers: function scheduleHandlers(promise) {
	        if (promise._status === STATUS_PENDING) {
	          return;
	        }
	        this.handlers = this.handlers.concat(promise._handlers);
	        promise._handlers = [];
	        if (this.running) {
	          return;
	        }
	        this.running = true;
	        setTimeout(this.runHandlers.bind(this), 0);
	      },
	      runHandlers: function runHandlers() {
	        var RUN_TIMEOUT = 1;
	        var timeoutAt = Date.now() + RUN_TIMEOUT;
	        while (this.handlers.length > 0) {
	          var handler = this.handlers.shift();
	          var nextStatus = handler.thisPromise._status;
	          var nextValue = handler.thisPromise._value;
	          try {
	            if (nextStatus === STATUS_RESOLVED) {
	              if (typeof handler.onResolve === 'function') {
	                nextValue = handler.onResolve(nextValue);
	              }
	            } else if (typeof handler.onReject === 'function') {
	              nextValue = handler.onReject(nextValue);
	              nextStatus = STATUS_RESOLVED;
	              if (handler.thisPromise._unhandledRejection) {
	                this.removeUnhandeledRejection(handler.thisPromise);
	              }
	            }
	          } catch (ex) {
	            nextStatus = STATUS_REJECTED;
	            nextValue = ex;
	          }
	          handler.nextPromise._updateStatus(nextStatus, nextValue);
	          if (Date.now() >= timeoutAt) {
	            break;
	          }
	        }
	        if (this.handlers.length > 0) {
	          setTimeout(this.runHandlers.bind(this), 0);
	          return;
	        }
	        this.running = false;
	      },
	      addUnhandledRejection: function addUnhandledRejection(promise) {
	        this.unhandledRejections.push({
	          promise: promise,
	          time: Date.now()
	        });
	        this.scheduleRejectionCheck();
	      },
	      removeUnhandeledRejection: function removeUnhandeledRejection(promise) {
	        promise._unhandledRejection = false;
	        for (var i = 0; i < this.unhandledRejections.length; i++) {
	          if (this.unhandledRejections[i].promise === promise) {
	            this.unhandledRejections.splice(i);
	            i--;
	          }
	        }
	      },
	      scheduleRejectionCheck: function scheduleRejectionCheck() {
	        var _this = this;

	        if (this.pendingRejectionCheck) {
	          return;
	        }
	        this.pendingRejectionCheck = true;
	        setTimeout(function () {
	          _this.pendingRejectionCheck = false;
	          var now = Date.now();
	          for (var i = 0; i < _this.unhandledRejections.length; i++) {
	            if (now - _this.unhandledRejections[i].time > REJECTION_TIMEOUT) {
	              var unhandled = _this.unhandledRejections[i].promise._value;
	              var msg = 'Unhandled rejection: ' + unhandled;
	              if (unhandled.stack) {
	                msg += '\n' + unhandled.stack;
	              }
	              try {
	                throw new Error(msg);
	              } catch (_) {
	                console.warn(msg);
	              }
	              _this.unhandledRejections.splice(i);
	              i--;
	            }
	          }
	          if (_this.unhandledRejections.length) {
	            _this.scheduleRejectionCheck();
	          }
	        }, REJECTION_TIMEOUT);
	      }
	    };
	    var Promise = function Promise(resolver) {
	      this._status = STATUS_PENDING;
	      this._handlers = [];
	      try {
	        resolver.call(this, this._resolve.bind(this), this._reject.bind(this));
	      } catch (e) {
	        this._reject(e);
	      }
	    };
	    Promise.all = function Promise_all(promises) {
	      var resolveAll, rejectAll;
	      var deferred = new Promise(function (resolve, reject) {
	        resolveAll = resolve;
	        rejectAll = reject;
	      });
	      var unresolved = promises.length;
	      var results = [];
	      if (unresolved === 0) {
	        resolveAll(results);
	        return deferred;
	      }
	      function reject(reason) {
	        if (deferred._status === STATUS_REJECTED) {
	          return;
	        }
	        results = [];
	        rejectAll(reason);
	      }
	      for (var i = 0, ii = promises.length; i < ii; ++i) {
	        var promise = promises[i];
	        var resolve = function (i) {
	          return function (value) {
	            if (deferred._status === STATUS_REJECTED) {
	              return;
	            }
	            results[i] = value;
	            unresolved--;
	            if (unresolved === 0) {
	              resolveAll(results);
	            }
	          };
	        }(i);
	        if (Promise.isPromise(promise)) {
	          promise.then(resolve, reject);
	        } else {
	          resolve(promise);
	        }
	      }
	      return deferred;
	    };
	    Promise.isPromise = function Promise_isPromise(value) {
	      return value && typeof value.then === 'function';
	    };
	    Promise.resolve = function Promise_resolve(value) {
	      return new Promise(function (resolve) {
	        resolve(value);
	      });
	    };
	    Promise.reject = function Promise_reject(reason) {
	      return new Promise(function (resolve, reject) {
	        reject(reason);
	      });
	    };
	    Promise.prototype = {
	      _status: null,
	      _value: null,
	      _handlers: null,
	      _unhandledRejection: null,
	      _updateStatus: function Promise__updateStatus(status, value) {
	        if (this._status === STATUS_RESOLVED || this._status === STATUS_REJECTED) {
	          return;
	        }
	        if (status === STATUS_RESOLVED && Promise.isPromise(value)) {
	          value.then(this._updateStatus.bind(this, STATUS_RESOLVED), this._updateStatus.bind(this, STATUS_REJECTED));
	          return;
	        }
	        this._status = status;
	        this._value = value;
	        if (status === STATUS_REJECTED && this._handlers.length === 0) {
	          this._unhandledRejection = true;
	          HandlerManager.addUnhandledRejection(this);
	        }
	        HandlerManager.scheduleHandlers(this);
	      },
	      _resolve: function Promise_resolve(value) {
	        this._updateStatus(STATUS_RESOLVED, value);
	      },
	      _reject: function Promise_reject(reason) {
	        this._updateStatus(STATUS_REJECTED, reason);
	      },
	      then: function Promise_then(onResolve, onReject) {
	        var nextPromise = new Promise(function (resolve, reject) {
	          this.resolve = resolve;
	          this.reject = reject;
	        });
	        this._handlers.push({
	          thisPromise: this,
	          onResolve: onResolve,
	          onReject: onReject,
	          nextPromise: nextPromise
	        });
	        HandlerManager.scheduleHandlers(this);
	        return nextPromise;
	      },
	      catch: function Promise_catch(onReject) {
	        return this.then(undefined, onReject);
	      }
	    };
	    globalScope.Promise = Promise;
	  })();
	  (function checkWeakMap() {
	    if (globalScope.WeakMap) {
	      return;
	    }
	    var id = 0;
	    function WeakMap() {
	      this.id = '$weakmap' + id++;
	    }
	    WeakMap.prototype = {
	      has: function has(obj) {
	        if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' && typeof obj !== 'function' || obj === null) {
	          return false;
	        }
	        return !!Object.getOwnPropertyDescriptor(obj, this.id);
	      },
	      get: function get(obj) {
	        return this.has(obj) ? obj[this.id] : undefined;
	      },
	      set: function set(obj, value) {
	        Object.defineProperty(obj, this.id, {
	          value: value,
	          enumerable: false,
	          configurable: true
	        });
	      },
	      delete: function _delete(obj) {
	        delete obj[this.id];
	      }
	    };
	    globalScope.WeakMap = WeakMap;
	  })();
	  (function checkURLConstructor() {
	    var hasWorkingUrl = false;
	    try {
	      if (typeof URL === 'function' && _typeof(URL.prototype) === 'object' && 'origin' in URL.prototype) {
	        var u = new URL('b', 'http://a');
	        u.pathname = 'c%20d';
	        hasWorkingUrl = u.href === 'http://a/c%20d';
	      }
	    } catch (e) {}
	    if (hasWorkingUrl) {
	      return;
	    }
	    var relative = Object.create(null);
	    relative['ftp'] = 21;
	    relative['file'] = 0;
	    relative['gopher'] = 70;
	    relative['http'] = 80;
	    relative['https'] = 443;
	    relative['ws'] = 80;
	    relative['wss'] = 443;
	    var relativePathDotMapping = Object.create(null);
	    relativePathDotMapping['%2e'] = '.';
	    relativePathDotMapping['.%2e'] = '..';
	    relativePathDotMapping['%2e.'] = '..';
	    relativePathDotMapping['%2e%2e'] = '..';
	    function isRelativeScheme(scheme) {
	      return relative[scheme] !== undefined;
	    }
	    function invalid() {
	      clear.call(this);
	      this._isInvalid = true;
	    }
	    function IDNAToASCII(h) {
	      if (h === '') {
	        invalid.call(this);
	      }
	      return h.toLowerCase();
	    }
	    function percentEscape(c) {
	      var unicode = c.charCodeAt(0);
	      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1) {
	        return c;
	      }
	      return encodeURIComponent(c);
	    }
	    function percentEscapeQuery(c) {
	      var unicode = c.charCodeAt(0);
	      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1) {
	        return c;
	      }
	      return encodeURIComponent(c);
	    }
	    var EOF,
	        ALPHA = /[a-zA-Z]/,
	        ALPHANUMERIC = /[a-zA-Z0-9\+\-\.]/;
	    function parse(input, stateOverride, base) {
	      function err(message) {
	        errors.push(message);
	      }
	      var state = stateOverride || 'scheme start',
	          cursor = 0,
	          buffer = '',
	          seenAt = false,
	          seenBracket = false,
	          errors = [];
	      loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {
	        var c = input[cursor];
	        switch (state) {
	          case 'scheme start':
	            if (c && ALPHA.test(c)) {
	              buffer += c.toLowerCase();
	              state = 'scheme';
	            } else if (!stateOverride) {
	              buffer = '';
	              state = 'no scheme';
	              continue;
	            } else {
	              err('Invalid scheme.');
	              break loop;
	            }
	            break;
	          case 'scheme':
	            if (c && ALPHANUMERIC.test(c)) {
	              buffer += c.toLowerCase();
	            } else if (c === ':') {
	              this._scheme = buffer;
	              buffer = '';
	              if (stateOverride) {
	                break loop;
	              }
	              if (isRelativeScheme(this._scheme)) {
	                this._isRelative = true;
	              }
	              if (this._scheme === 'file') {
	                state = 'relative';
	              } else if (this._isRelative && base && base._scheme === this._scheme) {
	                state = 'relative or authority';
	              } else if (this._isRelative) {
	                state = 'authority first slash';
	              } else {
	                state = 'scheme data';
	              }
	            } else if (!stateOverride) {
	              buffer = '';
	              cursor = 0;
	              state = 'no scheme';
	              continue;
	            } else if (c === EOF) {
	              break loop;
	            } else {
	              err('Code point not allowed in scheme: ' + c);
	              break loop;
	            }
	            break;
	          case 'scheme data':
	            if (c === '?') {
	              this._query = '?';
	              state = 'query';
	            } else if (c === '#') {
	              this._fragment = '#';
	              state = 'fragment';
	            } else {
	              if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	                this._schemeData += percentEscape(c);
	              }
	            }
	            break;
	          case 'no scheme':
	            if (!base || !isRelativeScheme(base._scheme)) {
	              err('Missing scheme.');
	              invalid.call(this);
	            } else {
	              state = 'relative';
	              continue;
	            }
	            break;
	          case 'relative or authority':
	            if (c === '/' && input[cursor + 1] === '/') {
	              state = 'authority ignore slashes';
	            } else {
	              err('Expected /, got: ' + c);
	              state = 'relative';
	              continue;
	            }
	            break;
	          case 'relative':
	            this._isRelative = true;
	            if (this._scheme !== 'file') {
	              this._scheme = base._scheme;
	            }
	            if (c === EOF) {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = base._query;
	              this._username = base._username;
	              this._password = base._password;
	              break loop;
	            } else if (c === '/' || c === '\\') {
	              if (c === '\\') {
	                err('\\ is an invalid code point.');
	              }
	              state = 'relative slash';
	            } else if (c === '?') {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = '?';
	              this._username = base._username;
	              this._password = base._password;
	              state = 'query';
	            } else if (c === '#') {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = base._query;
	              this._fragment = '#';
	              this._username = base._username;
	              this._password = base._password;
	              state = 'fragment';
	            } else {
	              var nextC = input[cursor + 1];
	              var nextNextC = input[cursor + 2];
	              if (this._scheme !== 'file' || !ALPHA.test(c) || nextC !== ':' && nextC !== '|' || nextNextC !== EOF && nextNextC !== '/' && nextNextC !== '\\' && nextNextC !== '?' && nextNextC !== '#') {
	                this._host = base._host;
	                this._port = base._port;
	                this._username = base._username;
	                this._password = base._password;
	                this._path = base._path.slice();
	                this._path.pop();
	              }
	              state = 'relative path';
	              continue;
	            }
	            break;
	          case 'relative slash':
	            if (c === '/' || c === '\\') {
	              if (c === '\\') {
	                err('\\ is an invalid code point.');
	              }
	              if (this._scheme === 'file') {
	                state = 'file host';
	              } else {
	                state = 'authority ignore slashes';
	              }
	            } else {
	              if (this._scheme !== 'file') {
	                this._host = base._host;
	                this._port = base._port;
	                this._username = base._username;
	                this._password = base._password;
	              }
	              state = 'relative path';
	              continue;
	            }
	            break;
	          case 'authority first slash':
	            if (c === '/') {
	              state = 'authority second slash';
	            } else {
	              err('Expected \'/\', got: ' + c);
	              state = 'authority ignore slashes';
	              continue;
	            }
	            break;
	          case 'authority second slash':
	            state = 'authority ignore slashes';
	            if (c !== '/') {
	              err('Expected \'/\', got: ' + c);
	              continue;
	            }
	            break;
	          case 'authority ignore slashes':
	            if (c !== '/' && c !== '\\') {
	              state = 'authority';
	              continue;
	            } else {
	              err('Expected authority, got: ' + c);
	            }
	            break;
	          case 'authority':
	            if (c === '@') {
	              if (seenAt) {
	                err('@ already seen.');
	                buffer += '%40';
	              }
	              seenAt = true;
	              for (var i = 0; i < buffer.length; i++) {
	                var cp = buffer[i];
	                if (cp === '\t' || cp === '\n' || cp === '\r') {
	                  err('Invalid whitespace in authority.');
	                  continue;
	                }
	                if (cp === ':' && this._password === null) {
	                  this._password = '';
	                  continue;
	                }
	                var tempC = percentEscape(cp);
	                if (this._password !== null) {
	                  this._password += tempC;
	                } else {
	                  this._username += tempC;
	                }
	              }
	              buffer = '';
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              cursor -= buffer.length;
	              buffer = '';
	              state = 'host';
	              continue;
	            } else {
	              buffer += c;
	            }
	            break;
	          case 'file host':
	            if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              if (buffer.length === 2 && ALPHA.test(buffer[0]) && (buffer[1] === ':' || buffer[1] === '|')) {
	                state = 'relative path';
	              } else if (buffer.length === 0) {
	                state = 'relative path start';
	              } else {
	                this._host = IDNAToASCII.call(this, buffer);
	                buffer = '';
	                state = 'relative path start';
	              }
	              continue;
	            } else if (c === '\t' || c === '\n' || c === '\r') {
	              err('Invalid whitespace in file host.');
	            } else {
	              buffer += c;
	            }
	            break;
	          case 'host':
	          case 'hostname':
	            if (c === ':' && !seenBracket) {
	              this._host = IDNAToASCII.call(this, buffer);
	              buffer = '';
	              state = 'port';
	              if (stateOverride === 'hostname') {
	                break loop;
	              }
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              this._host = IDNAToASCII.call(this, buffer);
	              buffer = '';
	              state = 'relative path start';
	              if (stateOverride) {
	                break loop;
	              }
	              continue;
	            } else if (c !== '\t' && c !== '\n' && c !== '\r') {
	              if (c === '[') {
	                seenBracket = true;
	              } else if (c === ']') {
	                seenBracket = false;
	              }
	              buffer += c;
	            } else {
	              err('Invalid code point in host/hostname: ' + c);
	            }
	            break;
	          case 'port':
	            if (/[0-9]/.test(c)) {
	              buffer += c;
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#' || stateOverride) {
	              if (buffer !== '') {
	                var temp = parseInt(buffer, 10);
	                if (temp !== relative[this._scheme]) {
	                  this._port = temp + '';
	                }
	                buffer = '';
	              }
	              if (stateOverride) {
	                break loop;
	              }
	              state = 'relative path start';
	              continue;
	            } else if (c === '\t' || c === '\n' || c === '\r') {
	              err('Invalid code point in port: ' + c);
	            } else {
	              invalid.call(this);
	            }
	            break;
	          case 'relative path start':
	            if (c === '\\') {
	              err('\'\\\' not allowed in path.');
	            }
	            state = 'relative path';
	            if (c !== '/' && c !== '\\') {
	              continue;
	            }
	            break;
	          case 'relative path':
	            if (c === EOF || c === '/' || c === '\\' || !stateOverride && (c === '?' || c === '#')) {
	              if (c === '\\') {
	                err('\\ not allowed in relative path.');
	              }
	              var tmp;
	              if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {
	                buffer = tmp;
	              }
	              if (buffer === '..') {
	                this._path.pop();
	                if (c !== '/' && c !== '\\') {
	                  this._path.push('');
	                }
	              } else if (buffer === '.' && c !== '/' && c !== '\\') {
	                this._path.push('');
	              } else if (buffer !== '.') {
	                if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 && ALPHA.test(buffer[0]) && buffer[1] === '|') {
	                  buffer = buffer[0] + ':';
	                }
	                this._path.push(buffer);
	              }
	              buffer = '';
	              if (c === '?') {
	                this._query = '?';
	                state = 'query';
	              } else if (c === '#') {
	                this._fragment = '#';
	                state = 'fragment';
	              }
	            } else if (c !== '\t' && c !== '\n' && c !== '\r') {
	              buffer += percentEscape(c);
	            }
	            break;
	          case 'query':
	            if (!stateOverride && c === '#') {
	              this._fragment = '#';
	              state = 'fragment';
	            } else if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	              this._query += percentEscapeQuery(c);
	            }
	            break;
	          case 'fragment':
	            if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	              this._fragment += c;
	            }
	            break;
	        }
	        cursor++;
	      }
	    }
	    function clear() {
	      this._scheme = '';
	      this._schemeData = '';
	      this._username = '';
	      this._password = null;
	      this._host = '';
	      this._port = '';
	      this._path = [];
	      this._query = '';
	      this._fragment = '';
	      this._isInvalid = false;
	      this._isRelative = false;
	    }
	    function JURL(url, base) {
	      if (base !== undefined && !(base instanceof JURL)) {
	        base = new JURL(String(base));
	      }
	      this._url = url;
	      clear.call(this);
	      var input = url.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, '');
	      parse.call(this, input, null, base);
	    }
	    JURL.prototype = {
	      toString: function toString() {
	        return this.href;
	      },

	      get href() {
	        if (this._isInvalid) {
	          return this._url;
	        }
	        var authority = '';
	        if (this._username !== '' || this._password !== null) {
	          authority = this._username + (this._password !== null ? ':' + this._password : '') + '@';
	        }
	        return this.protocol + (this._isRelative ? '//' + authority + this.host : '') + this.pathname + this._query + this._fragment;
	      },
	      set href(value) {
	        clear.call(this);
	        parse.call(this, value);
	      },
	      get protocol() {
	        return this._scheme + ':';
	      },
	      set protocol(value) {
	        if (this._isInvalid) {
	          return;
	        }
	        parse.call(this, value + ':', 'scheme start');
	      },
	      get host() {
	        return this._isInvalid ? '' : this._port ? this._host + ':' + this._port : this._host;
	      },
	      set host(value) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, value, 'host');
	      },
	      get hostname() {
	        return this._host;
	      },
	      set hostname(value) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, value, 'hostname');
	      },
	      get port() {
	        return this._port;
	      },
	      set port(value) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, value, 'port');
	      },
	      get pathname() {
	        return this._isInvalid ? '' : this._isRelative ? '/' + this._path.join('/') : this._schemeData;
	      },
	      set pathname(value) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        this._path = [];
	        parse.call(this, value, 'relative path start');
	      },
	      get search() {
	        return this._isInvalid || !this._query || this._query === '?' ? '' : this._query;
	      },
	      set search(value) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        this._query = '?';
	        if (value[0] === '?') {
	          value = value.slice(1);
	        }
	        parse.call(this, value, 'query');
	      },
	      get hash() {
	        return this._isInvalid || !this._fragment || this._fragment === '#' ? '' : this._fragment;
	      },
	      set hash(value) {
	        if (this._isInvalid) {
	          return;
	        }
	        this._fragment = '#';
	        if (value[0] === '#') {
	          value = value.slice(1);
	        }
	        parse.call(this, value, 'fragment');
	      },
	      get origin() {
	        var host;
	        if (this._isInvalid || !this._scheme) {
	          return '';
	        }
	        switch (this._scheme) {
	          case 'data':
	          case 'file':
	          case 'javascript':
	          case 'mailto':
	            return 'null';
	          case 'blob':
	            try {
	              return new JURL(this._schemeData).origin || 'null';
	            } catch (_) {}
	            return 'null';
	        }
	        host = this.host;
	        if (!host) {
	          return '';
	        }
	        return this._scheme + '://' + host;
	      }
	    };
	    var OriginalURL = globalScope.URL;
	    if (OriginalURL) {
	      JURL.createObjectURL = function (blob) {
	        return OriginalURL.createObjectURL.apply(OriginalURL, arguments);
	      };
	      JURL.revokeObjectURL = function (url) {
	        OriginalURL.revokeObjectURL(url);
	      };
	    }
	    globalScope.URL = JURL;
	  })();
	}

	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	__w_pdfjs_require__(57);
	module.exports = __w_pdfjs_require__(16).Uint8ClampedArray;

	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	__w_pdfjs_require__(58)('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	if (__w_pdfjs_require__(3)) {
	  var LIBRARY = __w_pdfjs_require__(21);
	  var global = __w_pdfjs_require__(2);
	  var fails = __w_pdfjs_require__(15);
	  var $export = __w_pdfjs_require__(30);
	  var $typed = __w_pdfjs_require__(34);
	  var $buffer = __w_pdfjs_require__(59);
	  var ctx = __w_pdfjs_require__(24);
	  var anInstance = __w_pdfjs_require__(36);
	  var propertyDesc = __w_pdfjs_require__(18);
	  var hide = __w_pdfjs_require__(4);
	  var redefineAll = __w_pdfjs_require__(35);
	  var toInteger = __w_pdfjs_require__(12);
	  var toLength = __w_pdfjs_require__(7);
	  var toIndex = __w_pdfjs_require__(37);
	  var toAbsoluteIndex = __w_pdfjs_require__(20);
	  var toPrimitive = __w_pdfjs_require__(22);
	  var has = __w_pdfjs_require__(6);
	  var classof = __w_pdfjs_require__(45);
	  var isObject = __w_pdfjs_require__(10);
	  var toObject = __w_pdfjs_require__(13);
	  var isArrayIter = __w_pdfjs_require__(60);
	  var create = __w_pdfjs_require__(46);
	  var getPrototypeOf = __w_pdfjs_require__(47);
	  var gOPN = __w_pdfjs_require__(38).f;
	  var getIterFn = __w_pdfjs_require__(64);
	  var uid = __w_pdfjs_require__(11);
	  var wks = __w_pdfjs_require__(1);
	  var createArrayMethod = __w_pdfjs_require__(65);
	  var createArrayIncludes = __w_pdfjs_require__(42);
	  var speciesConstructor = __w_pdfjs_require__(69);
	  var ArrayIterators = __w_pdfjs_require__(70);
	  var Iterators = __w_pdfjs_require__(14);
	  var $iterDetect = __w_pdfjs_require__(75);
	  var setSpecies = __w_pdfjs_require__(76);
	  var arrayFill = __w_pdfjs_require__(44);
	  var arrayCopyWithin = __w_pdfjs_require__(77);
	  var $DP = __w_pdfjs_require__(8);
	  var $GOPD = __w_pdfjs_require__(78);
	  var dP = $DP.f;
	  var gOPD = $GOPD.f;
	  var RangeError = global.RangeError;
	  var TypeError = global.TypeError;
	  var Uint8Array = global.Uint8Array;
	  var ARRAY_BUFFER = 'ArrayBuffer';
	  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
	  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	  var PROTOTYPE = 'prototype';
	  var ArrayProto = Array[PROTOTYPE];
	  var $ArrayBuffer = $buffer.ArrayBuffer;
	  var $DataView = $buffer.DataView;
	  var arrayForEach = createArrayMethod(0);
	  var arrayFilter = createArrayMethod(2);
	  var arraySome = createArrayMethod(3);
	  var arrayEvery = createArrayMethod(4);
	  var arrayFind = createArrayMethod(5);
	  var arrayFindIndex = createArrayMethod(6);
	  var arrayIncludes = createArrayIncludes(true);
	  var arrayIndexOf = createArrayIncludes(false);
	  var arrayValues = ArrayIterators.values;
	  var arrayKeys = ArrayIterators.keys;
	  var arrayEntries = ArrayIterators.entries;
	  var arrayLastIndexOf = ArrayProto.lastIndexOf;
	  var arrayReduce = ArrayProto.reduce;
	  var arrayReduceRight = ArrayProto.reduceRight;
	  var arrayJoin = ArrayProto.join;
	  var arraySort = ArrayProto.sort;
	  var arraySlice = ArrayProto.slice;
	  var arrayToString = ArrayProto.toString;
	  var arrayToLocaleString = ArrayProto.toLocaleString;
	  var ITERATOR = wks('iterator');
	  var TAG = wks('toStringTag');
	  var TYPED_CONSTRUCTOR = uid('typed_constructor');
	  var DEF_CONSTRUCTOR = uid('def_constructor');
	  var ALL_CONSTRUCTORS = $typed.CONSTR;
	  var TYPED_ARRAY = $typed.TYPED;
	  var VIEW = $typed.VIEW;
	  var WRONG_LENGTH = 'Wrong length!';
	  var $map = createArrayMethod(1, function (O, length) {
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });
	  var LITTLE_ENDIAN = fails(function () {
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });
	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
	    new Uint8Array(1).set({});
	  });
	  var toOffset = function toOffset(it, BYTES) {
	    var offset = toInteger(it);
	    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
	    return offset;
	  };
	  var validate = function validate(it) {
	    if (isObject(it) && TYPED_ARRAY in it) return it;
	    throw TypeError(it + ' is not a typed array!');
	  };
	  var allocate = function allocate(C, length) {
	    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
	      throw TypeError('It is not a typed array constructor!');
	    }
	    return new C(length);
	  };
	  var speciesFromList = function speciesFromList(O, list) {
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };
	  var fromList = function fromList(C, list) {
	    var index = 0;
	    var length = list.length;
	    var result = allocate(C, length);
	    while (length > index) {
	      result[index] = list[index++];
	    }return result;
	  };
	  var addGetter = function addGetter(it, key, internal) {
	    dP(it, key, {
	      get: function get() {
	        return this._d[internal];
	      }
	    });
	  };
	  var $from = function from(source) {
	    var O = toObject(source);
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var iterFn = getIterFn(O);
	    var i, length, values, result, step, iterator;
	    if (iterFn != undefined && !isArrayIter(iterFn)) {
	      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
	        values.push(step.value);
	      }
	      O = values;
	    }
	    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
	    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };
	  var $of = function of() {
	    var index = 0;
	    var length = arguments.length;
	    var result = allocate(this, length);
	    while (length > index) {
	      result[index] = arguments[index++];
	    }return result;
	  };
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
	    arrayToLocaleString.call(new Uint8Array(1));
	  });
	  var $toLocaleString = function toLocaleString() {
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };
	  var proto = {
	    copyWithin: function copyWithin(target, start) {
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn) {
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value) {
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn) {
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate) {
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate) {
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn) {
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement) {
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement) {
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator) {
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement) {
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn) {
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn) {
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn) {
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse() {
	      var that = this;
	      var length = validate(that).length;
	      var middle = Math.floor(length / 2);
	      var index = 0;
	      var value;
	      while (index < middle) {
	        value = that[index];
	        that[index++] = that[--length];
	        that[length] = value;
	      }
	      return that;
	    },
	    some: function some(callbackfn) {
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn) {
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end) {
	      var O = validate(this);
	      var length = O.length;
	      var $begin = toAbsoluteIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
	    }
	  };
	  var $slice = function slice(start, end) {
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };
	  var $set = function set(arrayLike) {
	    validate(this);
	    var offset = toOffset(arguments[1], 1);
	    var length = this.length;
	    var src = toObject(arrayLike);
	    var len = toLength(src.length);
	    var index = 0;
	    if (len + offset > length) throw RangeError(WRONG_LENGTH);
	    while (index < len) {
	      this[offset + index] = src[index++];
	    }
	  };
	  var $iterators = {
	    entries: function entries() {
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys() {
	      return arrayKeys.call(validate(this));
	    },
	    values: function values() {
	      return arrayValues.call(validate(this));
	    }
	  };
	  var isTAIndex = function isTAIndex(target, key) {
	    return isObject(target) && target[TYPED_ARRAY] && (typeof key === 'undefined' ? 'undefined' : _typeof(key)) != 'symbol' && key in target && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key) {
	    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc) {
	    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
	      target[key] = desc.value;
	      return target;
	    }
	    return dP(target, key, desc);
	  };
	  if (!ALL_CONSTRUCTORS) {
	    $GOPD.f = $getDesc;
	    $DP.f = $setDesc;
	  }
	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty: $setDesc
	  });
	  if (fails(function () {
	    arrayToString.call({});
	  })) {
	    arrayToString = arrayToLocaleString = function toString() {
	      return arrayJoin.call(this);
	    };
	  }
	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice: $slice,
	    set: $set,
	    constructor: function constructor() {},
	    toString: arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function get() {
	      return this[TYPED_ARRAY];
	    }
	  });
	  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
	    CLAMPED = !!CLAMPED;
	    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + KEY;
	    var SETTER = 'set' + KEY;
	    var TypedArray = global[NAME];
	    var Base = TypedArray || {};
	    var TAC = TypedArray && getPrototypeOf(TypedArray);
	    var FORCED = !TypedArray || !$typed.ABV;
	    var O = {};
	    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function getter(that, index) {
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function setter(that, index, value) {
	      var data = that._d;
	      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function addElement(that, index) {
	      dP(that, index, {
	        get: function get() {
	          return getter(this, index);
	        },
	        set: function set(value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if (FORCED) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME, '_d');
	        var index = 0;
	        var offset = 0;
	        var buffer, byteLength, length, klass;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new $ArrayBuffer(byteLength);
	        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (TYPED_ARRAY in data) {
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while (index < length) {
	          addElement(that, index++);
	        }
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if (!fails(function () {
	      TypedArray(1);
	    }) || !fails(function () {
	      new TypedArray(-1);
	    }) || !$iterDetect(function (iter) {
	      new TypedArray();
	      new TypedArray(null);
	      new TypedArray(1.5);
	      new TypedArray(iter);
	    }, true)) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        if (!isObject(data)) return new Base(toIndex(data));
	        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
	        }
	        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
	        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator = TypedArrayPrototype[ITERATOR];
	    var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
	    var $iterator = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
	    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
	      dP(TypedArrayPrototype, TAG, {
	        get: function get() {
	          return NAME;
	        }
	      });
	    }
	    O[NAME] = TypedArray;
	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
	    $export($export.S, NAME, { BYTES_PER_ELEMENT: BYTES });
	    $export($export.S + $export.F * fails(function () {
	      Base.of.call(TypedArray, 1);
	    }), NAME, {
	      from: $from,
	      of: $of
	    });
	    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
	    $export($export.P, NAME, proto);
	    setSpecies(NAME);
	    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });
	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
	    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
	    $export($export.P + $export.F * fails(function () {
	      new TypedArray(1).slice();
	    }), NAME, { slice: $slice });
	    $export($export.P + $export.F * (fails(function () {
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
	    }) || !fails(function () {
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, { toLocaleString: $toLocaleString });
	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function () {};

	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var global = __w_pdfjs_require__(2);
	var DESCRIPTORS = __w_pdfjs_require__(3);
	var LIBRARY = __w_pdfjs_require__(21);
	var $typed = __w_pdfjs_require__(34);
	var hide = __w_pdfjs_require__(4);
	var redefineAll = __w_pdfjs_require__(35);
	var fails = __w_pdfjs_require__(15);
	var anInstance = __w_pdfjs_require__(36);
	var toInteger = __w_pdfjs_require__(12);
	var toLength = __w_pdfjs_require__(7);
	var toIndex = __w_pdfjs_require__(37);
	var gOPN = __w_pdfjs_require__(38).f;
	var dP = __w_pdfjs_require__(8).f;
	var arrayFill = __w_pdfjs_require__(44);
	var setToStringTag = __w_pdfjs_require__(28);
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH = 'Wrong length!';
	var WRONG_INDEX = 'Wrong index!';
	var $ArrayBuffer = global[ARRAY_BUFFER];
	var $DataView = global[DATA_VIEW];
	var Math = global.Math;
	var RangeError = global.RangeError;
	var Infinity = global.Infinity;
	var BaseBuffer = $ArrayBuffer;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;
	var BUFFER = 'buffer';
	var BYTE_LENGTH = 'byteLength';
	var BYTE_OFFSET = 'byteOffset';
	var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
	var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
	var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;
	function packIEEE754(value, mLen, nBytes) {
	  var buffer = Array(nBytes);
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var i = 0;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  var e, m, c;
	  value = abs(value);
	  if (value != value || value === Infinity) {
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if (value * (c = pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {}
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {}
	  buffer[--i] |= s * 128;
	  return buffer;
	}
	function unpackIEEE754(buffer, mLen, nBytes) {
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = eLen - 7;
	  var i = nBytes - 1;
	  var s = buffer[i--];
	  var e = s & 127;
	  var m;
	  s >>= 7;
	  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {}
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {}
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * pow(2, e - mLen);
	}
	function unpackI32(bytes) {
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	}
	function packI8(it) {
	  return [it & 0xff];
	}
	function packI16(it) {
	  return [it & 0xff, it >> 8 & 0xff];
	}
	function packI32(it) {
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	}
	function packF64(it) {
	  return packIEEE754(it, 52, 8);
	}
	function packF32(it) {
	  return packIEEE754(it, 23, 4);
	}
	function addGetter(C, key, internal) {
	  dP(C[PROTOTYPE], key, {
	    get: function get() {
	      return this[internal];
	    }
	  });
	}
	function get(view, bytes, index, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	}
	function set(view, bytes, index, conversion, value, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = conversion(+value);
	  for (var i = 0; i < bytes; i++) {
	    store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	  }
	}
	if (!$typed.ABV) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    this._b = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };
	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH];
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };
	  if (DESCRIPTORS) {
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }
	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset) {
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset) {
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset) {
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value) {
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value) {
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if (!fails(function () {
	    $ArrayBuffer(1);
	  }) || !fails(function () {
	    new $ArrayBuffer(-1);
	  }) || fails(function () {
	    new $ArrayBuffer();
	    new $ArrayBuffer(1.5);
	    new $ArrayBuffer(NaN);
	    return $ArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new BaseBuffer(toIndex(length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
	      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
	    }
	    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  var view = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

	/***/ }),
	/* 60 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var Iterators = __w_pdfjs_require__(14);
	var ITERATOR = __w_pdfjs_require__(1)('iterator');
	var ArrayProto = Array.prototype;
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var dP = __w_pdfjs_require__(8);
	var anObject = __w_pdfjs_require__(17);
	var getKeys = __w_pdfjs_require__(62);
	module.exports = __w_pdfjs_require__(3) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) {
	    dP.f(O, P = keys[i++], Properties[P]);
	  }return O;
	};

	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var $keys = __w_pdfjs_require__(39);
	var enumBugKeys = __w_pdfjs_require__(27);
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};

	/***/ }),
	/* 63 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var document = __w_pdfjs_require__(2).document;
	module.exports = document && document.documentElement;

	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var classof = __w_pdfjs_require__(45);
	var ITERATOR = __w_pdfjs_require__(1)('iterator');
	var Iterators = __w_pdfjs_require__(14);
	module.exports = __w_pdfjs_require__(16).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
	};

	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var ctx = __w_pdfjs_require__(24);
	var IObject = __w_pdfjs_require__(40);
	var toObject = __w_pdfjs_require__(13);
	var toLength = __w_pdfjs_require__(7);
	var asc = __w_pdfjs_require__(66);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (; length > index; index++) {
	      if (NO_HOLES || index in self) {
	        val = self[index];
	        res = f(val, index, O);
	        if (TYPE) {
	          if (IS_MAP) result[index] = res;else if (res) switch (TYPE) {
	            case 3:
	              return true;
	            case 5:
	              return val;
	            case 6:
	              return index;
	            case 2:
	              result.push(val);
	          } else if (IS_EVERY) return false;
	        }
	      }
	    }return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var speciesConstructor = __w_pdfjs_require__(67);
	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};

	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var isObject = __w_pdfjs_require__(10);
	var isArray = __w_pdfjs_require__(68);
	var SPECIES = __w_pdfjs_require__(1)('species');
	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  }
	  return C === undefined ? Array : C;
	};

	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var cof = __w_pdfjs_require__(25);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};

	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var anObject = __w_pdfjs_require__(17);
	var aFunction = __w_pdfjs_require__(33);
	var SPECIES = __w_pdfjs_require__(1)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var addToUnscopables = __w_pdfjs_require__(71);
	var step = __w_pdfjs_require__(72);
	var Iterators = __w_pdfjs_require__(14);
	var toIObject = __w_pdfjs_require__(19);
	module.exports = __w_pdfjs_require__(73)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated);
	  this._i = 0;
	  this._k = kind;
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	Iterators.Arguments = Iterators.Array;
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var UNSCOPABLES = __w_pdfjs_require__(1)('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) __w_pdfjs_require__(4)(ArrayProto, UNSCOPABLES, {});
	module.exports = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};

	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	module.exports = function (done, value) {
	  return {
	    value: value,
	    done: !!done
	  };
	};

	/***/ }),
	/* 73 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var LIBRARY = __w_pdfjs_require__(21);
	var $export = __w_pdfjs_require__(30);
	var redefine = __w_pdfjs_require__(23);
	var hide = __w_pdfjs_require__(4);
	var has = __w_pdfjs_require__(6);
	var Iterators = __w_pdfjs_require__(14);
	var $iterCreate = __w_pdfjs_require__(74);
	var setToStringTag = __w_pdfjs_require__(28);
	var getPrototypeOf = __w_pdfjs_require__(47);
	var ITERATOR = __w_pdfjs_require__(1)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys());
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	var returnThis = function returnThis() {
	  return this;
	};
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function getMethod(kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS:
	        return function keys() {
	          return new Constructor(this, kind);
	        };
	      case VALUES:
	        return function values() {
	          return new Constructor(this, kind);
	        };
	    }
	    return function entries() {
	      return new Constructor(this, kind);
	    };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      setToStringTag(IteratorPrototype, TAG, true);
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() {
	      return $native.call(this);
	    };
	  }
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	/***/ }),
	/* 74 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var create = __w_pdfjs_require__(46);
	var descriptor = __w_pdfjs_require__(18);
	var setToStringTag = __w_pdfjs_require__(28);
	var IteratorPrototype = {};
	__w_pdfjs_require__(4)(IteratorPrototype, __w_pdfjs_require__(1)('iterator'), function () {
	  return this;
	});
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var ITERATOR = __w_pdfjs_require__(1)('iterator');
	var SAFE_CLOSING = false;
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () {
	    SAFE_CLOSING = true;
	  };
	  Array.from(riter, function () {
	    throw 2;
	  });
	} catch (e) {}
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () {
	      return { done: safe = true };
	    };
	    arr[ITERATOR] = function () {
	      return iter;
	    };
	    exec(arr);
	  } catch (e) {}
	  return safe;
	};

	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var global = __w_pdfjs_require__(2);
	var dP = __w_pdfjs_require__(8);
	var DESCRIPTORS = __w_pdfjs_require__(3);
	var SPECIES = __w_pdfjs_require__(1)('species');
	module.exports = function (KEY) {
	  var C = global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function get() {
	      return this;
	    }
	  });
	};

	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var toObject = __w_pdfjs_require__(13);
	var toAbsoluteIndex = __w_pdfjs_require__(20);
	var toLength = __w_pdfjs_require__(7);
	module.exports = [].copyWithin || function copyWithin(target, start) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];else delete O[to];
	    to += inc;
	    from += inc;
	  }
	  return O;
	};

	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var pIE = __w_pdfjs_require__(79);
	var createDesc = __w_pdfjs_require__(18);
	var toIObject = __w_pdfjs_require__(19);
	var toPrimitive = __w_pdfjs_require__(22);
	var has = __w_pdfjs_require__(6);
	var IE8_DOM_DEFINE = __w_pdfjs_require__(31);
	var gOPD = Object.getOwnPropertyDescriptor;
	exports.f = __w_pdfjs_require__(3) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) {}
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};

	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	exports.f = {}.propertyIsEnumerable;

	/***/ }),
	/* 80 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var isReadableStreamSupported = false;
	if (typeof ReadableStream !== 'undefined') {
	  try {
	    new ReadableStream({
	      start: function start(controller) {
	        controller.close();
	      }
	    });
	    isReadableStreamSupported = true;
	  } catch (e) {}
	}
	if (isReadableStreamSupported) {
	  exports.ReadableStream = ReadableStream;
	} else {
	  exports.ReadableStream = __w_pdfjs_require__(81).ReadableStream;
	}

	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	(function (e, a) {
	  for (var i in a) {
	    e[i] = a[i];
	  }
	})(exports, function (modules) {
	  var installedModules = {};
	  function __w_pdfjs_require__(moduleId) {
	    if (installedModules[moduleId]) return installedModules[moduleId].exports;
	    var module = installedModules[moduleId] = {
	      i: moduleId,
	      l: false,
	      exports: {}
	    };
	    modules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);
	    module.l = true;
	    return module.exports;
	  }
	  __w_pdfjs_require__.m = modules;
	  __w_pdfjs_require__.c = installedModules;
	  __w_pdfjs_require__.i = function (value) {
	    return value;
	  };
	  __w_pdfjs_require__.d = function (exports, name, getter) {
	    if (!__w_pdfjs_require__.o(exports, name)) {
	      Object.defineProperty(exports, name, {
	        configurable: false,
	        enumerable: true,
	        get: getter
	      });
	    }
	  };
	  __w_pdfjs_require__.n = function (module) {
	    var getter = module && module.__esModule ? function getDefault() {
	      return module['default'];
	    } : function getModuleExports() {
	      return module;
	    };
	    __w_pdfjs_require__.d(getter, 'a', getter);
	    return getter;
	  };
	  __w_pdfjs_require__.o = function (object, property) {
	    return Object.prototype.hasOwnProperty.call(object, property);
	  };
	  __w_pdfjs_require__.p = "";
	  return __w_pdfjs_require__(__w_pdfjs_require__.s = 7);
	}([function (module, exports, __w_pdfjs_require__) {
	  "use strict";

	  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	  } : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	  };
	  var _require = __w_pdfjs_require__(1),
	      assert = _require.assert;
	  function IsPropertyKey(argument) {
	    return typeof argument === 'string' || (typeof argument === 'undefined' ? 'undefined' : _typeof(argument)) === 'symbol';
	  }
	  exports.typeIsObject = function (x) {
	    return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x !== null || typeof x === 'function';
	  };
	  exports.createDataProperty = function (o, p, v) {
	    assert(exports.typeIsObject(o));
	    Object.defineProperty(o, p, {
	      value: v,
	      writable: true,
	      enumerable: true,
	      configurable: true
	    });
	  };
	  exports.createArrayFromList = function (elements) {
	    return elements.slice();
	  };
	  exports.ArrayBufferCopy = function (dest, destOffset, src, srcOffset, n) {
	    new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
	  };
	  exports.CreateIterResultObject = function (value, done) {
	    assert(typeof done === 'boolean');
	    var obj = {};
	    Object.defineProperty(obj, 'value', {
	      value: value,
	      enumerable: true,
	      writable: true,
	      configurable: true
	    });
	    Object.defineProperty(obj, 'done', {
	      value: done,
	      enumerable: true,
	      writable: true,
	      configurable: true
	    });
	    return obj;
	  };
	  exports.IsFiniteNonNegativeNumber = function (v) {
	    if (Number.isNaN(v)) {
	      return false;
	    }
	    if (v === Infinity) {
	      return false;
	    }
	    if (v < 0) {
	      return false;
	    }
	    return true;
	  };
	  function Call(F, V, args) {
	    if (typeof F !== 'function') {
	      throw new TypeError('Argument is not a function');
	    }
	    return Function.prototype.apply.call(F, V, args);
	  }
	  exports.InvokeOrNoop = function (O, P, args) {
	    assert(O !== undefined);
	    assert(IsPropertyKey(P));
	    assert(Array.isArray(args));
	    var method = O[P];
	    if (method === undefined) {
	      return undefined;
	    }
	    return Call(method, O, args);
	  };
	  exports.PromiseInvokeOrNoop = function (O, P, args) {
	    assert(O !== undefined);
	    assert(IsPropertyKey(P));
	    assert(Array.isArray(args));
	    try {
	      return Promise.resolve(exports.InvokeOrNoop(O, P, args));
	    } catch (returnValueE) {
	      return Promise.reject(returnValueE);
	    }
	  };
	  exports.PromiseInvokeOrPerformFallback = function (O, P, args, F, argsF) {
	    assert(O !== undefined);
	    assert(IsPropertyKey(P));
	    assert(Array.isArray(args));
	    assert(Array.isArray(argsF));
	    var method = void 0;
	    try {
	      method = O[P];
	    } catch (methodE) {
	      return Promise.reject(methodE);
	    }
	    if (method === undefined) {
	      return F.apply(null, argsF);
	    }
	    try {
	      return Promise.resolve(Call(method, O, args));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	  exports.TransferArrayBuffer = function (O) {
	    return O.slice();
	  };
	  exports.ValidateAndNormalizeHighWaterMark = function (highWaterMark) {
	    highWaterMark = Number(highWaterMark);
	    if (Number.isNaN(highWaterMark) || highWaterMark < 0) {
	      throw new RangeError('highWaterMark property of a queuing strategy must be non-negative and non-NaN');
	    }
	    return highWaterMark;
	  };
	  exports.ValidateAndNormalizeQueuingStrategy = function (size, highWaterMark) {
	    if (size !== undefined && typeof size !== 'function') {
	      throw new TypeError('size property of a queuing strategy must be a function');
	    }
	    highWaterMark = exports.ValidateAndNormalizeHighWaterMark(highWaterMark);
	    return {
	      size: size,
	      highWaterMark: highWaterMark
	    };
	  };
	}, function (module, exports, __w_pdfjs_require__) {
	  "use strict";

	  function rethrowAssertionErrorRejection(e) {
	    if (e && e.constructor === AssertionError) {
	      setTimeout(function () {
	        throw e;
	      }, 0);
	    }
	  }
	  function AssertionError(message) {
	    this.name = 'AssertionError';
	    this.message = message || '';
	    this.stack = new Error().stack;
	  }
	  AssertionError.prototype = Object.create(Error.prototype);
	  AssertionError.prototype.constructor = AssertionError;
	  function assert(value, message) {
	    if (!value) {
	      throw new AssertionError(message);
	    }
	  }
	  module.exports = {
	    rethrowAssertionErrorRejection: rethrowAssertionErrorRejection,
	    AssertionError: AssertionError,
	    assert: assert
	  };
	}, function (module, exports, __w_pdfjs_require__) {
	  "use strict";

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }
	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();
	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }
	  var _require = __w_pdfjs_require__(0),
	      InvokeOrNoop = _require.InvokeOrNoop,
	      PromiseInvokeOrNoop = _require.PromiseInvokeOrNoop,
	      ValidateAndNormalizeQueuingStrategy = _require.ValidateAndNormalizeQueuingStrategy,
	      typeIsObject = _require.typeIsObject;
	  var _require2 = __w_pdfjs_require__(1),
	      assert = _require2.assert,
	      rethrowAssertionErrorRejection = _require2.rethrowAssertionErrorRejection;
	  var _require3 = __w_pdfjs_require__(3),
	      DequeueValue = _require3.DequeueValue,
	      EnqueueValueWithSize = _require3.EnqueueValueWithSize,
	      PeekQueueValue = _require3.PeekQueueValue,
	      ResetQueue = _require3.ResetQueue;
	  var WritableStream = function () {
	    function WritableStream() {
	      var underlyingSink = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	          size = _ref.size,
	          _ref$highWaterMark = _ref.highWaterMark,
	          highWaterMark = _ref$highWaterMark === undefined ? 1 : _ref$highWaterMark;
	      _classCallCheck(this, WritableStream);
	      this._state = 'writable';
	      this._storedError = undefined;
	      this._writer = undefined;
	      this._writableStreamController = undefined;
	      this._writeRequests = [];
	      this._inFlightWriteRequest = undefined;
	      this._closeRequest = undefined;
	      this._inFlightCloseRequest = undefined;
	      this._pendingAbortRequest = undefined;
	      this._backpressure = false;
	      var type = underlyingSink.type;
	      if (type !== undefined) {
	        throw new RangeError('Invalid type is specified');
	      }
	      this._writableStreamController = new WritableStreamDefaultController(this, underlyingSink, size, highWaterMark);
	      this._writableStreamController.__startSteps();
	    }
	    _createClass(WritableStream, [{
	      key: 'abort',
	      value: function abort(reason) {
	        if (IsWritableStream(this) === false) {
	          return Promise.reject(streamBrandCheckException('abort'));
	        }
	        if (IsWritableStreamLocked(this) === true) {
	          return Promise.reject(new TypeError('Cannot abort a stream that already has a writer'));
	        }
	        return WritableStreamAbort(this, reason);
	      }
	    }, {
	      key: 'getWriter',
	      value: function getWriter() {
	        if (IsWritableStream(this) === false) {
	          throw streamBrandCheckException('getWriter');
	        }
	        return AcquireWritableStreamDefaultWriter(this);
	      }
	    }, {
	      key: 'locked',
	      get: function get() {
	        if (IsWritableStream(this) === false) {
	          throw streamBrandCheckException('locked');
	        }
	        return IsWritableStreamLocked(this);
	      }
	    }]);
	    return WritableStream;
	  }();
	  module.exports = {
	    AcquireWritableStreamDefaultWriter: AcquireWritableStreamDefaultWriter,
	    IsWritableStream: IsWritableStream,
	    IsWritableStreamLocked: IsWritableStreamLocked,
	    WritableStream: WritableStream,
	    WritableStreamAbort: WritableStreamAbort,
	    WritableStreamDefaultControllerError: WritableStreamDefaultControllerError,
	    WritableStreamDefaultWriterCloseWithErrorPropagation: WritableStreamDefaultWriterCloseWithErrorPropagation,
	    WritableStreamDefaultWriterRelease: WritableStreamDefaultWriterRelease,
	    WritableStreamDefaultWriterWrite: WritableStreamDefaultWriterWrite,
	    WritableStreamCloseQueuedOrInFlight: WritableStreamCloseQueuedOrInFlight
	  };
	  function AcquireWritableStreamDefaultWriter(stream) {
	    return new WritableStreamDefaultWriter(stream);
	  }
	  function IsWritableStream(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {
	      return false;
	    }
	    return true;
	  }
	  function IsWritableStreamLocked(stream) {
	    assert(IsWritableStream(stream) === true, 'IsWritableStreamLocked should only be used on known writable streams');
	    if (stream._writer === undefined) {
	      return false;
	    }
	    return true;
	  }
	  function WritableStreamAbort(stream, reason) {
	    var state = stream._state;
	    if (state === 'closed') {
	      return Promise.resolve(undefined);
	    }
	    if (state === 'errored') {
	      return Promise.reject(stream._storedError);
	    }
	    var error = new TypeError('Requested to abort');
	    if (stream._pendingAbortRequest !== undefined) {
	      return Promise.reject(error);
	    }
	    assert(state === 'writable' || state === 'erroring', 'state must be writable or erroring');
	    var wasAlreadyErroring = false;
	    if (state === 'erroring') {
	      wasAlreadyErroring = true;
	      reason = undefined;
	    }
	    var promise = new Promise(function (resolve, reject) {
	      stream._pendingAbortRequest = {
	        _resolve: resolve,
	        _reject: reject,
	        _reason: reason,
	        _wasAlreadyErroring: wasAlreadyErroring
	      };
	    });
	    if (wasAlreadyErroring === false) {
	      WritableStreamStartErroring(stream, error);
	    }
	    return promise;
	  }
	  function WritableStreamAddWriteRequest(stream) {
	    assert(IsWritableStreamLocked(stream) === true);
	    assert(stream._state === 'writable');
	    var promise = new Promise(function (resolve, reject) {
	      var writeRequest = {
	        _resolve: resolve,
	        _reject: reject
	      };
	      stream._writeRequests.push(writeRequest);
	    });
	    return promise;
	  }
	  function WritableStreamDealWithRejection(stream, error) {
	    var state = stream._state;
	    if (state === 'writable') {
	      WritableStreamStartErroring(stream, error);
	      return;
	    }
	    assert(state === 'erroring');
	    WritableStreamFinishErroring(stream);
	  }
	  function WritableStreamStartErroring(stream, reason) {
	    assert(stream._storedError === undefined, 'stream._storedError === undefined');
	    assert(stream._state === 'writable', 'state must be writable');
	    var controller = stream._writableStreamController;
	    assert(controller !== undefined, 'controller must not be undefined');
	    stream._state = 'erroring';
	    stream._storedError = reason;
	    var writer = stream._writer;
	    if (writer !== undefined) {
	      WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
	    }
	    if (WritableStreamHasOperationMarkedInFlight(stream) === false && controller._started === true) {
	      WritableStreamFinishErroring(stream);
	    }
	  }
	  function WritableStreamFinishErroring(stream) {
	    assert(stream._state === 'erroring', 'stream._state === erroring');
	    assert(WritableStreamHasOperationMarkedInFlight(stream) === false, 'WritableStreamHasOperationMarkedInFlight(stream) === false');
	    stream._state = 'errored';
	    stream._writableStreamController.__errorSteps();
	    var storedError = stream._storedError;
	    for (var i = 0; i < stream._writeRequests.length; i++) {
	      var writeRequest = stream._writeRequests[i];
	      writeRequest._reject(storedError);
	    }
	    stream._writeRequests = [];
	    if (stream._pendingAbortRequest === undefined) {
	      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
	      return;
	    }
	    var abortRequest = stream._pendingAbortRequest;
	    stream._pendingAbortRequest = undefined;
	    if (abortRequest._wasAlreadyErroring === true) {
	      abortRequest._reject(storedError);
	      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
	      return;
	    }
	    var promise = stream._writableStreamController.__abortSteps(abortRequest._reason);
	    promise.then(function () {
	      abortRequest._resolve();
	      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
	    }, function (reason) {
	      abortRequest._reject(reason);
	      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
	    });
	  }
	  function WritableStreamFinishInFlightWrite(stream) {
	    assert(stream._inFlightWriteRequest !== undefined);
	    stream._inFlightWriteRequest._resolve(undefined);
	    stream._inFlightWriteRequest = undefined;
	  }
	  function WritableStreamFinishInFlightWriteWithError(stream, error) {
	    assert(stream._inFlightWriteRequest !== undefined);
	    stream._inFlightWriteRequest._reject(error);
	    stream._inFlightWriteRequest = undefined;
	    assert(stream._state === 'writable' || stream._state === 'erroring');
	    WritableStreamDealWithRejection(stream, error);
	  }
	  function WritableStreamFinishInFlightClose(stream) {
	    assert(stream._inFlightCloseRequest !== undefined);
	    stream._inFlightCloseRequest._resolve(undefined);
	    stream._inFlightCloseRequest = undefined;
	    var state = stream._state;
	    assert(state === 'writable' || state === 'erroring');
	    if (state === 'erroring') {
	      stream._storedError = undefined;
	      if (stream._pendingAbortRequest !== undefined) {
	        stream._pendingAbortRequest._resolve();
	        stream._pendingAbortRequest = undefined;
	      }
	    }
	    stream._state = 'closed';
	    var writer = stream._writer;
	    if (writer !== undefined) {
	      defaultWriterClosedPromiseResolve(writer);
	    }
	    assert(stream._pendingAbortRequest === undefined, 'stream._pendingAbortRequest === undefined');
	    assert(stream._storedError === undefined, 'stream._storedError === undefined');
	  }
	  function WritableStreamFinishInFlightCloseWithError(stream, error) {
	    assert(stream._inFlightCloseRequest !== undefined);
	    stream._inFlightCloseRequest._reject(error);
	    stream._inFlightCloseRequest = undefined;
	    assert(stream._state === 'writable' || stream._state === 'erroring');
	    if (stream._pendingAbortRequest !== undefined) {
	      stream._pendingAbortRequest._reject(error);
	      stream._pendingAbortRequest = undefined;
	    }
	    WritableStreamDealWithRejection(stream, error);
	  }
	  function WritableStreamCloseQueuedOrInFlight(stream) {
	    if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {
	      return false;
	    }
	    return true;
	  }
	  function WritableStreamHasOperationMarkedInFlight(stream) {
	    if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {
	      return false;
	    }
	    return true;
	  }
	  function WritableStreamMarkCloseRequestInFlight(stream) {
	    assert(stream._inFlightCloseRequest === undefined);
	    assert(stream._closeRequest !== undefined);
	    stream._inFlightCloseRequest = stream._closeRequest;
	    stream._closeRequest = undefined;
	  }
	  function WritableStreamMarkFirstWriteRequestInFlight(stream) {
	    assert(stream._inFlightWriteRequest === undefined, 'there must be no pending write request');
	    assert(stream._writeRequests.length !== 0, 'writeRequests must not be empty');
	    stream._inFlightWriteRequest = stream._writeRequests.shift();
	  }
	  function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
	    assert(stream._state === 'errored', '_stream_.[[state]] is `"errored"`');
	    if (stream._closeRequest !== undefined) {
	      assert(stream._inFlightCloseRequest === undefined);
	      stream._closeRequest._reject(stream._storedError);
	      stream._closeRequest = undefined;
	    }
	    var writer = stream._writer;
	    if (writer !== undefined) {
	      defaultWriterClosedPromiseReject(writer, stream._storedError);
	      writer._closedPromise.catch(function () {});
	    }
	  }
	  function WritableStreamUpdateBackpressure(stream, backpressure) {
	    assert(stream._state === 'writable');
	    assert(WritableStreamCloseQueuedOrInFlight(stream) === false);
	    var writer = stream._writer;
	    if (writer !== undefined && backpressure !== stream._backpressure) {
	      if (backpressure === true) {
	        defaultWriterReadyPromiseReset(writer);
	      } else {
	        assert(backpressure === false);
	        defaultWriterReadyPromiseResolve(writer);
	      }
	    }
	    stream._backpressure = backpressure;
	  }
	  var WritableStreamDefaultWriter = function () {
	    function WritableStreamDefaultWriter(stream) {
	      _classCallCheck(this, WritableStreamDefaultWriter);
	      if (IsWritableStream(stream) === false) {
	        throw new TypeError('WritableStreamDefaultWriter can only be constructed with a WritableStream instance');
	      }
	      if (IsWritableStreamLocked(stream) === true) {
	        throw new TypeError('This stream has already been locked for exclusive writing by another writer');
	      }
	      this._ownerWritableStream = stream;
	      stream._writer = this;
	      var state = stream._state;
	      if (state === 'writable') {
	        if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._backpressure === true) {
	          defaultWriterReadyPromiseInitialize(this);
	        } else {
	          defaultWriterReadyPromiseInitializeAsResolved(this);
	        }
	        defaultWriterClosedPromiseInitialize(this);
	      } else if (state === 'erroring') {
	        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
	        this._readyPromise.catch(function () {});
	        defaultWriterClosedPromiseInitialize(this);
	      } else if (state === 'closed') {
	        defaultWriterReadyPromiseInitializeAsResolved(this);
	        defaultWriterClosedPromiseInitializeAsResolved(this);
	      } else {
	        assert(state === 'errored', 'state must be errored');
	        var storedError = stream._storedError;
	        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
	        this._readyPromise.catch(function () {});
	        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
	        this._closedPromise.catch(function () {});
	      }
	    }
	    _createClass(WritableStreamDefaultWriter, [{
	      key: 'abort',
	      value: function abort(reason) {
	        if (IsWritableStreamDefaultWriter(this) === false) {
	          return Promise.reject(defaultWriterBrandCheckException('abort'));
	        }
	        if (this._ownerWritableStream === undefined) {
	          return Promise.reject(defaultWriterLockException('abort'));
	        }
	        return WritableStreamDefaultWriterAbort(this, reason);
	      }
	    }, {
	      key: 'close',
	      value: function close() {
	        if (IsWritableStreamDefaultWriter(this) === false) {
	          return Promise.reject(defaultWriterBrandCheckException('close'));
	        }
	        var stream = this._ownerWritableStream;
	        if (stream === undefined) {
	          return Promise.reject(defaultWriterLockException('close'));
	        }
	        if (WritableStreamCloseQueuedOrInFlight(stream) === true) {
	          return Promise.reject(new TypeError('cannot close an already-closing stream'));
	        }
	        return WritableStreamDefaultWriterClose(this);
	      }
	    }, {
	      key: 'releaseLock',
	      value: function releaseLock() {
	        if (IsWritableStreamDefaultWriter(this) === false) {
	          throw defaultWriterBrandCheckException('releaseLock');
	        }
	        var stream = this._ownerWritableStream;
	        if (stream === undefined) {
	          return;
	        }
	        assert(stream._writer !== undefined);
	        WritableStreamDefaultWriterRelease(this);
	      }
	    }, {
	      key: 'write',
	      value: function write(chunk) {
	        if (IsWritableStreamDefaultWriter(this) === false) {
	          return Promise.reject(defaultWriterBrandCheckException('write'));
	        }
	        if (this._ownerWritableStream === undefined) {
	          return Promise.reject(defaultWriterLockException('write to'));
	        }
	        return WritableStreamDefaultWriterWrite(this, chunk);
	      }
	    }, {
	      key: 'closed',
	      get: function get() {
	        if (IsWritableStreamDefaultWriter(this) === false) {
	          return Promise.reject(defaultWriterBrandCheckException('closed'));
	        }
	        return this._closedPromise;
	      }
	    }, {
	      key: 'desiredSize',
	      get: function get() {
	        if (IsWritableStreamDefaultWriter(this) === false) {
	          throw defaultWriterBrandCheckException('desiredSize');
	        }
	        if (this._ownerWritableStream === undefined) {
	          throw defaultWriterLockException('desiredSize');
	        }
	        return WritableStreamDefaultWriterGetDesiredSize(this);
	      }
	    }, {
	      key: 'ready',
	      get: function get() {
	        if (IsWritableStreamDefaultWriter(this) === false) {
	          return Promise.reject(defaultWriterBrandCheckException('ready'));
	        }
	        return this._readyPromise;
	      }
	    }]);
	    return WritableStreamDefaultWriter;
	  }();
	  function IsWritableStreamDefaultWriter(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {
	      return false;
	    }
	    return true;
	  }
	  function WritableStreamDefaultWriterAbort(writer, reason) {
	    var stream = writer._ownerWritableStream;
	    assert(stream !== undefined);
	    return WritableStreamAbort(stream, reason);
	  }
	  function WritableStreamDefaultWriterClose(writer) {
	    var stream = writer._ownerWritableStream;
	    assert(stream !== undefined);
	    var state = stream._state;
	    if (state === 'closed' || state === 'errored') {
	      return Promise.reject(new TypeError('The stream (in ' + state + ' state) is not in the writable state and cannot be closed'));
	    }
	    assert(state === 'writable' || state === 'erroring');
	    assert(WritableStreamCloseQueuedOrInFlight(stream) === false);
	    var promise = new Promise(function (resolve, reject) {
	      var closeRequest = {
	        _resolve: resolve,
	        _reject: reject
	      };
	      stream._closeRequest = closeRequest;
	    });
	    if (stream._backpressure === true && state === 'writable') {
	      defaultWriterReadyPromiseResolve(writer);
	    }
	    WritableStreamDefaultControllerClose(stream._writableStreamController);
	    return promise;
	  }
	  function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
	    var stream = writer._ownerWritableStream;
	    assert(stream !== undefined);
	    var state = stream._state;
	    if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === 'closed') {
	      return Promise.resolve();
	    }
	    if (state === 'errored') {
	      return Promise.reject(stream._storedError);
	    }
	    assert(state === 'writable' || state === 'erroring');
	    return WritableStreamDefaultWriterClose(writer);
	  }
	  function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
	    if (writer._closedPromiseState === 'pending') {
	      defaultWriterClosedPromiseReject(writer, error);
	    } else {
	      defaultWriterClosedPromiseResetToRejected(writer, error);
	    }
	    writer._closedPromise.catch(function () {});
	  }
	  function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
	    if (writer._readyPromiseState === 'pending') {
	      defaultWriterReadyPromiseReject(writer, error);
	    } else {
	      defaultWriterReadyPromiseResetToRejected(writer, error);
	    }
	    writer._readyPromise.catch(function () {});
	  }
	  function WritableStreamDefaultWriterGetDesiredSize(writer) {
	    var stream = writer._ownerWritableStream;
	    var state = stream._state;
	    if (state === 'errored' || state === 'erroring') {
	      return null;
	    }
	    if (state === 'closed') {
	      return 0;
	    }
	    return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
	  }
	  function WritableStreamDefaultWriterRelease(writer) {
	    var stream = writer._ownerWritableStream;
	    assert(stream !== undefined);
	    assert(stream._writer === writer);
	    var releasedError = new TypeError('Writer was released and can no longer be used to monitor the stream\'s closedness');
	    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
	    WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
	    stream._writer = undefined;
	    writer._ownerWritableStream = undefined;
	  }
	  function WritableStreamDefaultWriterWrite(writer, chunk) {
	    var stream = writer._ownerWritableStream;
	    assert(stream !== undefined);
	    var controller = stream._writableStreamController;
	    var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
	    if (stream !== writer._ownerWritableStream) {
	      return Promise.reject(defaultWriterLockException('write to'));
	    }
	    var state = stream._state;
	    if (state === 'errored') {
	      return Promise.reject(stream._storedError);
	    }
	    if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === 'closed') {
	      return Promise.reject(new TypeError('The stream is closing or closed and cannot be written to'));
	    }
	    if (state === 'erroring') {
	      return Promise.reject(stream._storedError);
	    }
	    assert(state === 'writable');
	    var promise = WritableStreamAddWriteRequest(stream);
	    WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
	    return promise;
	  }
	  var WritableStreamDefaultController = function () {
	    function WritableStreamDefaultController(stream, underlyingSink, size, highWaterMark) {
	      _classCallCheck(this, WritableStreamDefaultController);
	      if (IsWritableStream(stream) === false) {
	        throw new TypeError('WritableStreamDefaultController can only be constructed with a WritableStream instance');
	      }
	      if (stream._writableStreamController !== undefined) {
	        throw new TypeError('WritableStreamDefaultController instances can only be created by the WritableStream constructor');
	      }
	      this._controlledWritableStream = stream;
	      this._underlyingSink = underlyingSink;
	      this._queue = undefined;
	      this._queueTotalSize = undefined;
	      ResetQueue(this);
	      this._started = false;
	      var normalizedStrategy = ValidateAndNormalizeQueuingStrategy(size, highWaterMark);
	      this._strategySize = normalizedStrategy.size;
	      this._strategyHWM = normalizedStrategy.highWaterMark;
	      var backpressure = WritableStreamDefaultControllerGetBackpressure(this);
	      WritableStreamUpdateBackpressure(stream, backpressure);
	    }
	    _createClass(WritableStreamDefaultController, [{
	      key: 'error',
	      value: function error(e) {
	        if (IsWritableStreamDefaultController(this) === false) {
	          throw new TypeError('WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController');
	        }
	        var state = this._controlledWritableStream._state;
	        if (state !== 'writable') {
	          return;
	        }
	        WritableStreamDefaultControllerError(this, e);
	      }
	    }, {
	      key: '__abortSteps',
	      value: function __abortSteps(reason) {
	        return PromiseInvokeOrNoop(this._underlyingSink, 'abort', [reason]);
	      }
	    }, {
	      key: '__errorSteps',
	      value: function __errorSteps() {
	        ResetQueue(this);
	      }
	    }, {
	      key: '__startSteps',
	      value: function __startSteps() {
	        var _this = this;
	        var startResult = InvokeOrNoop(this._underlyingSink, 'start', [this]);
	        var stream = this._controlledWritableStream;
	        Promise.resolve(startResult).then(function () {
	          assert(stream._state === 'writable' || stream._state === 'erroring');
	          _this._started = true;
	          WritableStreamDefaultControllerAdvanceQueueIfNeeded(_this);
	        }, function (r) {
	          assert(stream._state === 'writable' || stream._state === 'erroring');
	          _this._started = true;
	          WritableStreamDealWithRejection(stream, r);
	        }).catch(rethrowAssertionErrorRejection);
	      }
	    }]);
	    return WritableStreamDefaultController;
	  }();
	  function WritableStreamDefaultControllerClose(controller) {
	    EnqueueValueWithSize(controller, 'close', 0);
	    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
	  }
	  function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
	    var strategySize = controller._strategySize;
	    if (strategySize === undefined) {
	      return 1;
	    }
	    try {
	      return strategySize(chunk);
	    } catch (chunkSizeE) {
	      WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
	      return 1;
	    }
	  }
	  function WritableStreamDefaultControllerGetDesiredSize(controller) {
	    return controller._strategyHWM - controller._queueTotalSize;
	  }
	  function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
	    var writeRecord = { chunk: chunk };
	    try {
	      EnqueueValueWithSize(controller, writeRecord, chunkSize);
	    } catch (enqueueE) {
	      WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
	      return;
	    }
	    var stream = controller._controlledWritableStream;
	    if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._state === 'writable') {
	      var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
	      WritableStreamUpdateBackpressure(stream, backpressure);
	    }
	    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
	  }
	  function IsWritableStreamDefaultController(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_underlyingSink')) {
	      return false;
	    }
	    return true;
	  }
	  function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
	    var stream = controller._controlledWritableStream;
	    if (controller._started === false) {
	      return;
	    }
	    if (stream._inFlightWriteRequest !== undefined) {
	      return;
	    }
	    var state = stream._state;
	    if (state === 'closed' || state === 'errored') {
	      return;
	    }
	    if (state === 'erroring') {
	      WritableStreamFinishErroring(stream);
	      return;
	    }
	    if (controller._queue.length === 0) {
	      return;
	    }
	    var writeRecord = PeekQueueValue(controller);
	    if (writeRecord === 'close') {
	      WritableStreamDefaultControllerProcessClose(controller);
	    } else {
	      WritableStreamDefaultControllerProcessWrite(controller, writeRecord.chunk);
	    }
	  }
	  function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
	    if (controller._controlledWritableStream._state === 'writable') {
	      WritableStreamDefaultControllerError(controller, error);
	    }
	  }
	  function WritableStreamDefaultControllerProcessClose(controller) {
	    var stream = controller._controlledWritableStream;
	    WritableStreamMarkCloseRequestInFlight(stream);
	    DequeueValue(controller);
	    assert(controller._queue.length === 0, 'queue must be empty once the final write record is dequeued');
	    var sinkClosePromise = PromiseInvokeOrNoop(controller._underlyingSink, 'close', []);
	    sinkClosePromise.then(function () {
	      WritableStreamFinishInFlightClose(stream);
	    }, function (reason) {
	      WritableStreamFinishInFlightCloseWithError(stream, reason);
	    }).catch(rethrowAssertionErrorRejection);
	  }
	  function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
	    var stream = controller._controlledWritableStream;
	    WritableStreamMarkFirstWriteRequestInFlight(stream);
	    var sinkWritePromise = PromiseInvokeOrNoop(controller._underlyingSink, 'write', [chunk, controller]);
	    sinkWritePromise.then(function () {
	      WritableStreamFinishInFlightWrite(stream);
	      var state = stream._state;
	      assert(state === 'writable' || state === 'erroring');
	      DequeueValue(controller);
	      if (WritableStreamCloseQueuedOrInFlight(stream) === false && state === 'writable') {
	        var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
	        WritableStreamUpdateBackpressure(stream, backpressure);
	      }
	      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
	    }, function (reason) {
	      WritableStreamFinishInFlightWriteWithError(stream, reason);
	    }).catch(rethrowAssertionErrorRejection);
	  }
	  function WritableStreamDefaultControllerGetBackpressure(controller) {
	    var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
	    return desiredSize <= 0;
	  }
	  function WritableStreamDefaultControllerError(controller, error) {
	    var stream = controller._controlledWritableStream;
	    assert(stream._state === 'writable');
	    WritableStreamStartErroring(stream, error);
	  }
	  function streamBrandCheckException(name) {
	    return new TypeError('WritableStream.prototype.' + name + ' can only be used on a WritableStream');
	  }
	  function defaultWriterBrandCheckException(name) {
	    return new TypeError('WritableStreamDefaultWriter.prototype.' + name + ' can only be used on a WritableStreamDefaultWriter');
	  }
	  function defaultWriterLockException(name) {
	    return new TypeError('Cannot ' + name + ' a stream using a released writer');
	  }
	  function defaultWriterClosedPromiseInitialize(writer) {
	    writer._closedPromise = new Promise(function (resolve, reject) {
	      writer._closedPromise_resolve = resolve;
	      writer._closedPromise_reject = reject;
	      writer._closedPromiseState = 'pending';
	    });
	  }
	  function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
	    writer._closedPromise = Promise.reject(reason);
	    writer._closedPromise_resolve = undefined;
	    writer._closedPromise_reject = undefined;
	    writer._closedPromiseState = 'rejected';
	  }
	  function defaultWriterClosedPromiseInitializeAsResolved(writer) {
	    writer._closedPromise = Promise.resolve(undefined);
	    writer._closedPromise_resolve = undefined;
	    writer._closedPromise_reject = undefined;
	    writer._closedPromiseState = 'resolved';
	  }
	  function defaultWriterClosedPromiseReject(writer, reason) {
	    assert(writer._closedPromise_resolve !== undefined, 'writer._closedPromise_resolve !== undefined');
	    assert(writer._closedPromise_reject !== undefined, 'writer._closedPromise_reject !== undefined');
	    assert(writer._closedPromiseState === 'pending', 'writer._closedPromiseState is pending');
	    writer._closedPromise_reject(reason);
	    writer._closedPromise_resolve = undefined;
	    writer._closedPromise_reject = undefined;
	    writer._closedPromiseState = 'rejected';
	  }
	  function defaultWriterClosedPromiseResetToRejected(writer, reason) {
	    assert(writer._closedPromise_resolve === undefined, 'writer._closedPromise_resolve === undefined');
	    assert(writer._closedPromise_reject === undefined, 'writer._closedPromise_reject === undefined');
	    assert(writer._closedPromiseState !== 'pending', 'writer._closedPromiseState is not pending');
	    writer._closedPromise = Promise.reject(reason);
	    writer._closedPromiseState = 'rejected';
	  }
	  function defaultWriterClosedPromiseResolve(writer) {
	    assert(writer._closedPromise_resolve !== undefined, 'writer._closedPromise_resolve !== undefined');
	    assert(writer._closedPromise_reject !== undefined, 'writer._closedPromise_reject !== undefined');
	    assert(writer._closedPromiseState === 'pending', 'writer._closedPromiseState is pending');
	    writer._closedPromise_resolve(undefined);
	    writer._closedPromise_resolve = undefined;
	    writer._closedPromise_reject = undefined;
	    writer._closedPromiseState = 'resolved';
	  }
	  function defaultWriterReadyPromiseInitialize(writer) {
	    writer._readyPromise = new Promise(function (resolve, reject) {
	      writer._readyPromise_resolve = resolve;
	      writer._readyPromise_reject = reject;
	    });
	    writer._readyPromiseState = 'pending';
	  }
	  function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
	    writer._readyPromise = Promise.reject(reason);
	    writer._readyPromise_resolve = undefined;
	    writer._readyPromise_reject = undefined;
	    writer._readyPromiseState = 'rejected';
	  }
	  function defaultWriterReadyPromiseInitializeAsResolved(writer) {
	    writer._readyPromise = Promise.resolve(undefined);
	    writer._readyPromise_resolve = undefined;
	    writer._readyPromise_reject = undefined;
	    writer._readyPromiseState = 'fulfilled';
	  }
	  function defaultWriterReadyPromiseReject(writer, reason) {
	    assert(writer._readyPromise_resolve !== undefined, 'writer._readyPromise_resolve !== undefined');
	    assert(writer._readyPromise_reject !== undefined, 'writer._readyPromise_reject !== undefined');
	    writer._readyPromise_reject(reason);
	    writer._readyPromise_resolve = undefined;
	    writer._readyPromise_reject = undefined;
	    writer._readyPromiseState = 'rejected';
	  }
	  function defaultWriterReadyPromiseReset(writer) {
	    assert(writer._readyPromise_resolve === undefined, 'writer._readyPromise_resolve === undefined');
	    assert(writer._readyPromise_reject === undefined, 'writer._readyPromise_reject === undefined');
	    writer._readyPromise = new Promise(function (resolve, reject) {
	      writer._readyPromise_resolve = resolve;
	      writer._readyPromise_reject = reject;
	    });
	    writer._readyPromiseState = 'pending';
	  }
	  function defaultWriterReadyPromiseResetToRejected(writer, reason) {
	    assert(writer._readyPromise_resolve === undefined, 'writer._readyPromise_resolve === undefined');
	    assert(writer._readyPromise_reject === undefined, 'writer._readyPromise_reject === undefined');
	    writer._readyPromise = Promise.reject(reason);
	    writer._readyPromiseState = 'rejected';
	  }
	  function defaultWriterReadyPromiseResolve(writer) {
	    assert(writer._readyPromise_resolve !== undefined, 'writer._readyPromise_resolve !== undefined');
	    assert(writer._readyPromise_reject !== undefined, 'writer._readyPromise_reject !== undefined');
	    writer._readyPromise_resolve(undefined);
	    writer._readyPromise_resolve = undefined;
	    writer._readyPromise_reject = undefined;
	    writer._readyPromiseState = 'fulfilled';
	  }
	}, function (module, exports, __w_pdfjs_require__) {
	  "use strict";

	  var _require = __w_pdfjs_require__(0),
	      IsFiniteNonNegativeNumber = _require.IsFiniteNonNegativeNumber;
	  var _require2 = __w_pdfjs_require__(1),
	      assert = _require2.assert;
	  exports.DequeueValue = function (container) {
	    assert('_queue' in container && '_queueTotalSize' in container, 'Spec-level failure: DequeueValue should only be used on containers with [[queue]] and [[queueTotalSize]].');
	    assert(container._queue.length > 0, 'Spec-level failure: should never dequeue from an empty queue.');
	    var pair = container._queue.shift();
	    container._queueTotalSize -= pair.size;
	    if (container._queueTotalSize < 0) {
	      container._queueTotalSize = 0;
	    }
	    return pair.value;
	  };
	  exports.EnqueueValueWithSize = function (container, value, size) {
	    assert('_queue' in container && '_queueTotalSize' in container, 'Spec-level failure: EnqueueValueWithSize should only be used on containers with [[queue]] and ' + '[[queueTotalSize]].');
	    size = Number(size);
	    if (!IsFiniteNonNegativeNumber(size)) {
	      throw new RangeError('Size must be a finite, non-NaN, non-negative number.');
	    }
	    container._queue.push({
	      value: value,
	      size: size
	    });
	    container._queueTotalSize += size;
	  };
	  exports.PeekQueueValue = function (container) {
	    assert('_queue' in container && '_queueTotalSize' in container, 'Spec-level failure: PeekQueueValue should only be used on containers with [[queue]] and [[queueTotalSize]].');
	    assert(container._queue.length > 0, 'Spec-level failure: should never peek at an empty queue.');
	    var pair = container._queue[0];
	    return pair.value;
	  };
	  exports.ResetQueue = function (container) {
	    assert('_queue' in container && '_queueTotalSize' in container, 'Spec-level failure: ResetQueue should only be used on containers with [[queue]] and [[queueTotalSize]].');
	    container._queue = [];
	    container._queueTotalSize = 0;
	  };
	}, function (module, exports, __w_pdfjs_require__) {
	  "use strict";

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }
	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();
	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }
	  var _require = __w_pdfjs_require__(0),
	      ArrayBufferCopy = _require.ArrayBufferCopy,
	      CreateIterResultObject = _require.CreateIterResultObject,
	      IsFiniteNonNegativeNumber = _require.IsFiniteNonNegativeNumber,
	      InvokeOrNoop = _require.InvokeOrNoop,
	      PromiseInvokeOrNoop = _require.PromiseInvokeOrNoop,
	      TransferArrayBuffer = _require.TransferArrayBuffer,
	      ValidateAndNormalizeQueuingStrategy = _require.ValidateAndNormalizeQueuingStrategy,
	      ValidateAndNormalizeHighWaterMark = _require.ValidateAndNormalizeHighWaterMark;
	  var _require2 = __w_pdfjs_require__(0),
	      createArrayFromList = _require2.createArrayFromList,
	      createDataProperty = _require2.createDataProperty,
	      typeIsObject = _require2.typeIsObject;
	  var _require3 = __w_pdfjs_require__(1),
	      assert = _require3.assert,
	      rethrowAssertionErrorRejection = _require3.rethrowAssertionErrorRejection;
	  var _require4 = __w_pdfjs_require__(3),
	      DequeueValue = _require4.DequeueValue,
	      EnqueueValueWithSize = _require4.EnqueueValueWithSize,
	      ResetQueue = _require4.ResetQueue;
	  var _require5 = __w_pdfjs_require__(2),
	      AcquireWritableStreamDefaultWriter = _require5.AcquireWritableStreamDefaultWriter,
	      IsWritableStream = _require5.IsWritableStream,
	      IsWritableStreamLocked = _require5.IsWritableStreamLocked,
	      WritableStreamAbort = _require5.WritableStreamAbort,
	      WritableStreamDefaultWriterCloseWithErrorPropagation = _require5.WritableStreamDefaultWriterCloseWithErrorPropagation,
	      WritableStreamDefaultWriterRelease = _require5.WritableStreamDefaultWriterRelease,
	      WritableStreamDefaultWriterWrite = _require5.WritableStreamDefaultWriterWrite,
	      WritableStreamCloseQueuedOrInFlight = _require5.WritableStreamCloseQueuedOrInFlight;
	  var ReadableStream = function () {
	    function ReadableStream() {
	      var underlyingSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	          size = _ref.size,
	          highWaterMark = _ref.highWaterMark;
	      _classCallCheck(this, ReadableStream);
	      this._state = 'readable';
	      this._reader = undefined;
	      this._storedError = undefined;
	      this._disturbed = false;
	      this._readableStreamController = undefined;
	      var type = underlyingSource.type;
	      var typeString = String(type);
	      if (typeString === 'bytes') {
	        if (highWaterMark === undefined) {
	          highWaterMark = 0;
	        }
	        this._readableStreamController = new ReadableByteStreamController(this, underlyingSource, highWaterMark);
	      } else if (type === undefined) {
	        if (highWaterMark === undefined) {
	          highWaterMark = 1;
	        }
	        this._readableStreamController = new ReadableStreamDefaultController(this, underlyingSource, size, highWaterMark);
	      } else {
	        throw new RangeError('Invalid type is specified');
	      }
	    }
	    _createClass(ReadableStream, [{
	      key: 'cancel',
	      value: function cancel(reason) {
	        if (IsReadableStream(this) === false) {
	          return Promise.reject(streamBrandCheckException('cancel'));
	        }
	        if (IsReadableStreamLocked(this) === true) {
	          return Promise.reject(new TypeError('Cannot cancel a stream that already has a reader'));
	        }
	        return ReadableStreamCancel(this, reason);
	      }
	    }, {
	      key: 'getReader',
	      value: function getReader() {
	        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            mode = _ref2.mode;
	        if (IsReadableStream(this) === false) {
	          throw streamBrandCheckException('getReader');
	        }
	        if (mode === undefined) {
	          return AcquireReadableStreamDefaultReader(this);
	        }
	        mode = String(mode);
	        if (mode === 'byob') {
	          return AcquireReadableStreamBYOBReader(this);
	        }
	        throw new RangeError('Invalid mode is specified');
	      }
	    }, {
	      key: 'pipeThrough',
	      value: function pipeThrough(_ref3, options) {
	        var writable = _ref3.writable,
	            readable = _ref3.readable;
	        var promise = this.pipeTo(writable, options);
	        ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(promise);
	        return readable;
	      }
	    }, {
	      key: 'pipeTo',
	      value: function pipeTo(dest) {
	        var _this = this;
	        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	            preventClose = _ref4.preventClose,
	            preventAbort = _ref4.preventAbort,
	            preventCancel = _ref4.preventCancel;
	        if (IsReadableStream(this) === false) {
	          return Promise.reject(streamBrandCheckException('pipeTo'));
	        }
	        if (IsWritableStream(dest) === false) {
	          return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo\'s first argument must be a WritableStream'));
	        }
	        preventClose = Boolean(preventClose);
	        preventAbort = Boolean(preventAbort);
	        preventCancel = Boolean(preventCancel);
	        if (IsReadableStreamLocked(this) === true) {
	          return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));
	        }
	        if (IsWritableStreamLocked(dest) === true) {
	          return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));
	        }
	        var reader = AcquireReadableStreamDefaultReader(this);
	        var writer = AcquireWritableStreamDefaultWriter(dest);
	        var shuttingDown = false;
	        var currentWrite = Promise.resolve();
	        return new Promise(function (resolve, reject) {
	          function pipeLoop() {
	            currentWrite = Promise.resolve();
	            if (shuttingDown === true) {
	              return Promise.resolve();
	            }
	            return writer._readyPromise.then(function () {
	              return ReadableStreamDefaultReaderRead(reader).then(function (_ref5) {
	                var value = _ref5.value,
	                    done = _ref5.done;
	                if (done === true) {
	                  return;
	                }
	                currentWrite = WritableStreamDefaultWriterWrite(writer, value).catch(function () {});
	              });
	            }).then(pipeLoop);
	          }
	          isOrBecomesErrored(_this, reader._closedPromise, function (storedError) {
	            if (preventAbort === false) {
	              shutdownWithAction(function () {
	                return WritableStreamAbort(dest, storedError);
	              }, true, storedError);
	            } else {
	              shutdown(true, storedError);
	            }
	          });
	          isOrBecomesErrored(dest, writer._closedPromise, function (storedError) {
	            if (preventCancel === false) {
	              shutdownWithAction(function () {
	                return ReadableStreamCancel(_this, storedError);
	              }, true, storedError);
	            } else {
	              shutdown(true, storedError);
	            }
	          });
	          isOrBecomesClosed(_this, reader._closedPromise, function () {
	            if (preventClose === false) {
	              shutdownWithAction(function () {
	                return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);
	              });
	            } else {
	              shutdown();
	            }
	          });
	          if (WritableStreamCloseQueuedOrInFlight(dest) === true || dest._state === 'closed') {
	            var destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');
	            if (preventCancel === false) {
	              shutdownWithAction(function () {
	                return ReadableStreamCancel(_this, destClosed);
	              }, true, destClosed);
	            } else {
	              shutdown(true, destClosed);
	            }
	          }
	          pipeLoop().catch(function (err) {
	            currentWrite = Promise.resolve();
	            rethrowAssertionErrorRejection(err);
	          });
	          function waitForWritesToFinish() {
	            var oldCurrentWrite = currentWrite;
	            return currentWrite.then(function () {
	              return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined;
	            });
	          }
	          function isOrBecomesErrored(stream, promise, action) {
	            if (stream._state === 'errored') {
	              action(stream._storedError);
	            } else {
	              promise.catch(action).catch(rethrowAssertionErrorRejection);
	            }
	          }
	          function isOrBecomesClosed(stream, promise, action) {
	            if (stream._state === 'closed') {
	              action();
	            } else {
	              promise.then(action).catch(rethrowAssertionErrorRejection);
	            }
	          }
	          function shutdownWithAction(action, originalIsError, originalError) {
	            if (shuttingDown === true) {
	              return;
	            }
	            shuttingDown = true;
	            if (dest._state === 'writable' && WritableStreamCloseQueuedOrInFlight(dest) === false) {
	              waitForWritesToFinish().then(doTheRest);
	            } else {
	              doTheRest();
	            }
	            function doTheRest() {
	              action().then(function () {
	                return finalize(originalIsError, originalError);
	              }, function (newError) {
	                return finalize(true, newError);
	              }).catch(rethrowAssertionErrorRejection);
	            }
	          }
	          function shutdown(isError, error) {
	            if (shuttingDown === true) {
	              return;
	            }
	            shuttingDown = true;
	            if (dest._state === 'writable' && WritableStreamCloseQueuedOrInFlight(dest) === false) {
	              waitForWritesToFinish().then(function () {
	                return finalize(isError, error);
	              }).catch(rethrowAssertionErrorRejection);
	            } else {
	              finalize(isError, error);
	            }
	          }
	          function finalize(isError, error) {
	            WritableStreamDefaultWriterRelease(writer);
	            ReadableStreamReaderGenericRelease(reader);
	            if (isError) {
	              reject(error);
	            } else {
	              resolve(undefined);
	            }
	          }
	        });
	      }
	    }, {
	      key: 'tee',
	      value: function tee() {
	        if (IsReadableStream(this) === false) {
	          throw streamBrandCheckException('tee');
	        }
	        var branches = ReadableStreamTee(this, false);
	        return createArrayFromList(branches);
	      }
	    }, {
	      key: 'locked',
	      get: function get() {
	        if (IsReadableStream(this) === false) {
	          throw streamBrandCheckException('locked');
	        }
	        return IsReadableStreamLocked(this);
	      }
	    }]);
	    return ReadableStream;
	  }();
	  module.exports = {
	    ReadableStream: ReadableStream,
	    IsReadableStreamDisturbed: IsReadableStreamDisturbed,
	    ReadableStreamDefaultControllerClose: ReadableStreamDefaultControllerClose,
	    ReadableStreamDefaultControllerEnqueue: ReadableStreamDefaultControllerEnqueue,
	    ReadableStreamDefaultControllerError: ReadableStreamDefaultControllerError,
	    ReadableStreamDefaultControllerGetDesiredSize: ReadableStreamDefaultControllerGetDesiredSize
	  };
	  function AcquireReadableStreamBYOBReader(stream) {
	    return new ReadableStreamBYOBReader(stream);
	  }
	  function AcquireReadableStreamDefaultReader(stream) {
	    return new ReadableStreamDefaultReader(stream);
	  }
	  function IsReadableStream(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {
	      return false;
	    }
	    return true;
	  }
	  function IsReadableStreamDisturbed(stream) {
	    assert(IsReadableStream(stream) === true, 'IsReadableStreamDisturbed should only be used on known readable streams');
	    return stream._disturbed;
	  }
	  function IsReadableStreamLocked(stream) {
	    assert(IsReadableStream(stream) === true, 'IsReadableStreamLocked should only be used on known readable streams');
	    if (stream._reader === undefined) {
	      return false;
	    }
	    return true;
	  }
	  function ReadableStreamTee(stream, cloneForBranch2) {
	    assert(IsReadableStream(stream) === true);
	    assert(typeof cloneForBranch2 === 'boolean');
	    var reader = AcquireReadableStreamDefaultReader(stream);
	    var teeState = {
	      closedOrErrored: false,
	      canceled1: false,
	      canceled2: false,
	      reason1: undefined,
	      reason2: undefined
	    };
	    teeState.promise = new Promise(function (resolve) {
	      teeState._resolve = resolve;
	    });
	    var pull = create_ReadableStreamTeePullFunction();
	    pull._reader = reader;
	    pull._teeState = teeState;
	    pull._cloneForBranch2 = cloneForBranch2;
	    var cancel1 = create_ReadableStreamTeeBranch1CancelFunction();
	    cancel1._stream = stream;
	    cancel1._teeState = teeState;
	    var cancel2 = create_ReadableStreamTeeBranch2CancelFunction();
	    cancel2._stream = stream;
	    cancel2._teeState = teeState;
	    var underlyingSource1 = Object.create(Object.prototype);
	    createDataProperty(underlyingSource1, 'pull', pull);
	    createDataProperty(underlyingSource1, 'cancel', cancel1);
	    var branch1Stream = new ReadableStream(underlyingSource1);
	    var underlyingSource2 = Object.create(Object.prototype);
	    createDataProperty(underlyingSource2, 'pull', pull);
	    createDataProperty(underlyingSource2, 'cancel', cancel2);
	    var branch2Stream = new ReadableStream(underlyingSource2);
	    pull._branch1 = branch1Stream._readableStreamController;
	    pull._branch2 = branch2Stream._readableStreamController;
	    reader._closedPromise.catch(function (r) {
	      if (teeState.closedOrErrored === true) {
	        return;
	      }
	      ReadableStreamDefaultControllerError(pull._branch1, r);
	      ReadableStreamDefaultControllerError(pull._branch2, r);
	      teeState.closedOrErrored = true;
	    });
	    return [branch1Stream, branch2Stream];
	  }
	  function create_ReadableStreamTeePullFunction() {
	    function f() {
	      var reader = f._reader,
	          branch1 = f._branch1,
	          branch2 = f._branch2,
	          teeState = f._teeState;
	      return ReadableStreamDefaultReaderRead(reader).then(function (result) {
	        assert(typeIsObject(result));
	        var value = result.value;
	        var done = result.done;
	        assert(typeof done === 'boolean');
	        if (done === true && teeState.closedOrErrored === false) {
	          if (teeState.canceled1 === false) {
	            ReadableStreamDefaultControllerClose(branch1);
	          }
	          if (teeState.canceled2 === false) {
	            ReadableStreamDefaultControllerClose(branch2);
	          }
	          teeState.closedOrErrored = true;
	        }
	        if (teeState.closedOrErrored === true) {
	          return;
	        }
	        var value1 = value;
	        var value2 = value;
	        if (teeState.canceled1 === false) {
	          ReadableStreamDefaultControllerEnqueue(branch1, value1);
	        }
	        if (teeState.canceled2 === false) {
	          ReadableStreamDefaultControllerEnqueue(branch2, value2);
	        }
	      });
	    }
	    return f;
	  }
	  function create_ReadableStreamTeeBranch1CancelFunction() {
	    function f(reason) {
	      var stream = f._stream,
	          teeState = f._teeState;
	      teeState.canceled1 = true;
	      teeState.reason1 = reason;
	      if (teeState.canceled2 === true) {
	        var compositeReason = createArrayFromList([teeState.reason1, teeState.reason2]);
	        var cancelResult = ReadableStreamCancel(stream, compositeReason);
	        teeState._resolve(cancelResult);
	      }
	      return teeState.promise;
	    }
	    return f;
	  }
	  function create_ReadableStreamTeeBranch2CancelFunction() {
	    function f(reason) {
	      var stream = f._stream,
	          teeState = f._teeState;
	      teeState.canceled2 = true;
	      teeState.reason2 = reason;
	      if (teeState.canceled1 === true) {
	        var compositeReason = createArrayFromList([teeState.reason1, teeState.reason2]);
	        var cancelResult = ReadableStreamCancel(stream, compositeReason);
	        teeState._resolve(cancelResult);
	      }
	      return teeState.promise;
	    }
	    return f;
	  }
	  function ReadableStreamAddReadIntoRequest(stream) {
	    assert(IsReadableStreamBYOBReader(stream._reader) === true);
	    assert(stream._state === 'readable' || stream._state === 'closed');
	    var promise = new Promise(function (resolve, reject) {
	      var readIntoRequest = {
	        _resolve: resolve,
	        _reject: reject
	      };
	      stream._reader._readIntoRequests.push(readIntoRequest);
	    });
	    return promise;
	  }
	  function ReadableStreamAddReadRequest(stream) {
	    assert(IsReadableStreamDefaultReader(stream._reader) === true);
	    assert(stream._state === 'readable');
	    var promise = new Promise(function (resolve, reject) {
	      var readRequest = {
	        _resolve: resolve,
	        _reject: reject
	      };
	      stream._reader._readRequests.push(readRequest);
	    });
	    return promise;
	  }
	  function ReadableStreamCancel(stream, reason) {
	    stream._disturbed = true;
	    if (stream._state === 'closed') {
	      return Promise.resolve(undefined);
	    }
	    if (stream._state === 'errored') {
	      return Promise.reject(stream._storedError);
	    }
	    ReadableStreamClose(stream);
	    var sourceCancelPromise = stream._readableStreamController.__cancelSteps(reason);
	    return sourceCancelPromise.then(function () {
	      return undefined;
	    });
	  }
	  function ReadableStreamClose(stream) {
	    assert(stream._state === 'readable');
	    stream._state = 'closed';
	    var reader = stream._reader;
	    if (reader === undefined) {
	      return undefined;
	    }
	    if (IsReadableStreamDefaultReader(reader) === true) {
	      for (var i = 0; i < reader._readRequests.length; i++) {
	        var _resolve = reader._readRequests[i]._resolve;
	        _resolve(CreateIterResultObject(undefined, true));
	      }
	      reader._readRequests = [];
	    }
	    defaultReaderClosedPromiseResolve(reader);
	    return undefined;
	  }
	  function ReadableStreamError(stream, e) {
	    assert(IsReadableStream(stream) === true, 'stream must be ReadableStream');
	    assert(stream._state === 'readable', 'state must be readable');
	    stream._state = 'errored';
	    stream._storedError = e;
	    var reader = stream._reader;
	    if (reader === undefined) {
	      return undefined;
	    }
	    if (IsReadableStreamDefaultReader(reader) === true) {
	      for (var i = 0; i < reader._readRequests.length; i++) {
	        var readRequest = reader._readRequests[i];
	        readRequest._reject(e);
	      }
	      reader._readRequests = [];
	    } else {
	      assert(IsReadableStreamBYOBReader(reader), 'reader must be ReadableStreamBYOBReader');
	      for (var _i = 0; _i < reader._readIntoRequests.length; _i++) {
	        var readIntoRequest = reader._readIntoRequests[_i];
	        readIntoRequest._reject(e);
	      }
	      reader._readIntoRequests = [];
	    }
	    defaultReaderClosedPromiseReject(reader, e);
	    reader._closedPromise.catch(function () {});
	  }
	  function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
	    var reader = stream._reader;
	    assert(reader._readIntoRequests.length > 0);
	    var readIntoRequest = reader._readIntoRequests.shift();
	    readIntoRequest._resolve(CreateIterResultObject(chunk, done));
	  }
	  function ReadableStreamFulfillReadRequest(stream, chunk, done) {
	    var reader = stream._reader;
	    assert(reader._readRequests.length > 0);
	    var readRequest = reader._readRequests.shift();
	    readRequest._resolve(CreateIterResultObject(chunk, done));
	  }
	  function ReadableStreamGetNumReadIntoRequests(stream) {
	    return stream._reader._readIntoRequests.length;
	  }
	  function ReadableStreamGetNumReadRequests(stream) {
	    return stream._reader._readRequests.length;
	  }
	  function ReadableStreamHasBYOBReader(stream) {
	    var reader = stream._reader;
	    if (reader === undefined) {
	      return false;
	    }
	    if (IsReadableStreamBYOBReader(reader) === false) {
	      return false;
	    }
	    return true;
	  }
	  function ReadableStreamHasDefaultReader(stream) {
	    var reader = stream._reader;
	    if (reader === undefined) {
	      return false;
	    }
	    if (IsReadableStreamDefaultReader(reader) === false) {
	      return false;
	    }
	    return true;
	  }
	  var ReadableStreamDefaultReader = function () {
	    function ReadableStreamDefaultReader(stream) {
	      _classCallCheck(this, ReadableStreamDefaultReader);
	      if (IsReadableStream(stream) === false) {
	        throw new TypeError('ReadableStreamDefaultReader can only be constructed with a ReadableStream instance');
	      }
	      if (IsReadableStreamLocked(stream) === true) {
	        throw new TypeError('This stream has already been locked for exclusive reading by another reader');
	      }
	      ReadableStreamReaderGenericInitialize(this, stream);
	      this._readRequests = [];
	    }
	    _createClass(ReadableStreamDefaultReader, [{
	      key: 'cancel',
	      value: function cancel(reason) {
	        if (IsReadableStreamDefaultReader(this) === false) {
	          return Promise.reject(defaultReaderBrandCheckException('cancel'));
	        }
	        if (this._ownerReadableStream === undefined) {
	          return Promise.reject(readerLockException('cancel'));
	        }
	        return ReadableStreamReaderGenericCancel(this, reason);
	      }
	    }, {
	      key: 'read',
	      value: function read() {
	        if (IsReadableStreamDefaultReader(this) === false) {
	          return Promise.reject(defaultReaderBrandCheckException('read'));
	        }
	        if (this._ownerReadableStream === undefined) {
	          return Promise.reject(readerLockException('read from'));
	        }
	        return ReadableStreamDefaultReaderRead(this);
	      }
	    }, {
	      key: 'releaseLock',
	      value: function releaseLock() {
	        if (IsReadableStreamDefaultReader(this) === false) {
	          throw defaultReaderBrandCheckException('releaseLock');
	        }
	        if (this._ownerReadableStream === undefined) {
	          return;
	        }
	        if (this._readRequests.length > 0) {
	          throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');
	        }
	        ReadableStreamReaderGenericRelease(this);
	      }
	    }, {
	      key: 'closed',
	      get: function get() {
	        if (IsReadableStreamDefaultReader(this) === false) {
	          return Promise.reject(defaultReaderBrandCheckException('closed'));
	        }
	        return this._closedPromise;
	      }
	    }]);
	    return ReadableStreamDefaultReader;
	  }();
	  var ReadableStreamBYOBReader = function () {
	    function ReadableStreamBYOBReader(stream) {
	      _classCallCheck(this, ReadableStreamBYOBReader);
	      if (!IsReadableStream(stream)) {
	        throw new TypeError('ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a ' + 'byte source');
	      }
	      if (IsReadableByteStreamController(stream._readableStreamController) === false) {
	        throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' + 'source');
	      }
	      if (IsReadableStreamLocked(stream)) {
	        throw new TypeError('This stream has already been locked for exclusive reading by another reader');
	      }
	      ReadableStreamReaderGenericInitialize(this, stream);
	      this._readIntoRequests = [];
	    }
	    _createClass(ReadableStreamBYOBReader, [{
	      key: 'cancel',
	      value: function cancel(reason) {
	        if (!IsReadableStreamBYOBReader(this)) {
	          return Promise.reject(byobReaderBrandCheckException('cancel'));
	        }
	        if (this._ownerReadableStream === undefined) {
	          return Promise.reject(readerLockException('cancel'));
	        }
	        return ReadableStreamReaderGenericCancel(this, reason);
	      }
	    }, {
	      key: 'read',
	      value: function read(view) {
	        if (!IsReadableStreamBYOBReader(this)) {
	          return Promise.reject(byobReaderBrandCheckException('read'));
	        }
	        if (this._ownerReadableStream === undefined) {
	          return Promise.reject(readerLockException('read from'));
	        }
	        if (!ArrayBuffer.isView(view)) {
	          return Promise.reject(new TypeError('view must be an array buffer view'));
	        }
	        if (view.byteLength === 0) {
	          return Promise.reject(new TypeError('view must have non-zero byteLength'));
	        }
	        return ReadableStreamBYOBReaderRead(this, view);
	      }
	    }, {
	      key: 'releaseLock',
	      value: function releaseLock() {
	        if (!IsReadableStreamBYOBReader(this)) {
	          throw byobReaderBrandCheckException('releaseLock');
	        }
	        if (this._ownerReadableStream === undefined) {
	          return;
	        }
	        if (this._readIntoRequests.length > 0) {
	          throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');
	        }
	        ReadableStreamReaderGenericRelease(this);
	      }
	    }, {
	      key: 'closed',
	      get: function get() {
	        if (!IsReadableStreamBYOBReader(this)) {
	          return Promise.reject(byobReaderBrandCheckException('closed'));
	        }
	        return this._closedPromise;
	      }
	    }]);
	    return ReadableStreamBYOBReader;
	  }();
	  function IsReadableStreamBYOBReader(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {
	      return false;
	    }
	    return true;
	  }
	  function IsReadableStreamDefaultReader(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {
	      return false;
	    }
	    return true;
	  }
	  function ReadableStreamReaderGenericInitialize(reader, stream) {
	    reader._ownerReadableStream = stream;
	    stream._reader = reader;
	    if (stream._state === 'readable') {
	      defaultReaderClosedPromiseInitialize(reader);
	    } else if (stream._state === 'closed') {
	      defaultReaderClosedPromiseInitializeAsResolved(reader);
	    } else {
	      assert(stream._state === 'errored', 'state must be errored');
	      defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
	      reader._closedPromise.catch(function () {});
	    }
	  }
	  function ReadableStreamReaderGenericCancel(reader, reason) {
	    var stream = reader._ownerReadableStream;
	    assert(stream !== undefined);
	    return ReadableStreamCancel(stream, reason);
	  }
	  function ReadableStreamReaderGenericRelease(reader) {
	    assert(reader._ownerReadableStream !== undefined);
	    assert(reader._ownerReadableStream._reader === reader);
	    if (reader._ownerReadableStream._state === 'readable') {
	      defaultReaderClosedPromiseReject(reader, new TypeError('Reader was released and can no longer be used to monitor the stream\'s closedness'));
	    } else {
	      defaultReaderClosedPromiseResetToRejected(reader, new TypeError('Reader was released and can no longer be used to monitor the stream\'s closedness'));
	    }
	    reader._closedPromise.catch(function () {});
	    reader._ownerReadableStream._reader = undefined;
	    reader._ownerReadableStream = undefined;
	  }
	  function ReadableStreamBYOBReaderRead(reader, view) {
	    var stream = reader._ownerReadableStream;
	    assert(stream !== undefined);
	    stream._disturbed = true;
	    if (stream._state === 'errored') {
	      return Promise.reject(stream._storedError);
	    }
	    return ReadableByteStreamControllerPullInto(stream._readableStreamController, view);
	  }
	  function ReadableStreamDefaultReaderRead(reader) {
	    var stream = reader._ownerReadableStream;
	    assert(stream !== undefined);
	    stream._disturbed = true;
	    if (stream._state === 'closed') {
	      return Promise.resolve(CreateIterResultObject(undefined, true));
	    }
	    if (stream._state === 'errored') {
	      return Promise.reject(stream._storedError);
	    }
	    assert(stream._state === 'readable');
	    return stream._readableStreamController.__pullSteps();
	  }
	  var ReadableStreamDefaultController = function () {
	    function ReadableStreamDefaultController(stream, underlyingSource, size, highWaterMark) {
	      _classCallCheck(this, ReadableStreamDefaultController);
	      if (IsReadableStream(stream) === false) {
	        throw new TypeError('ReadableStreamDefaultController can only be constructed with a ReadableStream instance');
	      }
	      if (stream._readableStreamController !== undefined) {
	        throw new TypeError('ReadableStreamDefaultController instances can only be created by the ReadableStream constructor');
	      }
	      this._controlledReadableStream = stream;
	      this._underlyingSource = underlyingSource;
	      this._queue = undefined;
	      this._queueTotalSize = undefined;
	      ResetQueue(this);
	      this._started = false;
	      this._closeRequested = false;
	      this._pullAgain = false;
	      this._pulling = false;
	      var normalizedStrategy = ValidateAndNormalizeQueuingStrategy(size, highWaterMark);
	      this._strategySize = normalizedStrategy.size;
	      this._strategyHWM = normalizedStrategy.highWaterMark;
	      var controller = this;
	      var startResult = InvokeOrNoop(underlyingSource, 'start', [this]);
	      Promise.resolve(startResult).then(function () {
	        controller._started = true;
	        assert(controller._pulling === false);
	        assert(controller._pullAgain === false);
	        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
	      }, function (r) {
	        ReadableStreamDefaultControllerErrorIfNeeded(controller, r);
	      }).catch(rethrowAssertionErrorRejection);
	    }
	    _createClass(ReadableStreamDefaultController, [{
	      key: 'close',
	      value: function close() {
	        if (IsReadableStreamDefaultController(this) === false) {
	          throw defaultControllerBrandCheckException('close');
	        }
	        if (this._closeRequested === true) {
	          throw new TypeError('The stream has already been closed; do not close it again!');
	        }
	        var state = this._controlledReadableStream._state;
	        if (state !== 'readable') {
	          throw new TypeError('The stream (in ' + state + ' state) is not in the readable state and cannot be closed');
	        }
	        ReadableStreamDefaultControllerClose(this);
	      }
	    }, {
	      key: 'enqueue',
	      value: function enqueue(chunk) {
	        if (IsReadableStreamDefaultController(this) === false) {
	          throw defaultControllerBrandCheckException('enqueue');
	        }
	        if (this._closeRequested === true) {
	          throw new TypeError('stream is closed or draining');
	        }
	        var state = this._controlledReadableStream._state;
	        if (state !== 'readable') {
	          throw new TypeError('The stream (in ' + state + ' state) is not in the readable state and cannot be enqueued to');
	        }
	        return ReadableStreamDefaultControllerEnqueue(this, chunk);
	      }
	    }, {
	      key: 'error',
	      value: function error(e) {
	        if (IsReadableStreamDefaultController(this) === false) {
	          throw defaultControllerBrandCheckException('error');
	        }
	        var stream = this._controlledReadableStream;
	        if (stream._state !== 'readable') {
	          throw new TypeError('The stream is ' + stream._state + ' and so cannot be errored');
	        }
	        ReadableStreamDefaultControllerError(this, e);
	      }
	    }, {
	      key: '__cancelSteps',
	      value: function __cancelSteps(reason) {
	        ResetQueue(this);
	        return PromiseInvokeOrNoop(this._underlyingSource, 'cancel', [reason]);
	      }
	    }, {
	      key: '__pullSteps',
	      value: function __pullSteps() {
	        var stream = this._controlledReadableStream;
	        if (this._queue.length > 0) {
	          var chunk = DequeueValue(this);
	          if (this._closeRequested === true && this._queue.length === 0) {
	            ReadableStreamClose(stream);
	          } else {
	            ReadableStreamDefaultControllerCallPullIfNeeded(this);
	          }
	          return Promise.resolve(CreateIterResultObject(chunk, false));
	        }
	        var pendingPromise = ReadableStreamAddReadRequest(stream);
	        ReadableStreamDefaultControllerCallPullIfNeeded(this);
	        return pendingPromise;
	      }
	    }, {
	      key: 'desiredSize',
	      get: function get() {
	        if (IsReadableStreamDefaultController(this) === false) {
	          throw defaultControllerBrandCheckException('desiredSize');
	        }
	        return ReadableStreamDefaultControllerGetDesiredSize(this);
	      }
	    }]);
	    return ReadableStreamDefaultController;
	  }();
	  function IsReadableStreamDefaultController(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_underlyingSource')) {
	      return false;
	    }
	    return true;
	  }
	  function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
	    var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
	    if (shouldPull === false) {
	      return undefined;
	    }
	    if (controller._pulling === true) {
	      controller._pullAgain = true;
	      return undefined;
	    }
	    assert(controller._pullAgain === false);
	    controller._pulling = true;
	    var pullPromise = PromiseInvokeOrNoop(controller._underlyingSource, 'pull', [controller]);
	    pullPromise.then(function () {
	      controller._pulling = false;
	      if (controller._pullAgain === true) {
	        controller._pullAgain = false;
	        return ReadableStreamDefaultControllerCallPullIfNeeded(controller);
	      }
	      return undefined;
	    }, function (e) {
	      ReadableStreamDefaultControllerErrorIfNeeded(controller, e);
	    }).catch(rethrowAssertionErrorRejection);
	    return undefined;
	  }
	  function ReadableStreamDefaultControllerShouldCallPull(controller) {
	    var stream = controller._controlledReadableStream;
	    if (stream._state === 'closed' || stream._state === 'errored') {
	      return false;
	    }
	    if (controller._closeRequested === true) {
	      return false;
	    }
	    if (controller._started === false) {
	      return false;
	    }
	    if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {
	      return true;
	    }
	    var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
	    if (desiredSize > 0) {
	      return true;
	    }
	    return false;
	  }
	  function ReadableStreamDefaultControllerClose(controller) {
	    var stream = controller._controlledReadableStream;
	    assert(controller._closeRequested === false);
	    assert(stream._state === 'readable');
	    controller._closeRequested = true;
	    if (controller._queue.length === 0) {
	      ReadableStreamClose(stream);
	    }
	  }
	  function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
	    var stream = controller._controlledReadableStream;
	    assert(controller._closeRequested === false);
	    assert(stream._state === 'readable');
	    if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {
	      ReadableStreamFulfillReadRequest(stream, chunk, false);
	    } else {
	      var chunkSize = 1;
	      if (controller._strategySize !== undefined) {
	        var strategySize = controller._strategySize;
	        try {
	          chunkSize = strategySize(chunk);
	        } catch (chunkSizeE) {
	          ReadableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
	          throw chunkSizeE;
	        }
	      }
	      try {
	        EnqueueValueWithSize(controller, chunk, chunkSize);
	      } catch (enqueueE) {
	        ReadableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
	        throw enqueueE;
	      }
	    }
	    ReadableStreamDefaultControllerCallPullIfNeeded(controller);
	    return undefined;
	  }
	  function ReadableStreamDefaultControllerError(controller, e) {
	    var stream = controller._controlledReadableStream;
	    assert(stream._state === 'readable');
	    ResetQueue(controller);
	    ReadableStreamError(stream, e);
	  }
	  function ReadableStreamDefaultControllerErrorIfNeeded(controller, e) {
	    if (controller._controlledReadableStream._state === 'readable') {
	      ReadableStreamDefaultControllerError(controller, e);
	    }
	  }
	  function ReadableStreamDefaultControllerGetDesiredSize(controller) {
	    var stream = controller._controlledReadableStream;
	    var state = stream._state;
	    if (state === 'errored') {
	      return null;
	    }
	    if (state === 'closed') {
	      return 0;
	    }
	    return controller._strategyHWM - controller._queueTotalSize;
	  }
	  var ReadableStreamBYOBRequest = function () {
	    function ReadableStreamBYOBRequest(controller, view) {
	      _classCallCheck(this, ReadableStreamBYOBRequest);
	      this._associatedReadableByteStreamController = controller;
	      this._view = view;
	    }
	    _createClass(ReadableStreamBYOBRequest, [{
	      key: 'respond',
	      value: function respond(bytesWritten) {
	        if (IsReadableStreamBYOBRequest(this) === false) {
	          throw byobRequestBrandCheckException('respond');
	        }
	        if (this._associatedReadableByteStreamController === undefined) {
	          throw new TypeError('This BYOB request has been invalidated');
	        }
	        ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
	      }
	    }, {
	      key: 'respondWithNewView',
	      value: function respondWithNewView(view) {
	        if (IsReadableStreamBYOBRequest(this) === false) {
	          throw byobRequestBrandCheckException('respond');
	        }
	        if (this._associatedReadableByteStreamController === undefined) {
	          throw new TypeError('This BYOB request has been invalidated');
	        }
	        if (!ArrayBuffer.isView(view)) {
	          throw new TypeError('You can only respond with array buffer views');
	        }
	        ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
	      }
	    }, {
	      key: 'view',
	      get: function get() {
	        return this._view;
	      }
	    }]);
	    return ReadableStreamBYOBRequest;
	  }();
	  var ReadableByteStreamController = function () {
	    function ReadableByteStreamController(stream, underlyingByteSource, highWaterMark) {
	      _classCallCheck(this, ReadableByteStreamController);
	      if (IsReadableStream(stream) === false) {
	        throw new TypeError('ReadableByteStreamController can only be constructed with a ReadableStream instance given ' + 'a byte source');
	      }
	      if (stream._readableStreamController !== undefined) {
	        throw new TypeError('ReadableByteStreamController instances can only be created by the ReadableStream constructor given a byte ' + 'source');
	      }
	      this._controlledReadableStream = stream;
	      this._underlyingByteSource = underlyingByteSource;
	      this._pullAgain = false;
	      this._pulling = false;
	      ReadableByteStreamControllerClearPendingPullIntos(this);
	      this._queue = this._queueTotalSize = undefined;
	      ResetQueue(this);
	      this._closeRequested = false;
	      this._started = false;
	      this._strategyHWM = ValidateAndNormalizeHighWaterMark(highWaterMark);
	      var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
	      if (autoAllocateChunkSize !== undefined) {
	        if (Number.isInteger(autoAllocateChunkSize) === false || autoAllocateChunkSize <= 0) {
	          throw new RangeError('autoAllocateChunkSize must be a positive integer');
	        }
	      }
	      this._autoAllocateChunkSize = autoAllocateChunkSize;
	      this._pendingPullIntos = [];
	      var controller = this;
	      var startResult = InvokeOrNoop(underlyingByteSource, 'start', [this]);
	      Promise.resolve(startResult).then(function () {
	        controller._started = true;
	        assert(controller._pulling === false);
	        assert(controller._pullAgain === false);
	        ReadableByteStreamControllerCallPullIfNeeded(controller);
	      }, function (r) {
	        if (stream._state === 'readable') {
	          ReadableByteStreamControllerError(controller, r);
	        }
	      }).catch(rethrowAssertionErrorRejection);
	    }
	    _createClass(ReadableByteStreamController, [{
	      key: 'close',
	      value: function close() {
	        if (IsReadableByteStreamController(this) === false) {
	          throw byteStreamControllerBrandCheckException('close');
	        }
	        if (this._closeRequested === true) {
	          throw new TypeError('The stream has already been closed; do not close it again!');
	        }
	        var state = this._controlledReadableStream._state;
	        if (state !== 'readable') {
	          throw new TypeError('The stream (in ' + state + ' state) is not in the readable state and cannot be closed');
	        }
	        ReadableByteStreamControllerClose(this);
	      }
	    }, {
	      key: 'enqueue',
	      value: function enqueue(chunk) {
	        if (IsReadableByteStreamController(this) === false) {
	          throw byteStreamControllerBrandCheckException('enqueue');
	        }
	        if (this._closeRequested === true) {
	          throw new TypeError('stream is closed or draining');
	        }
	        var state = this._controlledReadableStream._state;
	        if (state !== 'readable') {
	          throw new TypeError('The stream (in ' + state + ' state) is not in the readable state and cannot be enqueued to');
	        }
	        if (!ArrayBuffer.isView(chunk)) {
	          throw new TypeError('You can only enqueue array buffer views when using a ReadableByteStreamController');
	        }
	        ReadableByteStreamControllerEnqueue(this, chunk);
	      }
	    }, {
	      key: 'error',
	      value: function error(e) {
	        if (IsReadableByteStreamController(this) === false) {
	          throw byteStreamControllerBrandCheckException('error');
	        }
	        var stream = this._controlledReadableStream;
	        if (stream._state !== 'readable') {
	          throw new TypeError('The stream is ' + stream._state + ' and so cannot be errored');
	        }
	        ReadableByteStreamControllerError(this, e);
	      }
	    }, {
	      key: '__cancelSteps',
	      value: function __cancelSteps(reason) {
	        if (this._pendingPullIntos.length > 0) {
	          var firstDescriptor = this._pendingPullIntos[0];
	          firstDescriptor.bytesFilled = 0;
	        }
	        ResetQueue(this);
	        return PromiseInvokeOrNoop(this._underlyingByteSource, 'cancel', [reason]);
	      }
	    }, {
	      key: '__pullSteps',
	      value: function __pullSteps() {
	        var stream = this._controlledReadableStream;
	        assert(ReadableStreamHasDefaultReader(stream) === true);
	        if (this._queueTotalSize > 0) {
	          assert(ReadableStreamGetNumReadRequests(stream) === 0);
	          var entry = this._queue.shift();
	          this._queueTotalSize -= entry.byteLength;
	          ReadableByteStreamControllerHandleQueueDrain(this);
	          var view = void 0;
	          try {
	            view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
	          } catch (viewE) {
	            return Promise.reject(viewE);
	          }
	          return Promise.resolve(CreateIterResultObject(view, false));
	        }
	        var autoAllocateChunkSize = this._autoAllocateChunkSize;
	        if (autoAllocateChunkSize !== undefined) {
	          var buffer = void 0;
	          try {
	            buffer = new ArrayBuffer(autoAllocateChunkSize);
	          } catch (bufferE) {
	            return Promise.reject(bufferE);
	          }
	          var pullIntoDescriptor = {
	            buffer: buffer,
	            byteOffset: 0,
	            byteLength: autoAllocateChunkSize,
	            bytesFilled: 0,
	            elementSize: 1,
	            ctor: Uint8Array,
	            readerType: 'default'
	          };
	          this._pendingPullIntos.push(pullIntoDescriptor);
	        }
	        var promise = ReadableStreamAddReadRequest(stream);
	        ReadableByteStreamControllerCallPullIfNeeded(this);
	        return promise;
	      }
	    }, {
	      key: 'byobRequest',
	      get: function get() {
	        if (IsReadableByteStreamController(this) === false) {
	          throw byteStreamControllerBrandCheckException('byobRequest');
	        }
	        if (this._byobRequest === undefined && this._pendingPullIntos.length > 0) {
	          var firstDescriptor = this._pendingPullIntos[0];
	          var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
	          this._byobRequest = new ReadableStreamBYOBRequest(this, view);
	        }
	        return this._byobRequest;
	      }
	    }, {
	      key: 'desiredSize',
	      get: function get() {
	        if (IsReadableByteStreamController(this) === false) {
	          throw byteStreamControllerBrandCheckException('desiredSize');
	        }
	        return ReadableByteStreamControllerGetDesiredSize(this);
	      }
	    }]);
	    return ReadableByteStreamController;
	  }();
	  function IsReadableByteStreamController(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_underlyingByteSource')) {
	      return false;
	    }
	    return true;
	  }
	  function IsReadableStreamBYOBRequest(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {
	      return false;
	    }
	    return true;
	  }
	  function ReadableByteStreamControllerCallPullIfNeeded(controller) {
	    var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
	    if (shouldPull === false) {
	      return undefined;
	    }
	    if (controller._pulling === true) {
	      controller._pullAgain = true;
	      return undefined;
	    }
	    assert(controller._pullAgain === false);
	    controller._pulling = true;
	    var pullPromise = PromiseInvokeOrNoop(controller._underlyingByteSource, 'pull', [controller]);
	    pullPromise.then(function () {
	      controller._pulling = false;
	      if (controller._pullAgain === true) {
	        controller._pullAgain = false;
	        ReadableByteStreamControllerCallPullIfNeeded(controller);
	      }
	    }, function (e) {
	      if (controller._controlledReadableStream._state === 'readable') {
	        ReadableByteStreamControllerError(controller, e);
	      }
	    }).catch(rethrowAssertionErrorRejection);
	    return undefined;
	  }
	  function ReadableByteStreamControllerClearPendingPullIntos(controller) {
	    ReadableByteStreamControllerInvalidateBYOBRequest(controller);
	    controller._pendingPullIntos = [];
	  }
	  function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
	    assert(stream._state !== 'errored', 'state must not be errored');
	    var done = false;
	    if (stream._state === 'closed') {
	      assert(pullIntoDescriptor.bytesFilled === 0);
	      done = true;
	    }
	    var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
	    if (pullIntoDescriptor.readerType === 'default') {
	      ReadableStreamFulfillReadRequest(stream, filledView, done);
	    } else {
	      assert(pullIntoDescriptor.readerType === 'byob');
	      ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
	    }
	  }
	  function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
	    var bytesFilled = pullIntoDescriptor.bytesFilled;
	    var elementSize = pullIntoDescriptor.elementSize;
	    assert(bytesFilled <= pullIntoDescriptor.byteLength);
	    assert(bytesFilled % elementSize === 0);
	    return new pullIntoDescriptor.ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
	  }
	  function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
	    controller._queue.push({
	      buffer: buffer,
	      byteOffset: byteOffset,
	      byteLength: byteLength
	    });
	    controller._queueTotalSize += byteLength;
	  }
	  function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
	    var elementSize = pullIntoDescriptor.elementSize;
	    var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
	    var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
	    var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
	    var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
	    var totalBytesToCopyRemaining = maxBytesToCopy;
	    var ready = false;
	    if (maxAlignedBytes > currentAlignedBytes) {
	      totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
	      ready = true;
	    }
	    var queue = controller._queue;
	    while (totalBytesToCopyRemaining > 0) {
	      var headOfQueue = queue[0];
	      var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
	      var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
	      ArrayBufferCopy(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
	      if (headOfQueue.byteLength === bytesToCopy) {
	        queue.shift();
	      } else {
	        headOfQueue.byteOffset += bytesToCopy;
	        headOfQueue.byteLength -= bytesToCopy;
	      }
	      controller._queueTotalSize -= bytesToCopy;
	      ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
	      totalBytesToCopyRemaining -= bytesToCopy;
	    }
	    if (ready === false) {
	      assert(controller._queueTotalSize === 0, 'queue must be empty');
	      assert(pullIntoDescriptor.bytesFilled > 0);
	      assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);
	    }
	    return ready;
	  }
	  function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
	    assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos[0] === pullIntoDescriptor);
	    ReadableByteStreamControllerInvalidateBYOBRequest(controller);
	    pullIntoDescriptor.bytesFilled += size;
	  }
	  function ReadableByteStreamControllerHandleQueueDrain(controller) {
	    assert(controller._controlledReadableStream._state === 'readable');
	    if (controller._queueTotalSize === 0 && controller._closeRequested === true) {
	      ReadableStreamClose(controller._controlledReadableStream);
	    } else {
	      ReadableByteStreamControllerCallPullIfNeeded(controller);
	    }
	  }
	  function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
	    if (controller._byobRequest === undefined) {
	      return;
	    }
	    controller._byobRequest._associatedReadableByteStreamController = undefined;
	    controller._byobRequest._view = undefined;
	    controller._byobRequest = undefined;
	  }
	  function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
	    assert(controller._closeRequested === false);
	    while (controller._pendingPullIntos.length > 0) {
	      if (controller._queueTotalSize === 0) {
	        return;
	      }
	      var pullIntoDescriptor = controller._pendingPullIntos[0];
	      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {
	        ReadableByteStreamControllerShiftPendingPullInto(controller);
	        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableStream, pullIntoDescriptor);
	      }
	    }
	  }
	  function ReadableByteStreamControllerPullInto(controller, view) {
	    var stream = controller._controlledReadableStream;
	    var elementSize = 1;
	    if (view.constructor !== DataView) {
	      elementSize = view.constructor.BYTES_PER_ELEMENT;
	    }
	    var ctor = view.constructor;
	    var pullIntoDescriptor = {
	      buffer: view.buffer,
	      byteOffset: view.byteOffset,
	      byteLength: view.byteLength,
	      bytesFilled: 0,
	      elementSize: elementSize,
	      ctor: ctor,
	      readerType: 'byob'
	    };
	    if (controller._pendingPullIntos.length > 0) {
	      pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);
	      controller._pendingPullIntos.push(pullIntoDescriptor);
	      return ReadableStreamAddReadIntoRequest(stream);
	    }
	    if (stream._state === 'closed') {
	      var emptyView = new view.constructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
	      return Promise.resolve(CreateIterResultObject(emptyView, true));
	    }
	    if (controller._queueTotalSize > 0) {
	      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {
	        var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
	        ReadableByteStreamControllerHandleQueueDrain(controller);
	        return Promise.resolve(CreateIterResultObject(filledView, false));
	      }
	      if (controller._closeRequested === true) {
	        var e = new TypeError('Insufficient bytes to fill elements in the given buffer');
	        ReadableByteStreamControllerError(controller, e);
	        return Promise.reject(e);
	      }
	    }
	    pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);
	    controller._pendingPullIntos.push(pullIntoDescriptor);
	    var promise = ReadableStreamAddReadIntoRequest(stream);
	    ReadableByteStreamControllerCallPullIfNeeded(controller);
	    return promise;
	  }
	  function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
	    firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
	    assert(firstDescriptor.bytesFilled === 0, 'bytesFilled must be 0');
	    var stream = controller._controlledReadableStream;
	    if (ReadableStreamHasBYOBReader(stream) === true) {
	      while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
	        var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
	        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
	      }
	    }
	  }
	  function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
	    if (pullIntoDescriptor.bytesFilled + bytesWritten > pullIntoDescriptor.byteLength) {
	      throw new RangeError('bytesWritten out of range');
	    }
	    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
	    if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
	      return;
	    }
	    ReadableByteStreamControllerShiftPendingPullInto(controller);
	    var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
	    if (remainderSize > 0) {
	      var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
	      var remainder = pullIntoDescriptor.buffer.slice(end - remainderSize, end);
	      ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
	    }
	    pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);
	    pullIntoDescriptor.bytesFilled -= remainderSize;
	    ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableStream, pullIntoDescriptor);
	    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
	  }
	  function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
	    var firstDescriptor = controller._pendingPullIntos[0];
	    var stream = controller._controlledReadableStream;
	    if (stream._state === 'closed') {
	      if (bytesWritten !== 0) {
	        throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');
	      }
	      ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);
	    } else {
	      assert(stream._state === 'readable');
	      ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
	    }
	  }
	  function ReadableByteStreamControllerShiftPendingPullInto(controller) {
	    var descriptor = controller._pendingPullIntos.shift();
	    ReadableByteStreamControllerInvalidateBYOBRequest(controller);
	    return descriptor;
	  }
	  function ReadableByteStreamControllerShouldCallPull(controller) {
	    var stream = controller._controlledReadableStream;
	    if (stream._state !== 'readable') {
	      return false;
	    }
	    if (controller._closeRequested === true) {
	      return false;
	    }
	    if (controller._started === false) {
	      return false;
	    }
	    if (ReadableStreamHasDefaultReader(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {
	      return true;
	    }
	    if (ReadableStreamHasBYOBReader(stream) === true && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
	      return true;
	    }
	    if (ReadableByteStreamControllerGetDesiredSize(controller) > 0) {
	      return true;
	    }
	    return false;
	  }
	  function ReadableByteStreamControllerClose(controller) {
	    var stream = controller._controlledReadableStream;
	    assert(controller._closeRequested === false);
	    assert(stream._state === 'readable');
	    if (controller._queueTotalSize > 0) {
	      controller._closeRequested = true;
	      return;
	    }
	    if (controller._pendingPullIntos.length > 0) {
	      var firstPendingPullInto = controller._pendingPullIntos[0];
	      if (firstPendingPullInto.bytesFilled > 0) {
	        var e = new TypeError('Insufficient bytes to fill elements in the given buffer');
	        ReadableByteStreamControllerError(controller, e);
	        throw e;
	      }
	    }
	    ReadableStreamClose(stream);
	  }
	  function ReadableByteStreamControllerEnqueue(controller, chunk) {
	    var stream = controller._controlledReadableStream;
	    assert(controller._closeRequested === false);
	    assert(stream._state === 'readable');
	    var buffer = chunk.buffer;
	    var byteOffset = chunk.byteOffset;
	    var byteLength = chunk.byteLength;
	    var transferredBuffer = TransferArrayBuffer(buffer);
	    if (ReadableStreamHasDefaultReader(stream) === true) {
	      if (ReadableStreamGetNumReadRequests(stream) === 0) {
	        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
	      } else {
	        assert(controller._queue.length === 0);
	        var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
	        ReadableStreamFulfillReadRequest(stream, transferredView, false);
	      }
	    } else if (ReadableStreamHasBYOBReader(stream) === true) {
	      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
	      ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
	    } else {
	      assert(IsReadableStreamLocked(stream) === false, 'stream must not be locked');
	      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
	    }
	  }
	  function ReadableByteStreamControllerError(controller, e) {
	    var stream = controller._controlledReadableStream;
	    assert(stream._state === 'readable');
	    ReadableByteStreamControllerClearPendingPullIntos(controller);
	    ResetQueue(controller);
	    ReadableStreamError(stream, e);
	  }
	  function ReadableByteStreamControllerGetDesiredSize(controller) {
	    var stream = controller._controlledReadableStream;
	    var state = stream._state;
	    if (state === 'errored') {
	      return null;
	    }
	    if (state === 'closed') {
	      return 0;
	    }
	    return controller._strategyHWM - controller._queueTotalSize;
	  }
	  function ReadableByteStreamControllerRespond(controller, bytesWritten) {
	    bytesWritten = Number(bytesWritten);
	    if (IsFiniteNonNegativeNumber(bytesWritten) === false) {
	      throw new RangeError('bytesWritten must be a finite');
	    }
	    assert(controller._pendingPullIntos.length > 0);
	    ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
	  }
	  function ReadableByteStreamControllerRespondWithNewView(controller, view) {
	    assert(controller._pendingPullIntos.length > 0);
	    var firstDescriptor = controller._pendingPullIntos[0];
	    if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
	      throw new RangeError('The region specified by view does not match byobRequest');
	    }
	    if (firstDescriptor.byteLength !== view.byteLength) {
	      throw new RangeError('The buffer of view has different capacity than byobRequest');
	    }
	    firstDescriptor.buffer = view.buffer;
	    ReadableByteStreamControllerRespondInternal(controller, view.byteLength);
	  }
	  function streamBrandCheckException(name) {
	    return new TypeError('ReadableStream.prototype.' + name + ' can only be used on a ReadableStream');
	  }
	  function readerLockException(name) {
	    return new TypeError('Cannot ' + name + ' a stream using a released reader');
	  }
	  function defaultReaderBrandCheckException(name) {
	    return new TypeError('ReadableStreamDefaultReader.prototype.' + name + ' can only be used on a ReadableStreamDefaultReader');
	  }
	  function defaultReaderClosedPromiseInitialize(reader) {
	    reader._closedPromise = new Promise(function (resolve, reject) {
	      reader._closedPromise_resolve = resolve;
	      reader._closedPromise_reject = reject;
	    });
	  }
	  function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
	    reader._closedPromise = Promise.reject(reason);
	    reader._closedPromise_resolve = undefined;
	    reader._closedPromise_reject = undefined;
	  }
	  function defaultReaderClosedPromiseInitializeAsResolved(reader) {
	    reader._closedPromise = Promise.resolve(undefined);
	    reader._closedPromise_resolve = undefined;
	    reader._closedPromise_reject = undefined;
	  }
	  function defaultReaderClosedPromiseReject(reader, reason) {
	    assert(reader._closedPromise_resolve !== undefined);
	    assert(reader._closedPromise_reject !== undefined);
	    reader._closedPromise_reject(reason);
	    reader._closedPromise_resolve = undefined;
	    reader._closedPromise_reject = undefined;
	  }
	  function defaultReaderClosedPromiseResetToRejected(reader, reason) {
	    assert(reader._closedPromise_resolve === undefined);
	    assert(reader._closedPromise_reject === undefined);
	    reader._closedPromise = Promise.reject(reason);
	  }
	  function defaultReaderClosedPromiseResolve(reader) {
	    assert(reader._closedPromise_resolve !== undefined);
	    assert(reader._closedPromise_reject !== undefined);
	    reader._closedPromise_resolve(undefined);
	    reader._closedPromise_resolve = undefined;
	    reader._closedPromise_reject = undefined;
	  }
	  function byobReaderBrandCheckException(name) {
	    return new TypeError('ReadableStreamBYOBReader.prototype.' + name + ' can only be used on a ReadableStreamBYOBReader');
	  }
	  function defaultControllerBrandCheckException(name) {
	    return new TypeError('ReadableStreamDefaultController.prototype.' + name + ' can only be used on a ReadableStreamDefaultController');
	  }
	  function byobRequestBrandCheckException(name) {
	    return new TypeError('ReadableStreamBYOBRequest.prototype.' + name + ' can only be used on a ReadableStreamBYOBRequest');
	  }
	  function byteStreamControllerBrandCheckException(name) {
	    return new TypeError('ReadableByteStreamController.prototype.' + name + ' can only be used on a ReadableByteStreamController');
	  }
	  function ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(promise) {
	    try {
	      Promise.prototype.then.call(promise, undefined, function () {});
	    } catch (e) {}
	  }
	}, function (module, exports, __w_pdfjs_require__) {
	  "use strict";

	  var transformStream = __w_pdfjs_require__(6);
	  var readableStream = __w_pdfjs_require__(4);
	  var writableStream = __w_pdfjs_require__(2);
	  exports.TransformStream = transformStream.TransformStream;
	  exports.ReadableStream = readableStream.ReadableStream;
	  exports.IsReadableStreamDisturbed = readableStream.IsReadableStreamDisturbed;
	  exports.ReadableStreamDefaultControllerClose = readableStream.ReadableStreamDefaultControllerClose;
	  exports.ReadableStreamDefaultControllerEnqueue = readableStream.ReadableStreamDefaultControllerEnqueue;
	  exports.ReadableStreamDefaultControllerError = readableStream.ReadableStreamDefaultControllerError;
	  exports.ReadableStreamDefaultControllerGetDesiredSize = readableStream.ReadableStreamDefaultControllerGetDesiredSize;
	  exports.AcquireWritableStreamDefaultWriter = writableStream.AcquireWritableStreamDefaultWriter;
	  exports.IsWritableStream = writableStream.IsWritableStream;
	  exports.IsWritableStreamLocked = writableStream.IsWritableStreamLocked;
	  exports.WritableStream = writableStream.WritableStream;
	  exports.WritableStreamAbort = writableStream.WritableStreamAbort;
	  exports.WritableStreamDefaultControllerError = writableStream.WritableStreamDefaultControllerError;
	  exports.WritableStreamDefaultWriterCloseWithErrorPropagation = writableStream.WritableStreamDefaultWriterCloseWithErrorPropagation;
	  exports.WritableStreamDefaultWriterRelease = writableStream.WritableStreamDefaultWriterRelease;
	  exports.WritableStreamDefaultWriterWrite = writableStream.WritableStreamDefaultWriterWrite;
	}, function (module, exports, __w_pdfjs_require__) {
	  "use strict";

	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }
	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();
	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }
	  var _require = __w_pdfjs_require__(1),
	      assert = _require.assert;
	  var _require2 = __w_pdfjs_require__(0),
	      InvokeOrNoop = _require2.InvokeOrNoop,
	      PromiseInvokeOrPerformFallback = _require2.PromiseInvokeOrPerformFallback,
	      PromiseInvokeOrNoop = _require2.PromiseInvokeOrNoop,
	      typeIsObject = _require2.typeIsObject;
	  var _require3 = __w_pdfjs_require__(4),
	      ReadableStream = _require3.ReadableStream,
	      ReadableStreamDefaultControllerClose = _require3.ReadableStreamDefaultControllerClose,
	      ReadableStreamDefaultControllerEnqueue = _require3.ReadableStreamDefaultControllerEnqueue,
	      ReadableStreamDefaultControllerError = _require3.ReadableStreamDefaultControllerError,
	      ReadableStreamDefaultControllerGetDesiredSize = _require3.ReadableStreamDefaultControllerGetDesiredSize;
	  var _require4 = __w_pdfjs_require__(2),
	      WritableStream = _require4.WritableStream,
	      WritableStreamDefaultControllerError = _require4.WritableStreamDefaultControllerError;
	  function TransformStreamCloseReadable(transformStream) {
	    if (transformStream._errored === true) {
	      throw new TypeError('TransformStream is already errored');
	    }
	    if (transformStream._readableClosed === true) {
	      throw new TypeError('Readable side is already closed');
	    }
	    TransformStreamCloseReadableInternal(transformStream);
	  }
	  function TransformStreamEnqueueToReadable(transformStream, chunk) {
	    if (transformStream._errored === true) {
	      throw new TypeError('TransformStream is already errored');
	    }
	    if (transformStream._readableClosed === true) {
	      throw new TypeError('Readable side is already closed');
	    }
	    var controller = transformStream._readableController;
	    try {
	      ReadableStreamDefaultControllerEnqueue(controller, chunk);
	    } catch (e) {
	      transformStream._readableClosed = true;
	      TransformStreamErrorIfNeeded(transformStream, e);
	      throw transformStream._storedError;
	    }
	    var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
	    var maybeBackpressure = desiredSize <= 0;
	    if (maybeBackpressure === true && transformStream._backpressure === false) {
	      TransformStreamSetBackpressure(transformStream, true);
	    }
	  }
	  function TransformStreamError(transformStream, e) {
	    if (transformStream._errored === true) {
	      throw new TypeError('TransformStream is already errored');
	    }
	    TransformStreamErrorInternal(transformStream, e);
	  }
	  function TransformStreamCloseReadableInternal(transformStream) {
	    assert(transformStream._errored === false);
	    assert(transformStream._readableClosed === false);
	    try {
	      ReadableStreamDefaultControllerClose(transformStream._readableController);
	    } catch (e) {
	      assert(false);
	    }
	    transformStream._readableClosed = true;
	  }
	  function TransformStreamErrorIfNeeded(transformStream, e) {
	    if (transformStream._errored === false) {
	      TransformStreamErrorInternal(transformStream, e);
	    }
	  }
	  function TransformStreamErrorInternal(transformStream, e) {
	    assert(transformStream._errored === false);
	    transformStream._errored = true;
	    transformStream._storedError = e;
	    if (transformStream._writableDone === false) {
	      WritableStreamDefaultControllerError(transformStream._writableController, e);
	    }
	    if (transformStream._readableClosed === false) {
	      ReadableStreamDefaultControllerError(transformStream._readableController, e);
	    }
	  }
	  function TransformStreamReadableReadyPromise(transformStream) {
	    assert(transformStream._backpressureChangePromise !== undefined, '_backpressureChangePromise should have been initialized');
	    if (transformStream._backpressure === false) {
	      return Promise.resolve();
	    }
	    assert(transformStream._backpressure === true, '_backpressure should have been initialized');
	    return transformStream._backpressureChangePromise;
	  }
	  function TransformStreamSetBackpressure(transformStream, backpressure) {
	    assert(transformStream._backpressure !== backpressure, 'TransformStreamSetBackpressure() should be called only when backpressure is changed');
	    if (transformStream._backpressureChangePromise !== undefined) {
	      transformStream._backpressureChangePromise_resolve(backpressure);
	    }
	    transformStream._backpressureChangePromise = new Promise(function (resolve) {
	      transformStream._backpressureChangePromise_resolve = resolve;
	    });
	    transformStream._backpressureChangePromise.then(function (resolution) {
	      assert(resolution !== backpressure, '_backpressureChangePromise should be fulfilled only when backpressure is changed');
	    });
	    transformStream._backpressure = backpressure;
	  }
	  function TransformStreamDefaultTransform(chunk, transformStreamController) {
	    var transformStream = transformStreamController._controlledTransformStream;
	    TransformStreamEnqueueToReadable(transformStream, chunk);
	    return Promise.resolve();
	  }
	  function TransformStreamTransform(transformStream, chunk) {
	    assert(transformStream._errored === false);
	    assert(transformStream._transforming === false);
	    assert(transformStream._backpressure === false);
	    transformStream._transforming = true;
	    var transformer = transformStream._transformer;
	    var controller = transformStream._transformStreamController;
	    var transformPromise = PromiseInvokeOrPerformFallback(transformer, 'transform', [chunk, controller], TransformStreamDefaultTransform, [chunk, controller]);
	    return transformPromise.then(function () {
	      transformStream._transforming = false;
	      return TransformStreamReadableReadyPromise(transformStream);
	    }, function (e) {
	      TransformStreamErrorIfNeeded(transformStream, e);
	      return Promise.reject(e);
	    });
	  }
	  function IsTransformStreamDefaultController(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {
	      return false;
	    }
	    return true;
	  }
	  function IsTransformStream(x) {
	    if (!typeIsObject(x)) {
	      return false;
	    }
	    if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {
	      return false;
	    }
	    return true;
	  }
	  var TransformStreamSink = function () {
	    function TransformStreamSink(transformStream, startPromise) {
	      _classCallCheck(this, TransformStreamSink);
	      this._transformStream = transformStream;
	      this._startPromise = startPromise;
	    }
	    _createClass(TransformStreamSink, [{
	      key: 'start',
	      value: function start(c) {
	        var transformStream = this._transformStream;
	        transformStream._writableController = c;
	        return this._startPromise.then(function () {
	          return TransformStreamReadableReadyPromise(transformStream);
	        });
	      }
	    }, {
	      key: 'write',
	      value: function write(chunk) {
	        var transformStream = this._transformStream;
	        return TransformStreamTransform(transformStream, chunk);
	      }
	    }, {
	      key: 'abort',
	      value: function abort() {
	        var transformStream = this._transformStream;
	        transformStream._writableDone = true;
	        TransformStreamErrorInternal(transformStream, new TypeError('Writable side aborted'));
	      }
	    }, {
	      key: 'close',
	      value: function close() {
	        var transformStream = this._transformStream;
	        assert(transformStream._transforming === false);
	        transformStream._writableDone = true;
	        var flushPromise = PromiseInvokeOrNoop(transformStream._transformer, 'flush', [transformStream._transformStreamController]);
	        return flushPromise.then(function () {
	          if (transformStream._errored === true) {
	            return Promise.reject(transformStream._storedError);
	          }
	          if (transformStream._readableClosed === false) {
	            TransformStreamCloseReadableInternal(transformStream);
	          }
	          return Promise.resolve();
	        }).catch(function (r) {
	          TransformStreamErrorIfNeeded(transformStream, r);
	          return Promise.reject(transformStream._storedError);
	        });
	      }
	    }]);
	    return TransformStreamSink;
	  }();
	  var TransformStreamSource = function () {
	    function TransformStreamSource(transformStream, startPromise) {
	      _classCallCheck(this, TransformStreamSource);
	      this._transformStream = transformStream;
	      this._startPromise = startPromise;
	    }
	    _createClass(TransformStreamSource, [{
	      key: 'start',
	      value: function start(c) {
	        var transformStream = this._transformStream;
	        transformStream._readableController = c;
	        return this._startPromise.then(function () {
	          assert(transformStream._backpressureChangePromise !== undefined, '_backpressureChangePromise should have been initialized');
	          if (transformStream._backpressure === true) {
	            return Promise.resolve();
	          }
	          assert(transformStream._backpressure === false, '_backpressure should have been initialized');
	          return transformStream._backpressureChangePromise;
	        });
	      }
	    }, {
	      key: 'pull',
	      value: function pull() {
	        var transformStream = this._transformStream;
	        assert(transformStream._backpressure === true, 'pull() should be never called while _backpressure is false');
	        assert(transformStream._backpressureChangePromise !== undefined, '_backpressureChangePromise should have been initialized');
	        TransformStreamSetBackpressure(transformStream, false);
	        return transformStream._backpressureChangePromise;
	      }
	    }, {
	      key: 'cancel',
	      value: function cancel() {
	        var transformStream = this._transformStream;
	        transformStream._readableClosed = true;
	        TransformStreamErrorInternal(transformStream, new TypeError('Readable side canceled'));
	      }
	    }]);
	    return TransformStreamSource;
	  }();
	  var TransformStreamDefaultController = function () {
	    function TransformStreamDefaultController(transformStream) {
	      _classCallCheck(this, TransformStreamDefaultController);
	      if (IsTransformStream(transformStream) === false) {
	        throw new TypeError('TransformStreamDefaultController can only be ' + 'constructed with a TransformStream instance');
	      }
	      if (transformStream._transformStreamController !== undefined) {
	        throw new TypeError('TransformStreamDefaultController instances can ' + 'only be created by the TransformStream constructor');
	      }
	      this._controlledTransformStream = transformStream;
	    }
	    _createClass(TransformStreamDefaultController, [{
	      key: 'enqueue',
	      value: function enqueue(chunk) {
	        if (IsTransformStreamDefaultController(this) === false) {
	          throw defaultControllerBrandCheckException('enqueue');
	        }
	        TransformStreamEnqueueToReadable(this._controlledTransformStream, chunk);
	      }
	    }, {
	      key: 'close',
	      value: function close() {
	        if (IsTransformStreamDefaultController(this) === false) {
	          throw defaultControllerBrandCheckException('close');
	        }
	        TransformStreamCloseReadable(this._controlledTransformStream);
	      }
	    }, {
	      key: 'error',
	      value: function error(reason) {
	        if (IsTransformStreamDefaultController(this) === false) {
	          throw defaultControllerBrandCheckException('error');
	        }
	        TransformStreamError(this._controlledTransformStream, reason);
	      }
	    }, {
	      key: 'desiredSize',
	      get: function get() {
	        if (IsTransformStreamDefaultController(this) === false) {
	          throw defaultControllerBrandCheckException('desiredSize');
	        }
	        var transformStream = this._controlledTransformStream;
	        var readableController = transformStream._readableController;
	        return ReadableStreamDefaultControllerGetDesiredSize(readableController);
	      }
	    }]);
	    return TransformStreamDefaultController;
	  }();
	  var TransformStream = function () {
	    function TransformStream() {
	      var transformer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      _classCallCheck(this, TransformStream);
	      this._transformer = transformer;
	      var readableStrategy = transformer.readableStrategy,
	          writableStrategy = transformer.writableStrategy;
	      this._transforming = false;
	      this._errored = false;
	      this._storedError = undefined;
	      this._writableController = undefined;
	      this._readableController = undefined;
	      this._transformStreamController = undefined;
	      this._writableDone = false;
	      this._readableClosed = false;
	      this._backpressure = undefined;
	      this._backpressureChangePromise = undefined;
	      this._backpressureChangePromise_resolve = undefined;
	      this._transformStreamController = new TransformStreamDefaultController(this);
	      var startPromise_resolve = void 0;
	      var startPromise = new Promise(function (resolve) {
	        startPromise_resolve = resolve;
	      });
	      var source = new TransformStreamSource(this, startPromise);
	      this._readable = new ReadableStream(source, readableStrategy);
	      var sink = new TransformStreamSink(this, startPromise);
	      this._writable = new WritableStream(sink, writableStrategy);
	      assert(this._writableController !== undefined);
	      assert(this._readableController !== undefined);
	      var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(this._readableController);
	      TransformStreamSetBackpressure(this, desiredSize <= 0);
	      var transformStream = this;
	      var startResult = InvokeOrNoop(transformer, 'start', [transformStream._transformStreamController]);
	      startPromise_resolve(startResult);
	      startPromise.catch(function (e) {
	        if (transformStream._errored === false) {
	          transformStream._errored = true;
	          transformStream._storedError = e;
	        }
	      });
	    }
	    _createClass(TransformStream, [{
	      key: 'readable',
	      get: function get() {
	        if (IsTransformStream(this) === false) {
	          throw streamBrandCheckException('readable');
	        }
	        return this._readable;
	      }
	    }, {
	      key: 'writable',
	      get: function get() {
	        if (IsTransformStream(this) === false) {
	          throw streamBrandCheckException('writable');
	        }
	        return this._writable;
	      }
	    }]);
	    return TransformStream;
	  }();
	  module.exports = { TransformStream: TransformStream };
	  function defaultControllerBrandCheckException(name) {
	    return new TypeError('TransformStreamDefaultController.prototype.' + name + ' can only be used on a TransformStreamDefaultController');
	  }
	  function streamBrandCheckException(name) {
	    return new TypeError('TransformStream.prototype.' + name + ' can only be used on a TransformStream');
	  }
	}, function (module, exports, __w_pdfjs_require__) {
	  module.exports = __w_pdfjs_require__(5);
	}]));

	/***/ }),
	/* 82 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PDFJS = exports.globalScope = undefined;

	var _api = __w_pdfjs_require__(48);

	var _dom_utils = __w_pdfjs_require__(5);

	var _util = __w_pdfjs_require__(0);

	var _annotation_layer = __w_pdfjs_require__(51);

	var _global_scope = __w_pdfjs_require__(9);

	var _global_scope2 = _interopRequireDefault(_global_scope);

	var _metadata = __w_pdfjs_require__(50);

	var _text_layer = __w_pdfjs_require__(52);

	var _svg = __w_pdfjs_require__(53);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	if (!_global_scope2.default.PDFJS) {
	  _global_scope2.default.PDFJS = {};
	}
	var PDFJS = _global_scope2.default.PDFJS;
	{
	  PDFJS.version = '1.9.634';
	  PDFJS.build = '509d3728';
	}
	PDFJS.pdfBug = false;
	if (PDFJS.verbosity !== undefined) {
	  (0, _util.setVerbosityLevel)(PDFJS.verbosity);
	}
	delete PDFJS.verbosity;
	Object.defineProperty(PDFJS, 'verbosity', {
	  get: function get() {
	    return (0, _util.getVerbosityLevel)();
	  },
	  set: function set(level) {
	    (0, _util.setVerbosityLevel)(level);
	  },

	  enumerable: true,
	  configurable: true
	});
	PDFJS.VERBOSITY_LEVELS = _util.VERBOSITY_LEVELS;
	PDFJS.OPS = _util.OPS;
	PDFJS.UNSUPPORTED_FEATURES = _util.UNSUPPORTED_FEATURES;
	PDFJS.isValidUrl = _dom_utils.isValidUrl;
	PDFJS.shadow = _util.shadow;
	PDFJS.createBlob = _util.createBlob;
	PDFJS.createObjectURL = function PDFJS_createObjectURL(data, contentType) {
	  return (0, _util.createObjectURL)(data, contentType, PDFJS.disableCreateObjectURL);
	};
	Object.defineProperty(PDFJS, 'isLittleEndian', {
	  configurable: true,
	  get: function PDFJS_isLittleEndian() {
	    return (0, _util.shadow)(PDFJS, 'isLittleEndian', (0, _util.isLittleEndian)());
	  }
	});
	PDFJS.removeNullCharacters = _util.removeNullCharacters;
	PDFJS.PasswordResponses = _util.PasswordResponses;
	PDFJS.PasswordException = _util.PasswordException;
	PDFJS.UnknownErrorException = _util.UnknownErrorException;
	PDFJS.InvalidPDFException = _util.InvalidPDFException;
	PDFJS.MissingPDFException = _util.MissingPDFException;
	PDFJS.UnexpectedResponseException = _util.UnexpectedResponseException;
	PDFJS.Util = _util.Util;
	PDFJS.PageViewport = _util.PageViewport;
	PDFJS.createPromiseCapability = _util.createPromiseCapability;
	PDFJS.maxImageSize = PDFJS.maxImageSize === undefined ? -1 : PDFJS.maxImageSize;
	PDFJS.cMapUrl = PDFJS.cMapUrl === undefined ? null : PDFJS.cMapUrl;
	PDFJS.cMapPacked = PDFJS.cMapPacked === undefined ? false : PDFJS.cMapPacked;
	PDFJS.disableFontFace = PDFJS.disableFontFace === undefined ? false : PDFJS.disableFontFace;
	PDFJS.imageResourcesPath = PDFJS.imageResourcesPath === undefined ? '' : PDFJS.imageResourcesPath;
	PDFJS.disableWorker = PDFJS.disableWorker === undefined ? false : PDFJS.disableWorker;
	PDFJS.workerSrc = PDFJS.workerSrc === undefined ? null : PDFJS.workerSrc;
	PDFJS.workerPort = PDFJS.workerPort === undefined ? null : PDFJS.workerPort;
	PDFJS.disableRange = PDFJS.disableRange === undefined ? false : PDFJS.disableRange;
	PDFJS.disableStream = PDFJS.disableStream === undefined ? false : PDFJS.disableStream;
	PDFJS.disableAutoFetch = PDFJS.disableAutoFetch === undefined ? false : PDFJS.disableAutoFetch;
	PDFJS.pdfBug = PDFJS.pdfBug === undefined ? false : PDFJS.pdfBug;
	PDFJS.postMessageTransfers = PDFJS.postMessageTransfers === undefined ? true : PDFJS.postMessageTransfers;
	PDFJS.disableCreateObjectURL = PDFJS.disableCreateObjectURL === undefined ? false : PDFJS.disableCreateObjectURL;
	PDFJS.disableWebGL = PDFJS.disableWebGL === undefined ? true : PDFJS.disableWebGL;
	PDFJS.externalLinkTarget = PDFJS.externalLinkTarget === undefined ? _dom_utils.LinkTarget.NONE : PDFJS.externalLinkTarget;
	PDFJS.externalLinkRel = PDFJS.externalLinkRel === undefined ? _dom_utils.DEFAULT_LINK_REL : PDFJS.externalLinkRel;
	PDFJS.isEvalSupported = PDFJS.isEvalSupported === undefined ? true : PDFJS.isEvalSupported;
	PDFJS.pdfjsNext = PDFJS.pdfjsNext === undefined ? false : PDFJS.pdfjsNext;
	{
	  var savedOpenExternalLinksInNewWindow = PDFJS.openExternalLinksInNewWindow;
	  delete PDFJS.openExternalLinksInNewWindow;
	  Object.defineProperty(PDFJS, 'openExternalLinksInNewWindow', {
	    get: function get() {
	      return PDFJS.externalLinkTarget === _dom_utils.LinkTarget.BLANK;
	    },
	    set: function set(value) {
	      if (value) {
	        (0, _util.deprecated)('PDFJS.openExternalLinksInNewWindow, please use ' + '"PDFJS.externalLinkTarget = PDFJS.LinkTarget.BLANK" instead.');
	      }
	      if (PDFJS.externalLinkTarget !== _dom_utils.LinkTarget.NONE) {
	        (0, _util.warn)('PDFJS.externalLinkTarget is already initialized');
	        return;
	      }
	      PDFJS.externalLinkTarget = value ? _dom_utils.LinkTarget.BLANK : _dom_utils.LinkTarget.NONE;
	    },

	    enumerable: true,
	    configurable: true
	  });
	  if (savedOpenExternalLinksInNewWindow) {
	    PDFJS.openExternalLinksInNewWindow = savedOpenExternalLinksInNewWindow;
	  }
	}
	PDFJS.getDocument = _api.getDocument;
	PDFJS.LoopbackPort = _api.LoopbackPort;
	PDFJS.PDFDataRangeTransport = _api.PDFDataRangeTransport;
	PDFJS.PDFWorker = _api.PDFWorker;
	PDFJS.hasCanvasTypedArrays = true;
	PDFJS.CustomStyle = _dom_utils.CustomStyle;
	PDFJS.LinkTarget = _dom_utils.LinkTarget;
	PDFJS.addLinkAttributes = _dom_utils.addLinkAttributes;
	PDFJS.getFilenameFromUrl = _dom_utils.getFilenameFromUrl;
	PDFJS.isExternalLinkTargetSet = _dom_utils.isExternalLinkTargetSet;
	PDFJS.AnnotationLayer = _annotation_layer.AnnotationLayer;
	PDFJS.renderTextLayer = _text_layer.renderTextLayer;
	PDFJS.Metadata = _metadata.Metadata;
	PDFJS.SVGGraphics = _svg.SVGGraphics;
	PDFJS.UnsupportedManager = _api._UnsupportedManager;
	exports.globalScope = _global_scope2.default;
	exports.PDFJS = PDFJS;

	/***/ }),
	/* 83 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FontLoader = exports.FontFaceObject = undefined;

	var _util = __w_pdfjs_require__(0);

	function FontLoader(docId) {
	  this.docId = docId;
	  this.styleElement = null;
	  this.nativeFontFaces = [];
	  this.loadTestFontId = 0;
	  this.loadingContext = {
	    requests: [],
	    nextRequestId: 0
	  };
	}
	FontLoader.prototype = {
	  insertRule: function fontLoaderInsertRule(rule) {
	    var styleElement = this.styleElement;
	    if (!styleElement) {
	      styleElement = this.styleElement = document.createElement('style');
	      styleElement.id = 'PDFJS_FONT_STYLE_TAG_' + this.docId;
	      document.documentElement.getElementsByTagName('head')[0].appendChild(styleElement);
	    }
	    var styleSheet = styleElement.sheet;
	    styleSheet.insertRule(rule, styleSheet.cssRules.length);
	  },
	  clear: function fontLoaderClear() {
	    if (this.styleElement) {
	      this.styleElement.remove();
	      this.styleElement = null;
	    }
	    this.nativeFontFaces.forEach(function (nativeFontFace) {
	      document.fonts.delete(nativeFontFace);
	    });
	    this.nativeFontFaces.length = 0;
	  }
	};
	{
	  var getLoadTestFont = function getLoadTestFont() {
	    return atob('T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQ' + 'AABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwA' + 'AAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbm' + 'FtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAA' + 'AADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6A' + 'ABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAA' + 'MQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAA' + 'AAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAA' + 'AAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQ' + 'AAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMA' + 'AQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAA' + 'EAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAA' + 'AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAA' + 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAA' + 'AAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgc' + 'A/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWF' + 'hYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQA' + 'AAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAg' + 'ABAAAAAAAAAAAD6AAAAAAAAA==');
	  };
	  Object.defineProperty(FontLoader.prototype, 'loadTestFont', {
	    get: function get() {
	      return (0, _util.shadow)(this, 'loadTestFont', getLoadTestFont());
	    },

	    configurable: true
	  });
	  FontLoader.prototype.addNativeFontFace = function fontLoader_addNativeFontFace(nativeFontFace) {
	    this.nativeFontFaces.push(nativeFontFace);
	    document.fonts.add(nativeFontFace);
	  };
	  FontLoader.prototype.bind = function fontLoaderBind(fonts, callback) {
	    var rules = [];
	    var fontsToLoad = [];
	    var fontLoadPromises = [];
	    var getNativeFontPromise = function getNativeFontPromise(nativeFontFace) {
	      return nativeFontFace.loaded.catch(function (e) {
	        (0, _util.warn)('Failed to load font "' + nativeFontFace.family + '": ' + e);
	      });
	    };
	    var isFontLoadingAPISupported = FontLoader.isFontLoadingAPISupported && !FontLoader.isSyncFontLoadingSupported;
	    for (var i = 0, ii = fonts.length; i < ii; i++) {
	      var font = fonts[i];
	      if (font.attached || font.loading === false) {
	        continue;
	      }
	      font.attached = true;
	      if (isFontLoadingAPISupported) {
	        var nativeFontFace = font.createNativeFontFace();
	        if (nativeFontFace) {
	          this.addNativeFontFace(nativeFontFace);
	          fontLoadPromises.push(getNativeFontPromise(nativeFontFace));
	        }
	      } else {
	        var rule = font.createFontFaceRule();
	        if (rule) {
	          this.insertRule(rule);
	          rules.push(rule);
	          fontsToLoad.push(font);
	        }
	      }
	    }
	    var request = this.queueLoadingCallback(callback);
	    if (isFontLoadingAPISupported) {
	      Promise.all(fontLoadPromises).then(function () {
	        request.complete();
	      });
	    } else if (rules.length > 0 && !FontLoader.isSyncFontLoadingSupported) {
	      this.prepareFontLoadEvent(rules, fontsToLoad, request);
	    } else {
	      request.complete();
	    }
	  };
	  FontLoader.prototype.queueLoadingCallback = function FontLoader_queueLoadingCallback(callback) {
	    function LoadLoader_completeRequest() {
	      (0, _util.assert)(!request.end, 'completeRequest() cannot be called twice');
	      request.end = Date.now();
	      while (context.requests.length > 0 && context.requests[0].end) {
	        var otherRequest = context.requests.shift();
	        setTimeout(otherRequest.callback, 0);
	      }
	    }
	    var context = this.loadingContext;
	    var requestId = 'pdfjs-font-loading-' + context.nextRequestId++;
	    var request = {
	      id: requestId,
	      complete: LoadLoader_completeRequest,
	      callback: callback,
	      started: Date.now()
	    };
	    context.requests.push(request);
	    return request;
	  };
	  FontLoader.prototype.prepareFontLoadEvent = function fontLoaderPrepareFontLoadEvent(rules, fonts, request) {
	    function int32(data, offset) {
	      return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;
	    }
	    function spliceString(s, offset, remove, insert) {
	      var chunk1 = s.substr(0, offset);
	      var chunk2 = s.substr(offset + remove);
	      return chunk1 + insert + chunk2;
	    }
	    var i, ii;
	    var canvas = document.createElement('canvas');
	    canvas.width = 1;
	    canvas.height = 1;
	    var ctx = canvas.getContext('2d');
	    var called = 0;
	    function isFontReady(name, callback) {
	      called++;
	      if (called > 30) {
	        (0, _util.warn)('Load test font never loaded.');
	        callback();
	        return;
	      }
	      ctx.font = '30px ' + name;
	      ctx.fillText('.', 0, 20);
	      var imageData = ctx.getImageData(0, 0, 1, 1);
	      if (imageData.data[3] > 0) {
	        callback();
	        return;
	      }
	      setTimeout(isFontReady.bind(null, name, callback));
	    }
	    var loadTestFontId = 'lt' + Date.now() + this.loadTestFontId++;
	    var data = this.loadTestFont;
	    var COMMENT_OFFSET = 976;
	    data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
	    var CFF_CHECKSUM_OFFSET = 16;
	    var XXXX_VALUE = 0x58585858;
	    var checksum = int32(data, CFF_CHECKSUM_OFFSET);
	    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
	      checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
	    }
	    if (i < loadTestFontId.length) {
	      checksum = checksum - XXXX_VALUE + int32(loadTestFontId + 'XXX', i) | 0;
	    }
	    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));
	    var url = 'url(data:font/opentype;base64,' + btoa(data) + ');';
	    var rule = '@font-face { font-family:"' + loadTestFontId + '";src:' + url + '}';
	    this.insertRule(rule);
	    var names = [];
	    for (i = 0, ii = fonts.length; i < ii; i++) {
	      names.push(fonts[i].loadedName);
	    }
	    names.push(loadTestFontId);
	    var div = document.createElement('div');
	    div.setAttribute('style', 'visibility: hidden;' + 'width: 10px; height: 10px;' + 'position: absolute; top: 0px; left: 0px;');
	    for (i = 0, ii = names.length; i < ii; ++i) {
	      var span = document.createElement('span');
	      span.textContent = 'Hi';
	      span.style.fontFamily = names[i];
	      div.appendChild(span);
	    }
	    document.body.appendChild(div);
	    isFontReady(loadTestFontId, function () {
	      document.body.removeChild(div);
	      request.complete();
	    });
	  };
	}
	{
	  FontLoader.isFontLoadingAPISupported = typeof document !== 'undefined' && !!document.fonts;
	}
	{
	  var isSyncFontLoadingSupported = function isSyncFontLoadingSupported() {
	    if (typeof navigator === 'undefined') {
	      return true;
	    }
	    var supported = false;
	    var m = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);
	    if (m && m[1] >= 14) {
	      supported = true;
	    }
	    return supported;
	  };
	  Object.defineProperty(FontLoader, 'isSyncFontLoadingSupported', {
	    get: function get() {
	      return (0, _util.shadow)(FontLoader, 'isSyncFontLoadingSupported', isSyncFontLoadingSupported());
	    },

	    enumerable: true,
	    configurable: true
	  });
	}
	var IsEvalSupportedCached = {
	  get value() {
	    return (0, _util.shadow)(this, 'value', (0, _util.isEvalSupported)());
	  }
	};
	var FontFaceObject = function FontFaceObjectClosure() {
	  function FontFaceObject(translatedData, options) {
	    this.compiledGlyphs = Object.create(null);
	    for (var i in translatedData) {
	      this[i] = translatedData[i];
	    }
	    this.options = options;
	  }
	  FontFaceObject.prototype = {
	    createNativeFontFace: function FontFaceObject_createNativeFontFace() {
	      if (!this.data) {
	        return null;
	      }
	      if (this.options.disableFontFace) {
	        this.disableFontFace = true;
	        return null;
	      }
	      var nativeFontFace = new FontFace(this.loadedName, this.data, {});
	      if (this.options.fontRegistry) {
	        this.options.fontRegistry.registerFont(this);
	      }
	      return nativeFontFace;
	    },
	    createFontFaceRule: function FontFaceObject_createFontFaceRule() {
	      if (!this.data) {
	        return null;
	      }
	      if (this.options.disableFontFace) {
	        this.disableFontFace = true;
	        return null;
	      }
	      var data = (0, _util.bytesToString)(new Uint8Array(this.data));
	      var fontName = this.loadedName;
	      var url = 'url(data:' + this.mimetype + ';base64,' + btoa(data) + ');';
	      var rule = '@font-face { font-family:"' + fontName + '";src:' + url + '}';
	      if (this.options.fontRegistry) {
	        this.options.fontRegistry.registerFont(this, url);
	      }
	      return rule;
	    },
	    getPathGenerator: function FontFaceObject_getPathGenerator(objs, character) {
	      if (!(character in this.compiledGlyphs)) {
	        var cmds = objs.get(this.loadedName + '_path_' + character);
	        var current, i, len;
	        if (this.options.isEvalSupported && IsEvalSupportedCached.value) {
	          var args,
	              js = '';
	          for (i = 0, len = cmds.length; i < len; i++) {
	            current = cmds[i];
	            if (current.args !== undefined) {
	              args = current.args.join(',');
	            } else {
	              args = '';
	            }
	            js += 'c.' + current.cmd + '(' + args + ');\n';
	          }
	          this.compiledGlyphs[character] = new Function('c', 'size', js);
	        } else {
	          this.compiledGlyphs[character] = function (c, size) {
	            for (i = 0, len = cmds.length; i < len; i++) {
	              current = cmds[i];
	              if (current.cmd === 'scale') {
	                current.args = [size, -size];
	              }
	              c[current.cmd].apply(c, current.args);
	            }
	          };
	        }
	      }
	      return this.compiledGlyphs[character];
	    }
	  };
	  return FontFaceObject;
	}();
	exports.FontFaceObject = FontFaceObject;
	exports.FontLoader = FontLoader;

	/***/ }),
	/* 84 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CanvasGraphics = undefined;

	var _util = __w_pdfjs_require__(0);

	var _pattern_helper = __w_pdfjs_require__(85);

	var _webgl = __w_pdfjs_require__(49);

	var MIN_FONT_SIZE = 16;
	var MAX_FONT_SIZE = 100;
	var MAX_GROUP_SIZE = 4096;
	var MIN_WIDTH_FACTOR = 0.65;
	var COMPILE_TYPE3_GLYPHS = true;
	var MAX_SIZE_TO_COMPILE = 1000;
	var FULL_CHUNK_HEIGHT = 16;
	var IsLittleEndianCached = {
	  get value() {
	    return (0, _util.shadow)(IsLittleEndianCached, 'value', (0, _util.isLittleEndian)());
	  }
	};
	function addContextCurrentTransform(ctx) {
	  if (!ctx.mozCurrentTransform) {
	    ctx._originalSave = ctx.save;
	    ctx._originalRestore = ctx.restore;
	    ctx._originalRotate = ctx.rotate;
	    ctx._originalScale = ctx.scale;
	    ctx._originalTranslate = ctx.translate;
	    ctx._originalTransform = ctx.transform;
	    ctx._originalSetTransform = ctx.setTransform;
	    ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];
	    ctx._transformStack = [];
	    Object.defineProperty(ctx, 'mozCurrentTransform', {
	      get: function getCurrentTransform() {
	        return this._transformMatrix;
	      }
	    });
	    Object.defineProperty(ctx, 'mozCurrentTransformInverse', {
	      get: function getCurrentTransformInverse() {
	        var m = this._transformMatrix;
	        var a = m[0],
	            b = m[1],
	            c = m[2],
	            d = m[3],
	            e = m[4],
	            f = m[5];
	        var ad_bc = a * d - b * c;
	        var bc_ad = b * c - a * d;
	        return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];
	      }
	    });
	    ctx.save = function ctxSave() {
	      var old = this._transformMatrix;
	      this._transformStack.push(old);
	      this._transformMatrix = old.slice(0, 6);
	      this._originalSave();
	    };
	    ctx.restore = function ctxRestore() {
	      var prev = this._transformStack.pop();
	      if (prev) {
	        this._transformMatrix = prev;
	        this._originalRestore();
	      }
	    };
	    ctx.translate = function ctxTranslate(x, y) {
	      var m = this._transformMatrix;
	      m[4] = m[0] * x + m[2] * y + m[4];
	      m[5] = m[1] * x + m[3] * y + m[5];
	      this._originalTranslate(x, y);
	    };
	    ctx.scale = function ctxScale(x, y) {
	      var m = this._transformMatrix;
	      m[0] = m[0] * x;
	      m[1] = m[1] * x;
	      m[2] = m[2] * y;
	      m[3] = m[3] * y;
	      this._originalScale(x, y);
	    };
	    ctx.transform = function ctxTransform(a, b, c, d, e, f) {
	      var m = this._transformMatrix;
	      this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];
	      ctx._originalTransform(a, b, c, d, e, f);
	    };
	    ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
	      this._transformMatrix = [a, b, c, d, e, f];
	      ctx._originalSetTransform(a, b, c, d, e, f);
	    };
	    ctx.rotate = function ctxRotate(angle) {
	      var cosValue = Math.cos(angle);
	      var sinValue = Math.sin(angle);
	      var m = this._transformMatrix;
	      this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];
	      this._originalRotate(angle);
	    };
	  }
	}
	var CachedCanvases = function CachedCanvasesClosure() {
	  function CachedCanvases(canvasFactory) {
	    this.canvasFactory = canvasFactory;
	    this.cache = Object.create(null);
	  }
	  CachedCanvases.prototype = {
	    getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {
	      var canvasEntry;
	      if (this.cache[id] !== undefined) {
	        canvasEntry = this.cache[id];
	        this.canvasFactory.reset(canvasEntry, width, height);
	        canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);
	      } else {
	        canvasEntry = this.canvasFactory.create(width, height);
	        this.cache[id] = canvasEntry;
	      }
	      if (trackTransform) {
	        addContextCurrentTransform(canvasEntry.context);
	      }
	      return canvasEntry;
	    },
	    clear: function clear() {
	      for (var id in this.cache) {
	        var canvasEntry = this.cache[id];
	        this.canvasFactory.destroy(canvasEntry);
	        delete this.cache[id];
	      }
	    }
	  };
	  return CachedCanvases;
	}();
	function compileType3Glyph(imgData) {
	  var POINT_TO_PROCESS_LIMIT = 1000;
	  var width = imgData.width,
	      height = imgData.height;
	  var i,
	      j,
	      j0,
	      width1 = width + 1;
	  var points = new Uint8Array(width1 * (height + 1));
	  var POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);
	  var lineSize = width + 7 & ~7,
	      data0 = imgData.data;
	  var data = new Uint8Array(lineSize * height),
	      pos = 0,
	      ii;
	  for (i = 0, ii = data0.length; i < ii; i++) {
	    var mask = 128,
	        elem = data0[i];
	    while (mask > 0) {
	      data[pos++] = elem & mask ? 0 : 255;
	      mask >>= 1;
	    }
	  }
	  var count = 0;
	  pos = 0;
	  if (data[pos] !== 0) {
	    points[0] = 1;
	    ++count;
	  }
	  for (j = 1; j < width; j++) {
	    if (data[pos] !== data[pos + 1]) {
	      points[j] = data[pos] ? 2 : 1;
	      ++count;
	    }
	    pos++;
	  }
	  if (data[pos] !== 0) {
	    points[j] = 2;
	    ++count;
	  }
	  for (i = 1; i < height; i++) {
	    pos = i * lineSize;
	    j0 = i * width1;
	    if (data[pos - lineSize] !== data[pos]) {
	      points[j0] = data[pos] ? 1 : 8;
	      ++count;
	    }
	    var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);
	    for (j = 1; j < width; j++) {
	      sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);
	      if (POINT_TYPES[sum]) {
	        points[j0 + j] = POINT_TYPES[sum];
	        ++count;
	      }
	      pos++;
	    }
	    if (data[pos - lineSize] !== data[pos]) {
	      points[j0 + j] = data[pos] ? 2 : 4;
	      ++count;
	    }
	    if (count > POINT_TO_PROCESS_LIMIT) {
	      return null;
	    }
	  }
	  pos = lineSize * (height - 1);
	  j0 = i * width1;
	  if (data[pos] !== 0) {
	    points[j0] = 8;
	    ++count;
	  }
	  for (j = 1; j < width; j++) {
	    if (data[pos] !== data[pos + 1]) {
	      points[j0 + j] = data[pos] ? 4 : 8;
	      ++count;
	    }
	    pos++;
	  }
	  if (data[pos] !== 0) {
	    points[j0 + j] = 4;
	    ++count;
	  }
	  if (count > POINT_TO_PROCESS_LIMIT) {
	    return null;
	  }
	  var steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
	  var outlines = [];
	  for (i = 0; count && i <= height; i++) {
	    var p = i * width1;
	    var end = p + width;
	    while (p < end && !points[p]) {
	      p++;
	    }
	    if (p === end) {
	      continue;
	    }
	    var coords = [p % width1, i];
	    var type = points[p],
	        p0 = p,
	        pp;
	    do {
	      var step = steps[type];
	      do {
	        p += step;
	      } while (!points[p]);
	      pp = points[p];
	      if (pp !== 5 && pp !== 10) {
	        type = pp;
	        points[p] = 0;
	      } else {
	        type = pp & 0x33 * type >> 4;
	        points[p] &= type >> 2 | type << 2;
	      }
	      coords.push(p % width1);
	      coords.push(p / width1 | 0);
	      --count;
	    } while (p0 !== p);
	    outlines.push(coords);
	    --i;
	  }
	  var drawOutline = function drawOutline(c) {
	    c.save();
	    c.scale(1 / width, -1 / height);
	    c.translate(0, -height);
	    c.beginPath();
	    for (var i = 0, ii = outlines.length; i < ii; i++) {
	      var o = outlines[i];
	      c.moveTo(o[0], o[1]);
	      for (var j = 2, jj = o.length; j < jj; j += 2) {
	        c.lineTo(o[j], o[j + 1]);
	      }
	    }
	    c.fill();
	    c.beginPath();
	    c.restore();
	  };
	  return drawOutline;
	}
	var CanvasExtraState = function CanvasExtraStateClosure() {
	  function CanvasExtraState() {
	    this.alphaIsShape = false;
	    this.fontSize = 0;
	    this.fontSizeScale = 1;
	    this.textMatrix = _util.IDENTITY_MATRIX;
	    this.textMatrixScale = 1;
	    this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
	    this.leading = 0;
	    this.x = 0;
	    this.y = 0;
	    this.lineX = 0;
	    this.lineY = 0;
	    this.charSpacing = 0;
	    this.wordSpacing = 0;
	    this.textHScale = 1;
	    this.textRenderingMode = _util.TextRenderingMode.FILL;
	    this.textRise = 0;
	    this.fillColor = '#000000';
	    this.strokeColor = '#000000';
	    this.patternFill = false;
	    this.fillAlpha = 1;
	    this.strokeAlpha = 1;
	    this.lineWidth = 1;
	    this.activeSMask = null;
	    this.resumeSMaskCtx = null;
	  }
	  CanvasExtraState.prototype = {
	    clone: function CanvasExtraState_clone() {
	      return Object.create(this);
	    },
	    setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {
	      this.x = x;
	      this.y = y;
	    }
	  };
	  return CanvasExtraState;
	}();
	var CanvasGraphics = function CanvasGraphicsClosure() {
	  var EXECUTION_TIME = 15;
	  var EXECUTION_STEPS = 10;
	  function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, imageLayer) {
	    this.ctx = canvasCtx;
	    this.current = new CanvasExtraState();
	    this.stateStack = [];
	    this.pendingClip = null;
	    this.pendingEOFill = false;
	    this.res = null;
	    this.xobjs = null;
	    this.commonObjs = commonObjs;
	    this.objs = objs;
	    this.canvasFactory = canvasFactory;
	    this.imageLayer = imageLayer;
	    this.groupStack = [];
	    this.processingType3 = null;
	    this.baseTransform = null;
	    this.baseTransformStack = [];
	    this.groupLevel = 0;
	    this.smaskStack = [];
	    this.smaskCounter = 0;
	    this.tempSMask = null;
	    this.cachedCanvases = new CachedCanvases(this.canvasFactory);
	    if (canvasCtx) {
	      addContextCurrentTransform(canvasCtx);
	    }
	    this.cachedGetSinglePixelWidth = null;
	  }
	  function putBinaryImageData(ctx, imgData) {
	    if (typeof ImageData !== 'undefined' && imgData instanceof ImageData) {
	      ctx.putImageData(imgData, 0, 0);
	      return;
	    }
	    var height = imgData.height,
	        width = imgData.width;
	    var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
	    var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
	    var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
	    var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
	    var srcPos = 0,
	        destPos;
	    var src = imgData.data;
	    var dest = chunkImgData.data;
	    var i, j, thisChunkHeight, elemsInThisChunk;
	    if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {
	      var srcLength = src.byteLength;
	      var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
	      var dest32DataLength = dest32.length;
	      var fullSrcDiff = width + 7 >> 3;
	      var white = 0xFFFFFFFF;
	      var black = IsLittleEndianCached.value ? 0xFF000000 : 0x000000FF;
	      for (i = 0; i < totalChunks; i++) {
	        thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
	        destPos = 0;
	        for (j = 0; j < thisChunkHeight; j++) {
	          var srcDiff = srcLength - srcPos;
	          var k = 0;
	          var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
	          var kEndUnrolled = kEnd & ~7;
	          var mask = 0;
	          var srcByte = 0;
	          for (; k < kEndUnrolled; k += 8) {
	            srcByte = src[srcPos++];
	            dest32[destPos++] = srcByte & 128 ? white : black;
	            dest32[destPos++] = srcByte & 64 ? white : black;
	            dest32[destPos++] = srcByte & 32 ? white : black;
	            dest32[destPos++] = srcByte & 16 ? white : black;
	            dest32[destPos++] = srcByte & 8 ? white : black;
	            dest32[destPos++] = srcByte & 4 ? white : black;
	            dest32[destPos++] = srcByte & 2 ? white : black;
	            dest32[destPos++] = srcByte & 1 ? white : black;
	          }
	          for (; k < kEnd; k++) {
	            if (mask === 0) {
	              srcByte = src[srcPos++];
	              mask = 128;
	            }
	            dest32[destPos++] = srcByte & mask ? white : black;
	            mask >>= 1;
	          }
	        }
	        while (destPos < dest32DataLength) {
	          dest32[destPos++] = 0;
	        }
	        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
	      }
	    } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {
	      j = 0;
	      elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
	      for (i = 0; i < fullChunks; i++) {
	        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
	        srcPos += elemsInThisChunk;
	        ctx.putImageData(chunkImgData, 0, j);
	        j += FULL_CHUNK_HEIGHT;
	      }
	      if (i < totalChunks) {
	        elemsInThisChunk = width * partialChunkHeight * 4;
	        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
	        ctx.putImageData(chunkImgData, 0, j);
	      }
	    } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {
	      thisChunkHeight = FULL_CHUNK_HEIGHT;
	      elemsInThisChunk = width * thisChunkHeight;
	      for (i = 0; i < totalChunks; i++) {
	        if (i >= fullChunks) {
	          thisChunkHeight = partialChunkHeight;
	          elemsInThisChunk = width * thisChunkHeight;
	        }
	        destPos = 0;
	        for (j = elemsInThisChunk; j--;) {
	          dest[destPos++] = src[srcPos++];
	          dest[destPos++] = src[srcPos++];
	          dest[destPos++] = src[srcPos++];
	          dest[destPos++] = 255;
	        }
	        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
	      }
	    } else {
	      throw new Error('bad image kind: ' + imgData.kind);
	    }
	  }
	  function putBinaryImageMask(ctx, imgData) {
	    var height = imgData.height,
	        width = imgData.width;
	    var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
	    var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
	    var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
	    var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
	    var srcPos = 0;
	    var src = imgData.data;
	    var dest = chunkImgData.data;
	    for (var i = 0; i < totalChunks; i++) {
	      var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
	      var destPos = 3;
	      for (var j = 0; j < thisChunkHeight; j++) {
	        var mask = 0;
	        for (var k = 0; k < width; k++) {
	          if (!mask) {
	            var elem = src[srcPos++];
	            mask = 128;
	          }
	          dest[destPos] = elem & mask ? 0 : 255;
	          destPos += 4;
	          mask >>= 1;
	        }
	      }
	      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
	    }
	  }
	  function copyCtxState(sourceCtx, destCtx) {
	    var properties = ['strokeStyle', 'fillStyle', 'fillRule', 'globalAlpha', 'lineWidth', 'lineCap', 'lineJoin', 'miterLimit', 'globalCompositeOperation', 'font'];
	    for (var i = 0, ii = properties.length; i < ii; i++) {
	      var property = properties[i];
	      if (sourceCtx[property] !== undefined) {
	        destCtx[property] = sourceCtx[property];
	      }
	    }
	    if (sourceCtx.setLineDash !== undefined) {
	      destCtx.setLineDash(sourceCtx.getLineDash());
	      destCtx.lineDashOffset = sourceCtx.lineDashOffset;
	    }
	  }
	  function resetCtxToDefault(ctx) {
	    ctx.strokeStyle = '#000000';
	    ctx.fillStyle = '#000000';
	    ctx.fillRule = 'nonzero';
	    ctx.globalAlpha = 1;
	    ctx.lineWidth = 1;
	    ctx.lineCap = 'butt';
	    ctx.lineJoin = 'miter';
	    ctx.miterLimit = 10;
	    ctx.globalCompositeOperation = 'source-over';
	    ctx.font = '10px sans-serif';
	    if (ctx.setLineDash !== undefined) {
	      ctx.setLineDash([]);
	      ctx.lineDashOffset = 0;
	    }
	  }
	  function composeSMaskBackdrop(bytes, r0, g0, b0) {
	    var length = bytes.length;
	    for (var i = 3; i < length; i += 4) {
	      var alpha = bytes[i];
	      if (alpha === 0) {
	        bytes[i - 3] = r0;
	        bytes[i - 2] = g0;
	        bytes[i - 1] = b0;
	      } else if (alpha < 255) {
	        var alpha_ = 255 - alpha;
	        bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
	        bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
	        bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
	      }
	    }
	  }
	  function composeSMaskAlpha(maskData, layerData, transferMap) {
	    var length = maskData.length;
	    var scale = 1 / 255;
	    for (var i = 3; i < length; i += 4) {
	      var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
	      layerData[i] = layerData[i] * alpha * scale | 0;
	    }
	  }
	  function composeSMaskLuminosity(maskData, layerData, transferMap) {
	    var length = maskData.length;
	    for (var i = 3; i < length; i += 4) {
	      var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
	      layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
	    }
	  }
	  function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {
	    var hasBackdrop = !!backdrop;
	    var r0 = hasBackdrop ? backdrop[0] : 0;
	    var g0 = hasBackdrop ? backdrop[1] : 0;
	    var b0 = hasBackdrop ? backdrop[2] : 0;
	    var composeFn;
	    if (subtype === 'Luminosity') {
	      composeFn = composeSMaskLuminosity;
	    } else {
	      composeFn = composeSMaskAlpha;
	    }
	    var PIXELS_TO_PROCESS = 1048576;
	    var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));
	    for (var row = 0; row < height; row += chunkSize) {
	      var chunkHeight = Math.min(chunkSize, height - row);
	      var maskData = maskCtx.getImageData(0, row, width, chunkHeight);
	      var layerData = layerCtx.getImageData(0, row, width, chunkHeight);
	      if (hasBackdrop) {
	        composeSMaskBackdrop(maskData.data, r0, g0, b0);
	      }
	      composeFn(maskData.data, layerData.data, transferMap);
	      maskCtx.putImageData(layerData, 0, row);
	    }
	  }
	  function composeSMask(ctx, smask, layerCtx) {
	    var mask = smask.canvas;
	    var maskCtx = smask.context;
	    ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);
	    var backdrop = smask.backdrop || null;
	    if (!smask.transferMap && _webgl.WebGLUtils.isEnabled) {
	      var composed = _webgl.WebGLUtils.composeSMask(layerCtx.canvas, mask, {
	        subtype: smask.subtype,
	        backdrop: backdrop
	      });
	      ctx.setTransform(1, 0, 0, 1, 0, 0);
	      ctx.drawImage(composed, smask.offsetX, smask.offsetY);
	      return;
	    }
	    genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);
	    ctx.drawImage(mask, 0, 0);
	  }
	  var LINE_CAP_STYLES = ['butt', 'round', 'square'];
	  var LINE_JOIN_STYLES = ['miter', 'round', 'bevel'];
	  var NORMAL_CLIP = {};
	  var EO_CLIP = {};
	  CanvasGraphics.prototype = {
	    beginDrawing: function beginDrawing(_ref) {
	      var transform = _ref.transform,
	          viewport = _ref.viewport,
	          transparency = _ref.transparency,
	          _ref$background = _ref.background,
	          background = _ref$background === undefined ? null : _ref$background;

	      var width = this.ctx.canvas.width;
	      var height = this.ctx.canvas.height;
	      this.ctx.save();
	      this.ctx.fillStyle = background || 'rgb(255, 255, 255)';
	      this.ctx.fillRect(0, 0, width, height);
	      this.ctx.restore();
	      if (transparency) {
	        var transparentCanvas = this.cachedCanvases.getCanvas('transparent', width, height, true);
	        this.compositeCtx = this.ctx;
	        this.transparentCanvas = transparentCanvas.canvas;
	        this.ctx = transparentCanvas.context;
	        this.ctx.save();
	        this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);
	      }
	      this.ctx.save();
	      resetCtxToDefault(this.ctx);
	      if (transform) {
	        this.ctx.transform.apply(this.ctx, transform);
	      }
	      this.ctx.transform.apply(this.ctx, viewport.transform);
	      this.baseTransform = this.ctx.mozCurrentTransform.slice();
	      if (this.imageLayer) {
	        this.imageLayer.beginLayout();
	      }
	    },

	    executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
	      var argsArray = operatorList.argsArray;
	      var fnArray = operatorList.fnArray;
	      var i = executionStartIdx || 0;
	      var argsArrayLen = argsArray.length;
	      if (argsArrayLen === i) {
	        return i;
	      }
	      var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === 'function';
	      var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
	      var steps = 0;
	      var commonObjs = this.commonObjs;
	      var objs = this.objs;
	      var fnId;
	      while (true) {
	        if (stepper !== undefined && i === stepper.nextBreakPoint) {
	          stepper.breakIt(i, continueCallback);
	          return i;
	        }
	        fnId = fnArray[i];
	        if (fnId !== _util.OPS.dependency) {
	          this[fnId].apply(this, argsArray[i]);
	        } else {
	          var deps = argsArray[i];
	          for (var n = 0, nn = deps.length; n < nn; n++) {
	            var depObjId = deps[n];
	            var common = depObjId[0] === 'g' && depObjId[1] === '_';
	            var objsPool = common ? commonObjs : objs;
	            if (!objsPool.isResolved(depObjId)) {
	              objsPool.get(depObjId, continueCallback);
	              return i;
	            }
	          }
	        }
	        i++;
	        if (i === argsArrayLen) {
	          return i;
	        }
	        if (chunkOperations && ++steps > EXECUTION_STEPS) {
	          if (Date.now() > endTime) {
	            continueCallback();
	            return i;
	          }
	          steps = 0;
	        }
	      }
	    },
	    endDrawing: function CanvasGraphics_endDrawing() {
	      if (this.current.activeSMask !== null) {
	        this.endSMaskGroup();
	      }
	      this.ctx.restore();
	      if (this.transparentCanvas) {
	        this.ctx = this.compositeCtx;
	        this.ctx.save();
	        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
	        this.ctx.drawImage(this.transparentCanvas, 0, 0);
	        this.ctx.restore();
	        this.transparentCanvas = null;
	      }
	      this.cachedCanvases.clear();
	      _webgl.WebGLUtils.clear();
	      if (this.imageLayer) {
	        this.imageLayer.endLayout();
	      }
	    },
	    setLineWidth: function CanvasGraphics_setLineWidth(width) {
	      this.current.lineWidth = width;
	      this.ctx.lineWidth = width;
	    },
	    setLineCap: function CanvasGraphics_setLineCap(style) {
	      this.ctx.lineCap = LINE_CAP_STYLES[style];
	    },
	    setLineJoin: function CanvasGraphics_setLineJoin(style) {
	      this.ctx.lineJoin = LINE_JOIN_STYLES[style];
	    },
	    setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {
	      this.ctx.miterLimit = limit;
	    },
	    setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {
	      var ctx = this.ctx;
	      if (ctx.setLineDash !== undefined) {
	        ctx.setLineDash(dashArray);
	        ctx.lineDashOffset = dashPhase;
	      }
	    },
	    setRenderingIntent: function CanvasGraphics_setRenderingIntent(intent) {},
	    setFlatness: function CanvasGraphics_setFlatness(flatness) {},
	    setGState: function CanvasGraphics_setGState(states) {
	      for (var i = 0, ii = states.length; i < ii; i++) {
	        var state = states[i];
	        var key = state[0];
	        var value = state[1];
	        switch (key) {
	          case 'LW':
	            this.setLineWidth(value);
	            break;
	          case 'LC':
	            this.setLineCap(value);
	            break;
	          case 'LJ':
	            this.setLineJoin(value);
	            break;
	          case 'ML':
	            this.setMiterLimit(value);
	            break;
	          case 'D':
	            this.setDash(value[0], value[1]);
	            break;
	          case 'RI':
	            this.setRenderingIntent(value);
	            break;
	          case 'FL':
	            this.setFlatness(value);
	            break;
	          case 'Font':
	            this.setFont(value[0], value[1]);
	            break;
	          case 'CA':
	            this.current.strokeAlpha = state[1];
	            break;
	          case 'ca':
	            this.current.fillAlpha = state[1];
	            this.ctx.globalAlpha = state[1];
	            break;
	          case 'BM':
	            this.ctx.globalCompositeOperation = value;
	            break;
	          case 'SMask':
	            if (this.current.activeSMask) {
	              if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {
	                this.suspendSMaskGroup();
	              } else {
	                this.endSMaskGroup();
	              }
	            }
	            this.current.activeSMask = value ? this.tempSMask : null;
	            if (this.current.activeSMask) {
	              this.beginSMaskGroup();
	            }
	            this.tempSMask = null;
	            break;
	        }
	      }
	    },
	    beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {
	      var activeSMask = this.current.activeSMask;
	      var drawnWidth = activeSMask.canvas.width;
	      var drawnHeight = activeSMask.canvas.height;
	      var cacheId = 'smaskGroupAt' + this.groupLevel;
	      var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
	      var currentCtx = this.ctx;
	      var currentTransform = currentCtx.mozCurrentTransform;
	      this.ctx.save();
	      var groupCtx = scratchCanvas.context;
	      groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);
	      groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);
	      groupCtx.transform.apply(groupCtx, currentTransform);
	      activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;
	      copyCtxState(currentCtx, groupCtx);
	      this.ctx = groupCtx;
	      this.setGState([['BM', 'source-over'], ['ca', 1], ['CA', 1]]);
	      this.groupStack.push(currentCtx);
	      this.groupLevel++;
	    },
	    suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {
	      var groupCtx = this.ctx;
	      this.groupLevel--;
	      this.ctx = this.groupStack.pop();
	      composeSMask(this.ctx, this.current.activeSMask, groupCtx);
	      this.ctx.restore();
	      this.ctx.save();
	      copyCtxState(groupCtx, this.ctx);
	      this.current.resumeSMaskCtx = groupCtx;
	      var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);
	      this.ctx.transform.apply(this.ctx, deltaTransform);
	      groupCtx.save();
	      groupCtx.setTransform(1, 0, 0, 1, 0, 0);
	      groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);
	      groupCtx.restore();
	    },
	    resumeSMaskGroup: function CanvasGraphics_endSMaskGroup() {
	      var groupCtx = this.current.resumeSMaskCtx;
	      var currentCtx = this.ctx;
	      this.ctx = groupCtx;
	      this.groupStack.push(currentCtx);
	      this.groupLevel++;
	    },
	    endSMaskGroup: function CanvasGraphics_endSMaskGroup() {
	      var groupCtx = this.ctx;
	      this.groupLevel--;
	      this.ctx = this.groupStack.pop();
	      composeSMask(this.ctx, this.current.activeSMask, groupCtx);
	      this.ctx.restore();
	      copyCtxState(groupCtx, this.ctx);
	      var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);
	      this.ctx.transform.apply(this.ctx, deltaTransform);
	    },
	    save: function CanvasGraphics_save() {
	      this.ctx.save();
	      var old = this.current;
	      this.stateStack.push(old);
	      this.current = old.clone();
	      this.current.resumeSMaskCtx = null;
	    },
	    restore: function CanvasGraphics_restore() {
	      if (this.current.resumeSMaskCtx) {
	        this.resumeSMaskGroup();
	      }
	      if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {
	        this.endSMaskGroup();
	      }
	      if (this.stateStack.length !== 0) {
	        this.current = this.stateStack.pop();
	        this.ctx.restore();
	        this.pendingClip = null;
	        this.cachedGetSinglePixelWidth = null;
	      }
	    },
	    transform: function CanvasGraphics_transform(a, b, c, d, e, f) {
	      this.ctx.transform(a, b, c, d, e, f);
	      this.cachedGetSinglePixelWidth = null;
	    },
	    constructPath: function CanvasGraphics_constructPath(ops, args) {
	      var ctx = this.ctx;
	      var current = this.current;
	      var x = current.x,
	          y = current.y;
	      for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {
	        switch (ops[i] | 0) {
	          case _util.OPS.rectangle:
	            x = args[j++];
	            y = args[j++];
	            var width = args[j++];
	            var height = args[j++];
	            if (width === 0) {
	              width = this.getSinglePixelWidth();
	            }
	            if (height === 0) {
	              height = this.getSinglePixelWidth();
	            }
	            var xw = x + width;
	            var yh = y + height;
	            this.ctx.moveTo(x, y);
	            this.ctx.lineTo(xw, y);
	            this.ctx.lineTo(xw, yh);
	            this.ctx.lineTo(x, yh);
	            this.ctx.lineTo(x, y);
	            this.ctx.closePath();
	            break;
	          case _util.OPS.moveTo:
	            x = args[j++];
	            y = args[j++];
	            ctx.moveTo(x, y);
	            break;
	          case _util.OPS.lineTo:
	            x = args[j++];
	            y = args[j++];
	            ctx.lineTo(x, y);
	            break;
	          case _util.OPS.curveTo:
	            x = args[j + 4];
	            y = args[j + 5];
	            ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
	            j += 6;
	            break;
	          case _util.OPS.curveTo2:
	            ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
	            x = args[j + 2];
	            y = args[j + 3];
	            j += 4;
	            break;
	          case _util.OPS.curveTo3:
	            x = args[j + 2];
	            y = args[j + 3];
	            ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
	            j += 4;
	            break;
	          case _util.OPS.closePath:
	            ctx.closePath();
	            break;
	        }
	      }
	      current.setCurrentPoint(x, y);
	    },
	    closePath: function CanvasGraphics_closePath() {
	      this.ctx.closePath();
	    },
	    stroke: function CanvasGraphics_stroke(consumePath) {
	      consumePath = typeof consumePath !== 'undefined' ? consumePath : true;
	      var ctx = this.ctx;
	      var strokeColor = this.current.strokeColor;
	      ctx.lineWidth = Math.max(this.getSinglePixelWidth() * MIN_WIDTH_FACTOR, this.current.lineWidth);
	      ctx.globalAlpha = this.current.strokeAlpha;
	      if (strokeColor && strokeColor.hasOwnProperty('type') && strokeColor.type === 'Pattern') {
	        ctx.save();
	        ctx.strokeStyle = strokeColor.getPattern(ctx, this);
	        ctx.stroke();
	        ctx.restore();
	      } else {
	        ctx.stroke();
	      }
	      if (consumePath) {
	        this.consumePath();
	      }
	      ctx.globalAlpha = this.current.fillAlpha;
	    },
	    closeStroke: function CanvasGraphics_closeStroke() {
	      this.closePath();
	      this.stroke();
	    },
	    fill: function CanvasGraphics_fill(consumePath) {
	      consumePath = typeof consumePath !== 'undefined' ? consumePath : true;
	      var ctx = this.ctx;
	      var fillColor = this.current.fillColor;
	      var isPatternFill = this.current.patternFill;
	      var needRestore = false;
	      if (isPatternFill) {
	        ctx.save();
	        if (this.baseTransform) {
	          ctx.setTransform.apply(ctx, this.baseTransform);
	        }
	        ctx.fillStyle = fillColor.getPattern(ctx, this);
	        needRestore = true;
	      }
	      if (this.pendingEOFill) {
	        ctx.fill('evenodd');
	        this.pendingEOFill = false;
	      } else {
	        ctx.fill();
	      }
	      if (needRestore) {
	        ctx.restore();
	      }
	      if (consumePath) {
	        this.consumePath();
	      }
	    },
	    eoFill: function CanvasGraphics_eoFill() {
	      this.pendingEOFill = true;
	      this.fill();
	    },
	    fillStroke: function CanvasGraphics_fillStroke() {
	      this.fill(false);
	      this.stroke(false);
	      this.consumePath();
	    },
	    eoFillStroke: function CanvasGraphics_eoFillStroke() {
	      this.pendingEOFill = true;
	      this.fillStroke();
	    },
	    closeFillStroke: function CanvasGraphics_closeFillStroke() {
	      this.closePath();
	      this.fillStroke();
	    },
	    closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {
	      this.pendingEOFill = true;
	      this.closePath();
	      this.fillStroke();
	    },
	    endPath: function CanvasGraphics_endPath() {
	      this.consumePath();
	    },
	    clip: function CanvasGraphics_clip() {
	      this.pendingClip = NORMAL_CLIP;
	    },
	    eoClip: function CanvasGraphics_eoClip() {
	      this.pendingClip = EO_CLIP;
	    },
	    beginText: function CanvasGraphics_beginText() {
	      this.current.textMatrix = _util.IDENTITY_MATRIX;
	      this.current.textMatrixScale = 1;
	      this.current.x = this.current.lineX = 0;
	      this.current.y = this.current.lineY = 0;
	    },
	    endText: function CanvasGraphics_endText() {
	      var paths = this.pendingTextPaths;
	      var ctx = this.ctx;
	      if (paths === undefined) {
	        ctx.beginPath();
	        return;
	      }
	      ctx.save();
	      ctx.beginPath();
	      for (var i = 0; i < paths.length; i++) {
	        var path = paths[i];
	        ctx.setTransform.apply(ctx, path.transform);
	        ctx.translate(path.x, path.y);
	        path.addToPath(ctx, path.fontSize);
	      }
	      ctx.restore();
	      ctx.clip();
	      ctx.beginPath();
	      delete this.pendingTextPaths;
	    },
	    setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {
	      this.current.charSpacing = spacing;
	    },
	    setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {
	      this.current.wordSpacing = spacing;
	    },
	    setHScale: function CanvasGraphics_setHScale(scale) {
	      this.current.textHScale = scale / 100;
	    },
	    setLeading: function CanvasGraphics_setLeading(leading) {
	      this.current.leading = -leading;
	    },
	    setFont: function CanvasGraphics_setFont(fontRefName, size) {
	      var fontObj = this.commonObjs.get(fontRefName);
	      var current = this.current;
	      if (!fontObj) {
	        throw new Error('Can\'t find font for ' + fontRefName);
	      }
	      current.fontMatrix = fontObj.fontMatrix ? fontObj.fontMatrix : _util.FONT_IDENTITY_MATRIX;
	      if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
	        (0, _util.warn)('Invalid font matrix for font ' + fontRefName);
	      }
	      if (size < 0) {
	        size = -size;
	        current.fontDirection = -1;
	      } else {
	        current.fontDirection = 1;
	      }
	      this.current.font = fontObj;
	      this.current.fontSize = size;
	      if (fontObj.isType3Font) {
	        return;
	      }
	      var name = fontObj.loadedName || 'sans-serif';
	      var bold = fontObj.black ? '900' : fontObj.bold ? 'bold' : 'normal';
	      var italic = fontObj.italic ? 'italic' : 'normal';
	      var typeface = '"' + name + '", ' + fontObj.fallbackName;
	      var browserFontSize = size < MIN_FONT_SIZE ? MIN_FONT_SIZE : size > MAX_FONT_SIZE ? MAX_FONT_SIZE : size;
	      this.current.fontSizeScale = size / browserFontSize;
	      var rule = italic + ' ' + bold + ' ' + browserFontSize + 'px ' + typeface;
	      this.ctx.font = rule;
	    },
	    setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {
	      this.current.textRenderingMode = mode;
	    },
	    setTextRise: function CanvasGraphics_setTextRise(rise) {
	      this.current.textRise = rise;
	    },
	    moveText: function CanvasGraphics_moveText(x, y) {
	      this.current.x = this.current.lineX += x;
	      this.current.y = this.current.lineY += y;
	    },
	    setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {
	      this.setLeading(-y);
	      this.moveText(x, y);
	    },
	    setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {
	      this.current.textMatrix = [a, b, c, d, e, f];
	      this.current.textMatrixScale = Math.sqrt(a * a + b * b);
	      this.current.x = this.current.lineX = 0;
	      this.current.y = this.current.lineY = 0;
	    },
	    nextLine: function CanvasGraphics_nextLine() {
	      this.moveText(0, this.current.leading);
	    },
	    paintChar: function CanvasGraphics_paintChar(character, x, y) {
	      var ctx = this.ctx;
	      var current = this.current;
	      var font = current.font;
	      var textRenderingMode = current.textRenderingMode;
	      var fontSize = current.fontSize / current.fontSizeScale;
	      var fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
	      var isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);
	      var addToPath;
	      if (font.disableFontFace || isAddToPathSet) {
	        addToPath = font.getPathGenerator(this.commonObjs, character);
	      }
	      if (font.disableFontFace) {
	        ctx.save();
	        ctx.translate(x, y);
	        ctx.beginPath();
	        addToPath(ctx, fontSize);
	        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          ctx.fill();
	        }
	        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          ctx.stroke();
	        }
	        ctx.restore();
	      } else {
	        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          ctx.fillText(character, x, y);
	        }
	        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          ctx.strokeText(character, x, y);
	        }
	      }
	      if (isAddToPathSet) {
	        var paths = this.pendingTextPaths || (this.pendingTextPaths = []);
	        paths.push({
	          transform: ctx.mozCurrentTransform,
	          x: x,
	          y: y,
	          fontSize: fontSize,
	          addToPath: addToPath
	        });
	      }
	    },
	    get isFontSubpixelAAEnabled() {
	      var ctx = this.canvasFactory.create(10, 10).context;
	      ctx.scale(1.5, 1);
	      ctx.fillText('I', 0, 10);
	      var data = ctx.getImageData(0, 0, 10, 10).data;
	      var enabled = false;
	      for (var i = 3; i < data.length; i += 4) {
	        if (data[i] > 0 && data[i] < 255) {
	          enabled = true;
	          break;
	        }
	      }
	      return (0, _util.shadow)(this, 'isFontSubpixelAAEnabled', enabled);
	    },
	    showText: function CanvasGraphics_showText(glyphs) {
	      var current = this.current;
	      var font = current.font;
	      if (font.isType3Font) {
	        return this.showType3Text(glyphs);
	      }
	      var fontSize = current.fontSize;
	      if (fontSize === 0) {
	        return;
	      }
	      var ctx = this.ctx;
	      var fontSizeScale = current.fontSizeScale;
	      var charSpacing = current.charSpacing;
	      var wordSpacing = current.wordSpacing;
	      var fontDirection = current.fontDirection;
	      var textHScale = current.textHScale * fontDirection;
	      var glyphsLength = glyphs.length;
	      var vertical = font.vertical;
	      var spacingDir = vertical ? 1 : -1;
	      var defaultVMetrics = font.defaultVMetrics;
	      var widthAdvanceScale = fontSize * current.fontMatrix[0];
	      var simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace;
	      ctx.save();
	      ctx.transform.apply(ctx, current.textMatrix);
	      ctx.translate(current.x, current.y + current.textRise);
	      if (current.patternFill) {
	        ctx.fillStyle = current.fillColor.getPattern(ctx, this);
	      }
	      if (fontDirection > 0) {
	        ctx.scale(textHScale, -1);
	      } else {
	        ctx.scale(textHScale, 1);
	      }
	      var lineWidth = current.lineWidth;
	      var scale = current.textMatrixScale;
	      if (scale === 0 || lineWidth === 0) {
	        var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
	        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          this.cachedGetSinglePixelWidth = null;
	          lineWidth = this.getSinglePixelWidth() * MIN_WIDTH_FACTOR;
	        }
	      } else {
	        lineWidth /= scale;
	      }
	      if (fontSizeScale !== 1.0) {
	        ctx.scale(fontSizeScale, fontSizeScale);
	        lineWidth /= fontSizeScale;
	      }
	      ctx.lineWidth = lineWidth;
	      var x = 0,
	          i;
	      for (i = 0; i < glyphsLength; ++i) {
	        var glyph = glyphs[i];
	        if ((0, _util.isNum)(glyph)) {
	          x += spacingDir * glyph * fontSize / 1000;
	          continue;
	        }
	        var restoreNeeded = false;
	        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
	        var character = glyph.fontChar;
	        var accent = glyph.accent;
	        var scaledX, scaledY, scaledAccentX, scaledAccentY;
	        var width = glyph.width;
	        if (vertical) {
	          var vmetric, vx, vy;
	          vmetric = glyph.vmetric || defaultVMetrics;
	          vx = glyph.vmetric ? vmetric[1] : width * 0.5;
	          vx = -vx * widthAdvanceScale;
	          vy = vmetric[2] * widthAdvanceScale;
	          width = vmetric ? -vmetric[0] : width;
	          scaledX = vx / fontSizeScale;
	          scaledY = (x + vy) / fontSizeScale;
	        } else {
	          scaledX = x / fontSizeScale;
	          scaledY = 0;
	        }
	        if (font.remeasure && width > 0) {
	          var measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;
	          if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
	            var characterScaleX = width / measuredWidth;
	            restoreNeeded = true;
	            ctx.save();
	            ctx.scale(characterScaleX, 1);
	            scaledX /= characterScaleX;
	          } else if (width !== measuredWidth) {
	            scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;
	          }
	        }
	        if (glyph.isInFont || font.missingFile) {
	          if (simpleFillText && !accent) {
	            ctx.fillText(character, scaledX, scaledY);
	          } else {
	            this.paintChar(character, scaledX, scaledY);
	            if (accent) {
	              scaledAccentX = scaledX + accent.offset.x / fontSizeScale;
	              scaledAccentY = scaledY - accent.offset.y / fontSizeScale;
	              this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY);
	            }
	          }
	        }
	        var charWidth = width * widthAdvanceScale + spacing * fontDirection;
	        x += charWidth;
	        if (restoreNeeded) {
	          ctx.restore();
	        }
	      }
	      if (vertical) {
	        current.y -= x * textHScale;
	      } else {
	        current.x += x * textHScale;
	      }
	      ctx.restore();
	    },
	    showType3Text: function CanvasGraphics_showType3Text(glyphs) {
	      var ctx = this.ctx;
	      var current = this.current;
	      var font = current.font;
	      var fontSize = current.fontSize;
	      var fontDirection = current.fontDirection;
	      var spacingDir = font.vertical ? 1 : -1;
	      var charSpacing = current.charSpacing;
	      var wordSpacing = current.wordSpacing;
	      var textHScale = current.textHScale * fontDirection;
	      var fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;
	      var glyphsLength = glyphs.length;
	      var isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;
	      var i, glyph, width, spacingLength;
	      if (isTextInvisible || fontSize === 0) {
	        return;
	      }
	      this.cachedGetSinglePixelWidth = null;
	      ctx.save();
	      ctx.transform.apply(ctx, current.textMatrix);
	      ctx.translate(current.x, current.y);
	      ctx.scale(textHScale, fontDirection);
	      for (i = 0; i < glyphsLength; ++i) {
	        glyph = glyphs[i];
	        if ((0, _util.isNum)(glyph)) {
	          spacingLength = spacingDir * glyph * fontSize / 1000;
	          this.ctx.translate(spacingLength, 0);
	          current.x += spacingLength * textHScale;
	          continue;
	        }
	        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
	        var operatorList = font.charProcOperatorList[glyph.operatorListId];
	        if (!operatorList) {
	          (0, _util.warn)('Type3 character "' + glyph.operatorListId + '" is not available.');
	          continue;
	        }
	        this.processingType3 = glyph;
	        this.save();
	        ctx.scale(fontSize, fontSize);
	        ctx.transform.apply(ctx, fontMatrix);
	        this.executeOperatorList(operatorList);
	        this.restore();
	        var transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);
	        width = transformed[0] * fontSize + spacing;
	        ctx.translate(width, 0);
	        current.x += width * textHScale;
	      }
	      ctx.restore();
	      this.processingType3 = null;
	    },
	    setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},
	    setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
	      this.ctx.rect(llx, lly, urx - llx, ury - lly);
	      this.clip();
	      this.endPath();
	    },
	    getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {
	      var _this = this;

	      var pattern;
	      if (IR[0] === 'TilingPattern') {
	        var color = IR[1];
	        var baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();
	        var canvasGraphicsFactory = {
	          createCanvasGraphics: function createCanvasGraphics(ctx) {
	            return new CanvasGraphics(ctx, _this.commonObjs, _this.objs, _this.canvasFactory);
	          }
	        };
	        pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
	      } else {
	        pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);
	      }
	      return pattern;
	    },
	    setStrokeColorN: function CanvasGraphics_setStrokeColorN() {
	      this.current.strokeColor = this.getColorN_Pattern(arguments);
	    },
	    setFillColorN: function CanvasGraphics_setFillColorN() {
	      this.current.fillColor = this.getColorN_Pattern(arguments);
	      this.current.patternFill = true;
	    },
	    setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {
	      var color = _util.Util.makeCssRgb(r, g, b);
	      this.ctx.strokeStyle = color;
	      this.current.strokeColor = color;
	    },
	    setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {
	      var color = _util.Util.makeCssRgb(r, g, b);
	      this.ctx.fillStyle = color;
	      this.current.fillColor = color;
	      this.current.patternFill = false;
	    },
	    shadingFill: function CanvasGraphics_shadingFill(patternIR) {
	      var ctx = this.ctx;
	      this.save();
	      var pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);
	      ctx.fillStyle = pattern.getPattern(ctx, this, true);
	      var inv = ctx.mozCurrentTransformInverse;
	      if (inv) {
	        var canvas = ctx.canvas;
	        var width = canvas.width;
	        var height = canvas.height;
	        var bl = _util.Util.applyTransform([0, 0], inv);
	        var br = _util.Util.applyTransform([0, height], inv);
	        var ul = _util.Util.applyTransform([width, 0], inv);
	        var ur = _util.Util.applyTransform([width, height], inv);
	        var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
	        var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
	        var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
	        var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
	        this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
	      } else {
	        this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
	      }
	      this.restore();
	    },
	    beginInlineImage: function CanvasGraphics_beginInlineImage() {
	      throw new Error('Should not call beginInlineImage');
	    },
	    beginImageData: function CanvasGraphics_beginImageData() {
	      throw new Error('Should not call beginImageData');
	    },
	    paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {
	      this.save();
	      this.baseTransformStack.push(this.baseTransform);
	      if (Array.isArray(matrix) && matrix.length === 6) {
	        this.transform.apply(this, matrix);
	      }
	      this.baseTransform = this.ctx.mozCurrentTransform;
	      if (Array.isArray(bbox) && bbox.length === 4) {
	        var width = bbox[2] - bbox[0];
	        var height = bbox[3] - bbox[1];
	        this.ctx.rect(bbox[0], bbox[1], width, height);
	        this.clip();
	        this.endPath();
	      }
	    },
	    paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {
	      this.restore();
	      this.baseTransform = this.baseTransformStack.pop();
	    },
	    beginGroup: function CanvasGraphics_beginGroup(group) {
	      this.save();
	      var currentCtx = this.ctx;
	      if (!group.isolated) {
	        (0, _util.info)('TODO: Support non-isolated groups.');
	      }
	      if (group.knockout) {
	        (0, _util.warn)('Knockout groups not supported.');
	      }
	      var currentTransform = currentCtx.mozCurrentTransform;
	      if (group.matrix) {
	        currentCtx.transform.apply(currentCtx, group.matrix);
	      }
	      if (!group.bbox) {
	        throw new Error('Bounding box is required.');
	      }
	      var bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);
	      var canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
	      bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
	      var offsetX = Math.floor(bounds[0]);
	      var offsetY = Math.floor(bounds[1]);
	      var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
	      var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
	      var scaleX = 1,
	          scaleY = 1;
	      if (drawnWidth > MAX_GROUP_SIZE) {
	        scaleX = drawnWidth / MAX_GROUP_SIZE;
	        drawnWidth = MAX_GROUP_SIZE;
	      }
	      if (drawnHeight > MAX_GROUP_SIZE) {
	        scaleY = drawnHeight / MAX_GROUP_SIZE;
	        drawnHeight = MAX_GROUP_SIZE;
	      }
	      var cacheId = 'groupAt' + this.groupLevel;
	      if (group.smask) {
	        cacheId += '_smask_' + this.smaskCounter++ % 2;
	      }
	      var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
	      var groupCtx = scratchCanvas.context;
	      groupCtx.scale(1 / scaleX, 1 / scaleY);
	      groupCtx.translate(-offsetX, -offsetY);
	      groupCtx.transform.apply(groupCtx, currentTransform);
	      if (group.smask) {
	        this.smaskStack.push({
	          canvas: scratchCanvas.canvas,
	          context: groupCtx,
	          offsetX: offsetX,
	          offsetY: offsetY,
	          scaleX: scaleX,
	          scaleY: scaleY,
	          subtype: group.smask.subtype,
	          backdrop: group.smask.backdrop,
	          transferMap: group.smask.transferMap || null,
	          startTransformInverse: null
	        });
	      } else {
	        currentCtx.setTransform(1, 0, 0, 1, 0, 0);
	        currentCtx.translate(offsetX, offsetY);
	        currentCtx.scale(scaleX, scaleY);
	      }
	      copyCtxState(currentCtx, groupCtx);
	      this.ctx = groupCtx;
	      this.setGState([['BM', 'source-over'], ['ca', 1], ['CA', 1]]);
	      this.groupStack.push(currentCtx);
	      this.groupLevel++;
	      this.current.activeSMask = null;
	    },
	    endGroup: function CanvasGraphics_endGroup(group) {
	      this.groupLevel--;
	      var groupCtx = this.ctx;
	      this.ctx = this.groupStack.pop();
	      if (this.ctx.imageSmoothingEnabled !== undefined) {
	        this.ctx.imageSmoothingEnabled = false;
	      } else {
	        this.ctx.mozImageSmoothingEnabled = false;
	      }
	      if (group.smask) {
	        this.tempSMask = this.smaskStack.pop();
	      } else {
	        this.ctx.drawImage(groupCtx.canvas, 0, 0);
	      }
	      this.restore();
	    },
	    beginAnnotations: function CanvasGraphics_beginAnnotations() {
	      this.save();
	      if (this.baseTransform) {
	        this.ctx.setTransform.apply(this.ctx, this.baseTransform);
	      }
	    },
	    endAnnotations: function CanvasGraphics_endAnnotations() {
	      this.restore();
	    },
	    beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {
	      this.save();
	      resetCtxToDefault(this.ctx);
	      this.current = new CanvasExtraState();
	      if (Array.isArray(rect) && rect.length === 4) {
	        var width = rect[2] - rect[0];
	        var height = rect[3] - rect[1];
	        this.ctx.rect(rect[0], rect[1], width, height);
	        this.clip();
	        this.endPath();
	      }
	      this.transform.apply(this, transform);
	      this.transform.apply(this, matrix);
	    },
	    endAnnotation: function CanvasGraphics_endAnnotation() {
	      this.restore();
	    },
	    paintJpegXObject: function CanvasGraphics_paintJpegXObject(objId, w, h) {
	      var domImage = this.objs.get(objId);
	      if (!domImage) {
	        (0, _util.warn)('Dependent image isn\'t ready yet');
	        return;
	      }
	      this.save();
	      var ctx = this.ctx;
	      ctx.scale(1 / w, -1 / h);
	      ctx.drawImage(domImage, 0, 0, domImage.width, domImage.height, 0, -h, w, h);
	      if (this.imageLayer) {
	        var currentTransform = ctx.mozCurrentTransformInverse;
	        var position = this.getCanvasPosition(0, 0);
	        this.imageLayer.appendImage({
	          objId: objId,
	          left: position[0],
	          top: position[1],
	          width: w / currentTransform[0],
	          height: h / currentTransform[3]
	        });
	      }
	      this.restore();
	    },
	    paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {
	      var ctx = this.ctx;
	      var width = img.width,
	          height = img.height;
	      var fillColor = this.current.fillColor;
	      var isPatternFill = this.current.patternFill;
	      var glyph = this.processingType3;
	      if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {
	        if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {
	          glyph.compiled = compileType3Glyph({
	            data: img.data,
	            width: width,
	            height: height
	          });
	        } else {
	          glyph.compiled = null;
	        }
	      }
	      if (glyph && glyph.compiled) {
	        glyph.compiled(ctx);
	        return;
	      }
	      var maskCanvas = this.cachedCanvases.getCanvas('maskCanvas', width, height);
	      var maskCtx = maskCanvas.context;
	      maskCtx.save();
	      putBinaryImageMask(maskCtx, img);
	      maskCtx.globalCompositeOperation = 'source-in';
	      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
	      maskCtx.fillRect(0, 0, width, height);
	      maskCtx.restore();
	      this.paintInlineImageXObject(maskCanvas.canvas);
	    },
	    paintImageMaskXObjectRepeat: function CanvasGraphics_paintImageMaskXObjectRepeat(imgData, scaleX, scaleY, positions) {
	      var width = imgData.width;
	      var height = imgData.height;
	      var fillColor = this.current.fillColor;
	      var isPatternFill = this.current.patternFill;
	      var maskCanvas = this.cachedCanvases.getCanvas('maskCanvas', width, height);
	      var maskCtx = maskCanvas.context;
	      maskCtx.save();
	      putBinaryImageMask(maskCtx, imgData);
	      maskCtx.globalCompositeOperation = 'source-in';
	      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
	      maskCtx.fillRect(0, 0, width, height);
	      maskCtx.restore();
	      var ctx = this.ctx;
	      for (var i = 0, ii = positions.length; i < ii; i += 2) {
	        ctx.save();
	        ctx.transform(scaleX, 0, 0, scaleY, positions[i], positions[i + 1]);
	        ctx.scale(1, -1);
	        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
	        ctx.restore();
	      }
	    },
	    paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {
	      var ctx = this.ctx;
	      var fillColor = this.current.fillColor;
	      var isPatternFill = this.current.patternFill;
	      for (var i = 0, ii = images.length; i < ii; i++) {
	        var image = images[i];
	        var width = image.width,
	            height = image.height;
	        var maskCanvas = this.cachedCanvases.getCanvas('maskCanvas', width, height);
	        var maskCtx = maskCanvas.context;
	        maskCtx.save();
	        putBinaryImageMask(maskCtx, image);
	        maskCtx.globalCompositeOperation = 'source-in';
	        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
	        maskCtx.fillRect(0, 0, width, height);
	        maskCtx.restore();
	        ctx.save();
	        ctx.transform.apply(ctx, image.transform);
	        ctx.scale(1, -1);
	        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
	        ctx.restore();
	      }
	    },
	    paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {
	      var imgData = this.objs.get(objId);
	      if (!imgData) {
	        (0, _util.warn)('Dependent image isn\'t ready yet');
	        return;
	      }
	      this.paintInlineImageXObject(imgData);
	    },
	    paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
	      var imgData = this.objs.get(objId);
	      if (!imgData) {
	        (0, _util.warn)('Dependent image isn\'t ready yet');
	        return;
	      }
	      var width = imgData.width;
	      var height = imgData.height;
	      var map = [];
	      for (var i = 0, ii = positions.length; i < ii; i += 2) {
	        map.push({
	          transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
	          x: 0,
	          y: 0,
	          w: width,
	          h: height
	        });
	      }
	      this.paintInlineImageXObjectGroup(imgData, map);
	    },
	    paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {
	      var width = imgData.width;
	      var height = imgData.height;
	      var ctx = this.ctx;
	      this.save();
	      ctx.scale(1 / width, -1 / height);
	      var currentTransform = ctx.mozCurrentTransformInverse;
	      var a = currentTransform[0],
	          b = currentTransform[1];
	      var widthScale = Math.max(Math.sqrt(a * a + b * b), 1);
	      var c = currentTransform[2],
	          d = currentTransform[3];
	      var heightScale = Math.max(Math.sqrt(c * c + d * d), 1);
	      var imgToPaint, tmpCanvas;
	      if (imgData instanceof HTMLElement || !imgData.data) {
	        imgToPaint = imgData;
	      } else {
	        tmpCanvas = this.cachedCanvases.getCanvas('inlineImage', width, height);
	        var tmpCtx = tmpCanvas.context;
	        putBinaryImageData(tmpCtx, imgData);
	        imgToPaint = tmpCanvas.canvas;
	      }
	      var paintWidth = width,
	          paintHeight = height;
	      var tmpCanvasId = 'prescale1';
	      while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
	        var newWidth = paintWidth,
	            newHeight = paintHeight;
	        if (widthScale > 2 && paintWidth > 1) {
	          newWidth = Math.ceil(paintWidth / 2);
	          widthScale /= paintWidth / newWidth;
	        }
	        if (heightScale > 2 && paintHeight > 1) {
	          newHeight = Math.ceil(paintHeight / 2);
	          heightScale /= paintHeight / newHeight;
	        }
	        tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
	        tmpCtx = tmpCanvas.context;
	        tmpCtx.clearRect(0, 0, newWidth, newHeight);
	        tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
	        imgToPaint = tmpCanvas.canvas;
	        paintWidth = newWidth;
	        paintHeight = newHeight;
	        tmpCanvasId = tmpCanvasId === 'prescale1' ? 'prescale2' : 'prescale1';
	      }
	      ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);
	      if (this.imageLayer) {
	        var position = this.getCanvasPosition(0, -height);
	        this.imageLayer.appendImage({
	          imgData: imgData,
	          left: position[0],
	          top: position[1],
	          width: width / currentTransform[0],
	          height: height / currentTransform[3]
	        });
	      }
	      this.restore();
	    },
	    paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {
	      var ctx = this.ctx;
	      var w = imgData.width;
	      var h = imgData.height;
	      var tmpCanvas = this.cachedCanvases.getCanvas('inlineImage', w, h);
	      var tmpCtx = tmpCanvas.context;
	      putBinaryImageData(tmpCtx, imgData);
	      for (var i = 0, ii = map.length; i < ii; i++) {
	        var entry = map[i];
	        ctx.save();
	        ctx.transform.apply(ctx, entry.transform);
	        ctx.scale(1, -1);
	        ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);
	        if (this.imageLayer) {
	          var position = this.getCanvasPosition(entry.x, entry.y);
	          this.imageLayer.appendImage({
	            imgData: imgData,
	            left: position[0],
	            top: position[1],
	            width: w,
	            height: h
	          });
	        }
	        ctx.restore();
	      }
	    },
	    paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {
	      this.ctx.fillRect(0, 0, 1, 1);
	    },
	    paintXObject: function CanvasGraphics_paintXObject() {
	      (0, _util.warn)('Unsupported \'paintXObject\' command.');
	    },
	    markPoint: function CanvasGraphics_markPoint(tag) {},
	    markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},
	    beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {},
	    beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {},
	    endMarkedContent: function CanvasGraphics_endMarkedContent() {},
	    beginCompat: function CanvasGraphics_beginCompat() {},
	    endCompat: function CanvasGraphics_endCompat() {},
	    consumePath: function CanvasGraphics_consumePath() {
	      var ctx = this.ctx;
	      if (this.pendingClip) {
	        if (this.pendingClip === EO_CLIP) {
	          ctx.clip('evenodd');
	        } else {
	          ctx.clip();
	        }
	        this.pendingClip = null;
	      }
	      ctx.beginPath();
	    },
	    getSinglePixelWidth: function CanvasGraphics_getSinglePixelWidth(scale) {
	      if (this.cachedGetSinglePixelWidth === null) {
	        this.ctx.save();
	        var inverse = this.ctx.mozCurrentTransformInverse;
	        this.ctx.restore();
	        this.cachedGetSinglePixelWidth = Math.sqrt(Math.max(inverse[0] * inverse[0] + inverse[1] * inverse[1], inverse[2] * inverse[2] + inverse[3] * inverse[3]));
	      }
	      return this.cachedGetSinglePixelWidth;
	    },
	    getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {
	      var transform = this.ctx.mozCurrentTransform;
	      return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];
	    }
	  };
	  for (var op in _util.OPS) {
	    CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];
	  }
	  return CanvasGraphics;
	}();
	exports.CanvasGraphics = CanvasGraphics;

	/***/ }),
	/* 85 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TilingPattern = exports.getShadingPatternFromIR = undefined;

	var _util = __w_pdfjs_require__(0);

	var _webgl = __w_pdfjs_require__(49);

	var ShadingIRs = {};
	ShadingIRs.RadialAxial = {
	  fromIR: function RadialAxial_fromIR(raw) {
	    var type = raw[1];
	    var colorStops = raw[2];
	    var p0 = raw[3];
	    var p1 = raw[4];
	    var r0 = raw[5];
	    var r1 = raw[6];
	    return {
	      type: 'Pattern',
	      getPattern: function RadialAxial_getPattern(ctx) {
	        var grad;
	        if (type === 'axial') {
	          grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);
	        } else if (type === 'radial') {
	          grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);
	        }
	        for (var i = 0, ii = colorStops.length; i < ii; ++i) {
	          var c = colorStops[i];
	          grad.addColorStop(c[0], c[1]);
	        }
	        return grad;
	      }
	    };
	  }
	};
	var createMeshCanvas = function createMeshCanvasClosure() {
	  function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
	    var coords = context.coords,
	        colors = context.colors;
	    var bytes = data.data,
	        rowSize = data.width * 4;
	    var tmp;
	    if (coords[p1 + 1] > coords[p2 + 1]) {
	      tmp = p1;
	      p1 = p2;
	      p2 = tmp;
	      tmp = c1;
	      c1 = c2;
	      c2 = tmp;
	    }
	    if (coords[p2 + 1] > coords[p3 + 1]) {
	      tmp = p2;
	      p2 = p3;
	      p3 = tmp;
	      tmp = c2;
	      c2 = c3;
	      c3 = tmp;
	    }
	    if (coords[p1 + 1] > coords[p2 + 1]) {
	      tmp = p1;
	      p1 = p2;
	      p2 = tmp;
	      tmp = c1;
	      c1 = c2;
	      c2 = tmp;
	    }
	    var x1 = (coords[p1] + context.offsetX) * context.scaleX;
	    var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
	    var x2 = (coords[p2] + context.offsetX) * context.scaleX;
	    var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
	    var x3 = (coords[p3] + context.offsetX) * context.scaleX;
	    var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;
	    if (y1 >= y3) {
	      return;
	    }
	    var c1r = colors[c1],
	        c1g = colors[c1 + 1],
	        c1b = colors[c1 + 2];
	    var c2r = colors[c2],
	        c2g = colors[c2 + 1],
	        c2b = colors[c2 + 2];
	    var c3r = colors[c3],
	        c3g = colors[c3 + 1],
	        c3b = colors[c3 + 2];
	    var minY = Math.round(y1),
	        maxY = Math.round(y3);
	    var xa, car, cag, cab;
	    var xb, cbr, cbg, cbb;
	    var k;
	    for (var y = minY; y <= maxY; y++) {
	      if (y < y2) {
	        k = y < y1 ? 0 : y1 === y2 ? 1 : (y1 - y) / (y1 - y2);
	        xa = x1 - (x1 - x2) * k;
	        car = c1r - (c1r - c2r) * k;
	        cag = c1g - (c1g - c2g) * k;
	        cab = c1b - (c1b - c2b) * k;
	      } else {
	        k = y > y3 ? 1 : y2 === y3 ? 0 : (y2 - y) / (y2 - y3);
	        xa = x2 - (x2 - x3) * k;
	        car = c2r - (c2r - c3r) * k;
	        cag = c2g - (c2g - c3g) * k;
	        cab = c2b - (c2b - c3b) * k;
	      }
	      k = y < y1 ? 0 : y > y3 ? 1 : (y1 - y) / (y1 - y3);
	      xb = x1 - (x1 - x3) * k;
	      cbr = c1r - (c1r - c3r) * k;
	      cbg = c1g - (c1g - c3g) * k;
	      cbb = c1b - (c1b - c3b) * k;
	      var x1_ = Math.round(Math.min(xa, xb));
	      var x2_ = Math.round(Math.max(xa, xb));
	      var j = rowSize * y + x1_ * 4;
	      for (var x = x1_; x <= x2_; x++) {
	        k = (xa - x) / (xa - xb);
	        k = k < 0 ? 0 : k > 1 ? 1 : k;
	        bytes[j++] = car - (car - cbr) * k | 0;
	        bytes[j++] = cag - (cag - cbg) * k | 0;
	        bytes[j++] = cab - (cab - cbb) * k | 0;
	        bytes[j++] = 255;
	      }
	    }
	  }
	  function drawFigure(data, figure, context) {
	    var ps = figure.coords;
	    var cs = figure.colors;
	    var i, ii;
	    switch (figure.type) {
	      case 'lattice':
	        var verticesPerRow = figure.verticesPerRow;
	        var rows = Math.floor(ps.length / verticesPerRow) - 1;
	        var cols = verticesPerRow - 1;
	        for (i = 0; i < rows; i++) {
	          var q = i * verticesPerRow;
	          for (var j = 0; j < cols; j++, q++) {
	            drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
	            drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
	          }
	        }
	        break;
	      case 'triangles':
	        for (i = 0, ii = ps.length; i < ii; i += 3) {
	          drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
	        }
	        break;
	      default:
	        throw new Error('illegal figure');
	    }
	  }
	  function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases) {
	    var EXPECTED_SCALE = 1.1;
	    var MAX_PATTERN_SIZE = 3000;
	    var BORDER_SIZE = 2;
	    var offsetX = Math.floor(bounds[0]);
	    var offsetY = Math.floor(bounds[1]);
	    var boundsWidth = Math.ceil(bounds[2]) - offsetX;
	    var boundsHeight = Math.ceil(bounds[3]) - offsetY;
	    var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
	    var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
	    var scaleX = boundsWidth / width;
	    var scaleY = boundsHeight / height;
	    var context = {
	      coords: coords,
	      colors: colors,
	      offsetX: -offsetX,
	      offsetY: -offsetY,
	      scaleX: 1 / scaleX,
	      scaleY: 1 / scaleY
	    };
	    var paddedWidth = width + BORDER_SIZE * 2;
	    var paddedHeight = height + BORDER_SIZE * 2;
	    var canvas, tmpCanvas, i, ii;
	    if (_webgl.WebGLUtils.isEnabled) {
	      canvas = _webgl.WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);
	      tmpCanvas = cachedCanvases.getCanvas('mesh', paddedWidth, paddedHeight, false);
	      tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);
	      canvas = tmpCanvas.canvas;
	    } else {
	      tmpCanvas = cachedCanvases.getCanvas('mesh', paddedWidth, paddedHeight, false);
	      var tmpCtx = tmpCanvas.context;
	      var data = tmpCtx.createImageData(width, height);
	      if (backgroundColor) {
	        var bytes = data.data;
	        for (i = 0, ii = bytes.length; i < ii; i += 4) {
	          bytes[i] = backgroundColor[0];
	          bytes[i + 1] = backgroundColor[1];
	          bytes[i + 2] = backgroundColor[2];
	          bytes[i + 3] = 255;
	        }
	      }
	      for (i = 0; i < figures.length; i++) {
	        drawFigure(data, figures[i], context);
	      }
	      tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
	      canvas = tmpCanvas.canvas;
	    }
	    return {
	      canvas: canvas,
	      offsetX: offsetX - BORDER_SIZE * scaleX,
	      offsetY: offsetY - BORDER_SIZE * scaleY,
	      scaleX: scaleX,
	      scaleY: scaleY
	    };
	  }
	  return createMeshCanvas;
	}();
	ShadingIRs.Mesh = {
	  fromIR: function Mesh_fromIR(raw) {
	    var coords = raw[2];
	    var colors = raw[3];
	    var figures = raw[4];
	    var bounds = raw[5];
	    var matrix = raw[6];
	    var background = raw[8];
	    return {
	      type: 'Pattern',
	      getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {
	        var scale;
	        if (shadingFill) {
	          scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);
	        } else {
	          scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);
	          if (matrix) {
	            var matrixScale = _util.Util.singularValueDecompose2dScale(matrix);
	            scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];
	          }
	        }
	        var temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases);
	        if (!shadingFill) {
	          ctx.setTransform.apply(ctx, owner.baseTransform);
	          if (matrix) {
	            ctx.transform.apply(ctx, matrix);
	          }
	        }
	        ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
	        ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
	        return ctx.createPattern(temporaryPatternCanvas.canvas, 'no-repeat');
	      }
	    };
	  }
	};
	ShadingIRs.Dummy = {
	  fromIR: function Dummy_fromIR() {
	    return {
	      type: 'Pattern',
	      getPattern: function Dummy_fromIR_getPattern() {
	        return 'hotpink';
	      }
	    };
	  }
	};
	function getShadingPatternFromIR(raw) {
	  var shadingIR = ShadingIRs[raw[0]];
	  if (!shadingIR) {
	    throw new Error('Unknown IR type: ' + raw[0]);
	  }
	  return shadingIR.fromIR(raw);
	}
	var TilingPattern = function TilingPatternClosure() {
	  var PaintType = {
	    COLORED: 1,
	    UNCOLORED: 2
	  };
	  var MAX_PATTERN_SIZE = 3000;
	  function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
	    this.operatorList = IR[2];
	    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
	    this.bbox = IR[4];
	    this.xstep = IR[5];
	    this.ystep = IR[6];
	    this.paintType = IR[7];
	    this.tilingType = IR[8];
	    this.color = color;
	    this.canvasGraphicsFactory = canvasGraphicsFactory;
	    this.baseTransform = baseTransform;
	    this.type = 'Pattern';
	    this.ctx = ctx;
	  }
	  TilingPattern.prototype = {
	    createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {
	      var operatorList = this.operatorList;
	      var bbox = this.bbox;
	      var xstep = this.xstep;
	      var ystep = this.ystep;
	      var paintType = this.paintType;
	      var tilingType = this.tilingType;
	      var color = this.color;
	      var canvasGraphicsFactory = this.canvasGraphicsFactory;
	      (0, _util.info)('TilingType: ' + tilingType);
	      var x0 = bbox[0],
	          y0 = bbox[1],
	          x1 = bbox[2],
	          y1 = bbox[3];
	      var topLeft = [x0, y0];
	      var botRight = [x0 + xstep, y0 + ystep];
	      var width = botRight[0] - topLeft[0];
	      var height = botRight[1] - topLeft[1];
	      var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);
	      var curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);
	      var combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];
	      width = Math.min(Math.ceil(Math.abs(width * combinedScale[0])), MAX_PATTERN_SIZE);
	      height = Math.min(Math.ceil(Math.abs(height * combinedScale[1])), MAX_PATTERN_SIZE);
	      var tmpCanvas = owner.cachedCanvases.getCanvas('pattern', width, height, true);
	      var tmpCtx = tmpCanvas.context;
	      var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
	      graphics.groupLevel = owner.groupLevel;
	      this.setFillAndStrokeStyleToContext(graphics, paintType, color);
	      this.setScale(width, height, xstep, ystep);
	      this.transformToScale(graphics);
	      var tmpTranslate = [1, 0, 0, 1, -topLeft[0], -topLeft[1]];
	      graphics.transform.apply(graphics, tmpTranslate);
	      this.clipBbox(graphics, bbox, x0, y0, x1, y1);
	      graphics.executeOperatorList(operatorList);
	      return tmpCanvas.canvas;
	    },
	    setScale: function TilingPattern_setScale(width, height, xstep, ystep) {
	      this.scale = [width / xstep, height / ystep];
	    },
	    transformToScale: function TilingPattern_transformToScale(graphics) {
	      var scale = this.scale;
	      var tmpScale = [scale[0], 0, 0, scale[1], 0, 0];
	      graphics.transform.apply(graphics, tmpScale);
	    },
	    scaleToContext: function TilingPattern_scaleToContext() {
	      var scale = this.scale;
	      this.ctx.scale(1 / scale[0], 1 / scale[1]);
	    },
	    clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {
	      if (Array.isArray(bbox) && bbox.length === 4) {
	        var bboxWidth = x1 - x0;
	        var bboxHeight = y1 - y0;
	        graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
	        graphics.clip();
	        graphics.endPath();
	      }
	    },
	    setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(graphics, paintType, color) {
	      var context = graphics.ctx,
	          current = graphics.current;
	      switch (paintType) {
	        case PaintType.COLORED:
	          var ctx = this.ctx;
	          context.fillStyle = ctx.fillStyle;
	          context.strokeStyle = ctx.strokeStyle;
	          current.fillColor = ctx.fillStyle;
	          current.strokeColor = ctx.strokeStyle;
	          break;
	        case PaintType.UNCOLORED:
	          var cssColor = _util.Util.makeCssRgb(color[0], color[1], color[2]);
	          context.fillStyle = cssColor;
	          context.strokeStyle = cssColor;
	          current.fillColor = cssColor;
	          current.strokeColor = cssColor;
	          break;
	        default:
	          throw new _util.FormatError('Unsupported paint type: ' + paintType);
	      }
	    },
	    getPattern: function TilingPattern_getPattern(ctx, owner) {
	      var temporaryPatternCanvas = this.createPatternCanvas(owner);
	      ctx = this.ctx;
	      ctx.setTransform.apply(ctx, this.baseTransform);
	      ctx.transform.apply(ctx, this.matrix);
	      this.scaleToContext();
	      return ctx.createPattern(temporaryPatternCanvas, 'repeat');
	    }
	  };
	  return TilingPattern;
	}();
	exports.getShadingPatternFromIR = getShadingPatternFromIR;
	exports.TilingPattern = TilingPattern;

	/***/ }),
	/* 86 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PDFDataTransportStream = undefined;

	var _util = __w_pdfjs_require__(0);

	var PDFDataTransportStream = function PDFDataTransportStreamClosure() {
	  function PDFDataTransportStream(params, pdfDataRangeTransport) {
	    var _this = this;

	    (0, _util.assert)(pdfDataRangeTransport);
	    this._queuedChunks = [];
	    var initialData = params.initialData;
	    if (initialData && initialData.length > 0) {
	      var buffer = new Uint8Array(initialData).buffer;
	      this._queuedChunks.push(buffer);
	    }
	    this._pdfDataRangeTransport = pdfDataRangeTransport;
	    this._isRangeSupported = !params.disableRange;
	    this._isStreamingSupported = !params.disableStream;
	    this._contentLength = params.length;
	    this._fullRequestReader = null;
	    this._rangeReaders = [];
	    this._pdfDataRangeTransport.addRangeListener(function (begin, chunk) {
	      _this._onReceiveData({
	        begin: begin,
	        chunk: chunk
	      });
	    });
	    this._pdfDataRangeTransport.addProgressListener(function (loaded) {
	      _this._onProgress({ loaded: loaded });
	    });
	    this._pdfDataRangeTransport.addProgressiveReadListener(function (chunk) {
	      _this._onReceiveData({ chunk: chunk });
	    });
	    this._pdfDataRangeTransport.transportReady();
	  }
	  PDFDataTransportStream.prototype = {
	    _onReceiveData: function PDFDataTransportStream_onReceiveData(args) {
	      var buffer = new Uint8Array(args.chunk).buffer;
	      if (args.begin === undefined) {
	        if (this._fullRequestReader) {
	          this._fullRequestReader._enqueue(buffer);
	        } else {
	          this._queuedChunks.push(buffer);
	        }
	      } else {
	        var found = this._rangeReaders.some(function (rangeReader) {
	          if (rangeReader._begin !== args.begin) {
	            return false;
	          }
	          rangeReader._enqueue(buffer);
	          return true;
	        });
	        (0, _util.assert)(found);
	      }
	    },
	    _onProgress: function PDFDataTransportStream_onDataProgress(evt) {
	      if (this._rangeReaders.length > 0) {
	        var firstReader = this._rangeReaders[0];
	        if (firstReader.onProgress) {
	          firstReader.onProgress({ loaded: evt.loaded });
	        }
	      }
	    },
	    _removeRangeReader: function PDFDataTransportStream_removeRangeReader(reader) {
	      var i = this._rangeReaders.indexOf(reader);
	      if (i >= 0) {
	        this._rangeReaders.splice(i, 1);
	      }
	    },
	    getFullReader: function PDFDataTransportStream_getFullReader() {
	      (0, _util.assert)(!this._fullRequestReader);
	      var queuedChunks = this._queuedChunks;
	      this._queuedChunks = null;
	      return new PDFDataTransportStreamReader(this, queuedChunks);
	    },
	    getRangeReader: function PDFDataTransportStream_getRangeReader(begin, end) {
	      var reader = new PDFDataTransportStreamRangeReader(this, begin, end);
	      this._pdfDataRangeTransport.requestDataRange(begin, end);
	      this._rangeReaders.push(reader);
	      return reader;
	    },
	    cancelAllRequests: function PDFDataTransportStream_cancelAllRequests(reason) {
	      if (this._fullRequestReader) {
	        this._fullRequestReader.cancel(reason);
	      }
	      var readers = this._rangeReaders.slice(0);
	      readers.forEach(function (rangeReader) {
	        rangeReader.cancel(reason);
	      });
	      this._pdfDataRangeTransport.abort();
	    }
	  };
	  function PDFDataTransportStreamReader(stream, queuedChunks) {
	    this._stream = stream;
	    this._done = false;
	    this._queuedChunks = queuedChunks || [];
	    this._requests = [];
	    this._headersReady = Promise.resolve();
	    stream._fullRequestReader = this;
	    this.onProgress = null;
	  }
	  PDFDataTransportStreamReader.prototype = {
	    _enqueue: function PDFDataTransportStreamReader_enqueue(chunk) {
	      if (this._done) {
	        return;
	      }
	      if (this._requests.length > 0) {
	        var requestCapability = this._requests.shift();
	        requestCapability.resolve({
	          value: chunk,
	          done: false
	        });
	        return;
	      }
	      this._queuedChunks.push(chunk);
	    },
	    get headersReady() {
	      return this._headersReady;
	    },
	    get isRangeSupported() {
	      return this._stream._isRangeSupported;
	    },
	    get isStreamingSupported() {
	      return this._stream._isStreamingSupported;
	    },
	    get contentLength() {
	      return this._stream._contentLength;
	    },
	    read: function PDFDataTransportStreamReader_read() {
	      if (this._queuedChunks.length > 0) {
	        var chunk = this._queuedChunks.shift();
	        return Promise.resolve({
	          value: chunk,
	          done: false
	        });
	      }
	      if (this._done) {
	        return Promise.resolve({
	          value: undefined,
	          done: true
	        });
	      }
	      var requestCapability = (0, _util.createPromiseCapability)();
	      this._requests.push(requestCapability);
	      return requestCapability.promise;
	    },
	    cancel: function PDFDataTransportStreamReader_cancel(reason) {
	      this._done = true;
	      this._requests.forEach(function (requestCapability) {
	        requestCapability.resolve({
	          value: undefined,
	          done: true
	        });
	      });
	      this._requests = [];
	    }
	  };
	  function PDFDataTransportStreamRangeReader(stream, begin, end) {
	    this._stream = stream;
	    this._begin = begin;
	    this._end = end;
	    this._queuedChunk = null;
	    this._requests = [];
	    this._done = false;
	    this.onProgress = null;
	  }
	  PDFDataTransportStreamRangeReader.prototype = {
	    _enqueue: function PDFDataTransportStreamRangeReader_enqueue(chunk) {
	      if (this._done) {
	        return;
	      }
	      if (this._requests.length === 0) {
	        this._queuedChunk = chunk;
	      } else {
	        var requestsCapability = this._requests.shift();
	        requestsCapability.resolve({
	          value: chunk,
	          done: false
	        });
	        this._requests.forEach(function (requestCapability) {
	          requestCapability.resolve({
	            value: undefined,
	            done: true
	          });
	        });
	        this._requests = [];
	      }
	      this._done = true;
	      this._stream._removeRangeReader(this);
	    },
	    get isStreamingSupported() {
	      return false;
	    },
	    read: function PDFDataTransportStreamRangeReader_read() {
	      if (this._queuedChunk) {
	        var chunk = this._queuedChunk;
	        this._queuedChunk = null;
	        return Promise.resolve({
	          value: chunk,
	          done: false
	        });
	      }
	      if (this._done) {
	        return Promise.resolve({
	          value: undefined,
	          done: true
	        });
	      }
	      var requestCapability = (0, _util.createPromiseCapability)();
	      this._requests.push(requestCapability);
	      return requestCapability.promise;
	    },
	    cancel: function PDFDataTransportStreamRangeReader_cancel(reason) {
	      this._done = true;
	      this._requests.forEach(function (requestCapability) {
	        requestCapability.resolve({
	          value: undefined,
	          done: true
	        });
	      });
	      this._requests = [];
	      this._stream._removeRangeReader(this);
	    }
	  };
	  return PDFDataTransportStream;
	}();
	exports.PDFDataTransportStream = PDFDataTransportStream;

	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PDFNodeStream = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _util = __w_pdfjs_require__(0);

	var _network_utils = __w_pdfjs_require__(29);

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var fs = __webpack_require__(147);
	var http = __webpack_require__(148);
	var https = __webpack_require__(149);
	var url = __webpack_require__(150);

	var PDFNodeStream = function () {
	  function PDFNodeStream(options) {
	    _classCallCheck(this, PDFNodeStream);

	    this.options = options;
	    this.source = options.source;
	    this.url = url.parse(this.source.url);
	    this.isHttp = this.url.protocol === 'http:' || this.url.protocol === 'https:';
	    this.isFsUrl = this.url.protocol === 'file:' || !this.url.host;
	    this.httpHeaders = this.isHttp && this.source.httpHeaders || {};
	    this._fullRequest = null;
	    this._rangeRequestReaders = [];
	  }

	  _createClass(PDFNodeStream, [{
	    key: 'getFullReader',
	    value: function getFullReader() {
	      (0, _util.assert)(!this._fullRequest);
	      this._fullRequest = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);
	      return this._fullRequest;
	    }
	  }, {
	    key: 'getRangeReader',
	    value: function getRangeReader(start, end) {
	      var rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);
	      this._rangeRequestReaders.push(rangeReader);
	      return rangeReader;
	    }
	  }, {
	    key: 'cancelAllRequests',
	    value: function cancelAllRequests(reason) {
	      if (this._fullRequest) {
	        this._fullRequest.cancel(reason);
	      }
	      var readers = this._rangeRequestReaders.slice(0);
	      readers.forEach(function (reader) {
	        reader.cancel(reason);
	      });
	    }
	  }]);

	  return PDFNodeStream;
	}();

	var BaseFullReader = function () {
	  function BaseFullReader(stream) {
	    _classCallCheck(this, BaseFullReader);

	    this._url = stream.url;
	    this._done = false;
	    this._errored = false;
	    this._reason = null;
	    this.onProgress = null;
	    this._contentLength = stream.source.length;
	    this._loaded = 0;
	    this._disableRange = stream.options.disableRange || false;
	    this._rangeChunkSize = stream.source.rangeChunkSize;
	    if (!this._rangeChunkSize && !this._disableRange) {
	      this._disableRange = true;
	    }
	    this._isStreamingSupported = !stream.source.disableStream;
	    this._isRangeSupported = !stream.options.disableRange;
	    this._readableStream = null;
	    this._readCapability = (0, _util.createPromiseCapability)();
	    this._headersCapability = (0, _util.createPromiseCapability)();
	  }

	  _createClass(BaseFullReader, [{
	    key: 'read',
	    value: function read() {
	      var _this = this;

	      return this._readCapability.promise.then(function () {
	        if (_this._done) {
	          return Promise.resolve({
	            value: undefined,
	            done: true
	          });
	        }
	        if (_this._errored) {
	          return Promise.reject(_this._reason);
	        }
	        var chunk = _this._readableStream.read();
	        if (chunk === null) {
	          _this._readCapability = (0, _util.createPromiseCapability)();
	          return _this.read();
	        }
	        _this._loaded += chunk.length;
	        if (_this.onProgress) {
	          _this.onProgress({
	            loaded: _this._loaded,
	            total: _this._contentLength
	          });
	        }
	        var buffer = new Uint8Array(chunk).buffer;
	        return Promise.resolve({
	          value: buffer,
	          done: false
	        });
	      });
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel(reason) {
	      if (!this._readableStream) {
	        this._error(reason);
	        return;
	      }
	      this._readableStream.destroy(reason);
	    }
	  }, {
	    key: '_error',
	    value: function _error(reason) {
	      this._errored = true;
	      this._reason = reason;
	      this._readCapability.resolve();
	    }
	  }, {
	    key: '_setReadableStream',
	    value: function _setReadableStream(readableStream) {
	      var _this2 = this;

	      this._readableStream = readableStream;
	      readableStream.on('readable', function () {
	        _this2._readCapability.resolve();
	      });
	      readableStream.on('end', function () {
	        readableStream.destroy();
	        _this2._done = true;
	        _this2._readCapability.resolve();
	      });
	      readableStream.on('error', function (reason) {
	        _this2._error(reason);
	      });
	      if (!this._isStreamingSupported && this._isRangeSupported) {
	        this._error(new _util.AbortException('streaming is disabled'));
	      }
	      if (this._errored) {
	        this._readableStream.destroy(this._reason);
	      }
	    }
	  }, {
	    key: 'headersReady',
	    get: function get() {
	      return this._headersCapability.promise;
	    }
	  }, {
	    key: 'contentLength',
	    get: function get() {
	      return this._contentLength;
	    }
	  }, {
	    key: 'isRangeSupported',
	    get: function get() {
	      return this._isRangeSupported;
	    }
	  }, {
	    key: 'isStreamingSupported',
	    get: function get() {
	      return this._isStreamingSupported;
	    }
	  }]);

	  return BaseFullReader;
	}();

	var BaseRangeReader = function () {
	  function BaseRangeReader(stream) {
	    _classCallCheck(this, BaseRangeReader);

	    this._url = stream.url;
	    this._done = false;
	    this._errored = false;
	    this._reason = null;
	    this.onProgress = null;
	    this._loaded = 0;
	    this._readableStream = null;
	    this._readCapability = (0, _util.createPromiseCapability)();
	    this._isStreamingSupported = !stream.source.disableStream;
	  }

	  _createClass(BaseRangeReader, [{
	    key: 'read',
	    value: function read() {
	      var _this3 = this;

	      return this._readCapability.promise.then(function () {
	        if (_this3._done) {
	          return Promise.resolve({
	            value: undefined,
	            done: true
	          });
	        }
	        if (_this3._errored) {
	          return Promise.reject(_this3._reason);
	        }
	        var chunk = _this3._readableStream.read();
	        if (chunk === null) {
	          _this3._readCapability = (0, _util.createPromiseCapability)();
	          return _this3.read();
	        }
	        _this3._loaded += chunk.length;
	        if (_this3.onProgress) {
	          _this3.onProgress({ loaded: _this3._loaded });
	        }
	        var buffer = new Uint8Array(chunk).buffer;
	        return Promise.resolve({
	          value: buffer,
	          done: false
	        });
	      });
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel(reason) {
	      if (!this._readableStream) {
	        this._error(reason);
	        return;
	      }
	      this._readableStream.destroy(reason);
	    }
	  }, {
	    key: '_error',
	    value: function _error(reason) {
	      this._errored = true;
	      this._reason = reason;
	      this._readCapability.resolve();
	    }
	  }, {
	    key: '_setReadableStream',
	    value: function _setReadableStream(readableStream) {
	      var _this4 = this;

	      this._readableStream = readableStream;
	      readableStream.on('readable', function () {
	        _this4._readCapability.resolve();
	      });
	      readableStream.on('end', function () {
	        readableStream.destroy();
	        _this4._done = true;
	        _this4._readCapability.resolve();
	      });
	      readableStream.on('error', function (reason) {
	        _this4._error(reason);
	      });
	      if (this._errored) {
	        this._readableStream.destroy(this._reason);
	      }
	    }
	  }, {
	    key: 'isStreamingSupported',
	    get: function get() {
	      return this._isStreamingSupported;
	    }
	  }]);

	  return BaseRangeReader;
	}();

	function createRequestOptions(url, headers) {
	  return {
	    protocol: url.protocol,
	    auth: url.auth,
	    host: url.hostname,
	    port: url.port,
	    path: url.path,
	    method: 'GET',
	    headers: headers
	  };
	}

	var PDFNodeStreamFullReader = function (_BaseFullReader) {
	  _inherits(PDFNodeStreamFullReader, _BaseFullReader);

	  function PDFNodeStreamFullReader(stream) {
	    _classCallCheck(this, PDFNodeStreamFullReader);

	    var _this5 = _possibleConstructorReturn(this, (PDFNodeStreamFullReader.__proto__ || Object.getPrototypeOf(PDFNodeStreamFullReader)).call(this, stream));

	    var handleResponse = function handleResponse(response) {
	      _this5._headersCapability.resolve();
	      _this5._setReadableStream(response);

	      var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
	        getResponseHeader: function getResponseHeader(name) {
	          return _this5._readableStream.headers[name.toLowerCase()];
	        },
	        isHttp: stream.isHttp,
	        rangeChunkSize: _this5._rangeChunkSize,
	        disableRange: _this5._disableRange
	      }),
	          allowRangeRequests = _validateRangeRequest.allowRangeRequests,
	          suggestedLength = _validateRangeRequest.suggestedLength;

	      if (allowRangeRequests) {
	        _this5._isRangeSupported = true;
	      }
	      _this5._contentLength = suggestedLength;
	    };
	    _this5._request = null;
	    if (_this5._url.protocol === 'http:') {
	      _this5._request = http.request(createRequestOptions(_this5._url, stream.httpHeaders), handleResponse);
	    } else {
	      _this5._request = https.request(createRequestOptions(_this5._url, stream.httpHeaders), handleResponse);
	    }
	    _this5._request.on('error', function (reason) {
	      _this5._errored = true;
	      _this5._reason = reason;
	      _this5._headersCapability.reject(reason);
	    });
	    _this5._request.end();
	    return _this5;
	  }

	  return PDFNodeStreamFullReader;
	}(BaseFullReader);

	var PDFNodeStreamRangeReader = function (_BaseRangeReader) {
	  _inherits(PDFNodeStreamRangeReader, _BaseRangeReader);

	  function PDFNodeStreamRangeReader(stream, start, end) {
	    _classCallCheck(this, PDFNodeStreamRangeReader);

	    var _this6 = _possibleConstructorReturn(this, (PDFNodeStreamRangeReader.__proto__ || Object.getPrototypeOf(PDFNodeStreamRangeReader)).call(this, stream));

	    _this6._httpHeaders = {};
	    for (var property in stream.httpHeaders) {
	      var value = stream.httpHeaders[property];
	      if (typeof value === 'undefined') {
	        continue;
	      }
	      _this6._httpHeaders[property] = value;
	    }
	    _this6._httpHeaders['Range'] = 'bytes=' + start + '-' + (end - 1);
	    _this6._request = null;
	    if (_this6._url.protocol === 'http:') {
	      _this6._request = http.request(createRequestOptions(_this6._url, _this6._httpHeaders), function (response) {
	        _this6._setReadableStream(response);
	      });
	    } else {
	      _this6._request = https.request(createRequestOptions(_this6._url, _this6._httpHeaders), function (response) {
	        _this6._setReadableStream(response);
	      });
	    }
	    _this6._request.on('error', function (reason) {
	      _this6._errored = true;
	      _this6._reason = reason;
	    });
	    _this6._request.end();
	    return _this6;
	  }

	  return PDFNodeStreamRangeReader;
	}(BaseRangeReader);

	var PDFNodeStreamFsFullReader = function (_BaseFullReader2) {
	  _inherits(PDFNodeStreamFsFullReader, _BaseFullReader2);

	  function PDFNodeStreamFsFullReader(stream) {
	    _classCallCheck(this, PDFNodeStreamFsFullReader);

	    var _this7 = _possibleConstructorReturn(this, (PDFNodeStreamFsFullReader.__proto__ || Object.getPrototypeOf(PDFNodeStreamFsFullReader)).call(this, stream));

	    var path = decodeURI(_this7._url.path);
	    fs.lstat(path, function (error, stat) {
	      if (error) {
	        _this7._errored = true;
	        _this7._reason = error;
	        _this7._headersCapability.reject(error);
	        return;
	      }
	      _this7._contentLength = stat.size;
	      _this7._setReadableStream(fs.createReadStream(path));
	      _this7._headersCapability.resolve();
	    });
	    return _this7;
	  }

	  return PDFNodeStreamFsFullReader;
	}(BaseFullReader);

	var PDFNodeStreamFsRangeReader = function (_BaseRangeReader2) {
	  _inherits(PDFNodeStreamFsRangeReader, _BaseRangeReader2);

	  function PDFNodeStreamFsRangeReader(stream, start, end) {
	    _classCallCheck(this, PDFNodeStreamFsRangeReader);

	    var _this8 = _possibleConstructorReturn(this, (PDFNodeStreamFsRangeReader.__proto__ || Object.getPrototypeOf(PDFNodeStreamFsRangeReader)).call(this, stream));

	    _this8._setReadableStream(fs.createReadStream(decodeURI(_this8._url.path), {
	      start: start,
	      end: end - 1
	    }));
	    return _this8;
	  }

	  return PDFNodeStreamFsRangeReader;
	}(BaseRangeReader);

	exports.PDFNodeStream = PDFNodeStream;

	/***/ }),
	/* 88 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PDFFetchStream = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _util = __w_pdfjs_require__(0);

	var _network_utils = __w_pdfjs_require__(29);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function createFetchOptions(headers, withCredentials) {
	  return {
	    method: 'GET',
	    headers: headers,
	    mode: 'cors',
	    credentials: withCredentials ? 'include' : 'same-origin',
	    redirect: 'follow'
	  };
	}

	var PDFFetchStream = function () {
	  function PDFFetchStream(options) {
	    _classCallCheck(this, PDFFetchStream);

	    this.options = options;
	    this.source = options.source;
	    this.isHttp = /^https?:/i.test(this.source.url);
	    this.httpHeaders = this.isHttp && this.source.httpHeaders || {};
	    this._fullRequestReader = null;
	    this._rangeRequestReaders = [];
	  }

	  _createClass(PDFFetchStream, [{
	    key: 'getFullReader',
	    value: function getFullReader() {
	      (0, _util.assert)(!this._fullRequestReader);
	      this._fullRequestReader = new PDFFetchStreamReader(this);
	      return this._fullRequestReader;
	    }
	  }, {
	    key: 'getRangeReader',
	    value: function getRangeReader(begin, end) {
	      var reader = new PDFFetchStreamRangeReader(this, begin, end);
	      this._rangeRequestReaders.push(reader);
	      return reader;
	    }
	  }, {
	    key: 'cancelAllRequests',
	    value: function cancelAllRequests(reason) {
	      if (this._fullRequestReader) {
	        this._fullRequestReader.cancel(reason);
	      }
	      var readers = this._rangeRequestReaders.slice(0);
	      readers.forEach(function (reader) {
	        reader.cancel(reason);
	      });
	    }
	  }]);

	  return PDFFetchStream;
	}();

	var PDFFetchStreamReader = function () {
	  function PDFFetchStreamReader(stream) {
	    var _this = this;

	    _classCallCheck(this, PDFFetchStreamReader);

	    this._stream = stream;
	    this._reader = null;
	    this._loaded = 0;
	    this._withCredentials = stream.source.withCredentials;
	    this._contentLength = this._stream.source.length;
	    this._headersCapability = (0, _util.createPromiseCapability)();
	    this._disableRange = this._stream.options.disableRange;
	    this._rangeChunkSize = this._stream.source.rangeChunkSize;
	    if (!this._rangeChunkSize && !this._disableRange) {
	      this._disableRange = true;
	    }
	    this._isRangeSupported = !this._stream.options.disableRange;
	    this._isStreamingSupported = !this._stream.source.disableStream;
	    this._headers = new Headers();
	    for (var property in this._stream.httpHeaders) {
	      var value = this._stream.httpHeaders[property];
	      if (typeof value === 'undefined') {
	        continue;
	      }
	      this._headers.append(property, value);
	    }
	    var url = this._stream.source.url;
	    fetch(url, createFetchOptions(this._headers, this._withCredentials)).then(function (response) {
	      if (!(0, _network_utils.validateResponseStatus)(response.status)) {
	        throw (0, _network_utils.createResponseStatusError)(response.status, url);
	      }
	      _this._reader = response.body.getReader();
	      _this._headersCapability.resolve();

	      var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
	        getResponseHeader: function getResponseHeader(name) {
	          return response.headers.get(name);
	        },
	        isHttp: _this._stream.isHttp,
	        rangeChunkSize: _this._rangeChunkSize,
	        disableRange: _this._disableRange
	      }),
	          allowRangeRequests = _validateRangeRequest.allowRangeRequests,
	          suggestedLength = _validateRangeRequest.suggestedLength;

	      _this._contentLength = suggestedLength;
	      _this._isRangeSupported = allowRangeRequests;
	      if (!_this._isStreamingSupported && _this._isRangeSupported) {
	        _this.cancel(new _util.AbortException('streaming is disabled'));
	      }
	    }).catch(this._headersCapability.reject);
	    this.onProgress = null;
	  }

	  _createClass(PDFFetchStreamReader, [{
	    key: 'read',
	    value: function read() {
	      var _this2 = this;

	      return this._headersCapability.promise.then(function () {
	        return _this2._reader.read().then(function (_ref) {
	          var value = _ref.value,
	              done = _ref.done;

	          if (done) {
	            return Promise.resolve({
	              value: value,
	              done: done
	            });
	          }
	          _this2._loaded += value.byteLength;
	          if (_this2.onProgress) {
	            _this2.onProgress({
	              loaded: _this2._loaded,
	              total: _this2._contentLength
	            });
	          }
	          var buffer = new Uint8Array(value).buffer;
	          return Promise.resolve({
	            value: buffer,
	            done: false
	          });
	        });
	      });
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel(reason) {
	      if (this._reader) {
	        this._reader.cancel(reason);
	      }
	    }
	  }, {
	    key: 'headersReady',
	    get: function get() {
	      return this._headersCapability.promise;
	    }
	  }, {
	    key: 'contentLength',
	    get: function get() {
	      return this._contentLength;
	    }
	  }, {
	    key: 'isRangeSupported',
	    get: function get() {
	      return this._isRangeSupported;
	    }
	  }, {
	    key: 'isStreamingSupported',
	    get: function get() {
	      return this._isStreamingSupported;
	    }
	  }]);

	  return PDFFetchStreamReader;
	}();

	var PDFFetchStreamRangeReader = function () {
	  function PDFFetchStreamRangeReader(stream, begin, end) {
	    var _this3 = this;

	    _classCallCheck(this, PDFFetchStreamRangeReader);

	    this._stream = stream;
	    this._reader = null;
	    this._loaded = 0;
	    this._withCredentials = stream.source.withCredentials;
	    this._readCapability = (0, _util.createPromiseCapability)();
	    this._isStreamingSupported = !stream.source.disableStream;
	    this._headers = new Headers();
	    for (var property in this._stream.httpHeaders) {
	      var value = this._stream.httpHeaders[property];
	      if (typeof value === 'undefined') {
	        continue;
	      }
	      this._headers.append(property, value);
	    }
	    var rangeStr = begin + '-' + (end - 1);
	    this._headers.append('Range', 'bytes=' + rangeStr);
	    var url = this._stream.source.url;
	    fetch(url, createFetchOptions(this._headers, this._withCredentials)).then(function (response) {
	      if (!(0, _network_utils.validateResponseStatus)(response.status)) {
	        throw (0, _network_utils.createResponseStatusError)(response.status, url);
	      }
	      _this3._readCapability.resolve();
	      _this3._reader = response.body.getReader();
	    });
	    this.onProgress = null;
	  }

	  _createClass(PDFFetchStreamRangeReader, [{
	    key: 'read',
	    value: function read() {
	      var _this4 = this;

	      return this._readCapability.promise.then(function () {
	        return _this4._reader.read().then(function (_ref2) {
	          var value = _ref2.value,
	              done = _ref2.done;

	          if (done) {
	            return Promise.resolve({
	              value: value,
	              done: done
	            });
	          }
	          _this4._loaded += value.byteLength;
	          if (_this4.onProgress) {
	            _this4.onProgress({ loaded: _this4._loaded });
	          }
	          var buffer = new Uint8Array(value).buffer;
	          return Promise.resolve({
	            value: buffer,
	            done: false
	          });
	        });
	      });
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel(reason) {
	      if (this._reader) {
	        this._reader.cancel(reason);
	      }
	    }
	  }, {
	    key: 'isStreamingSupported',
	    get: function get() {
	      return this._isStreamingSupported;
	    }
	  }]);

	  return PDFFetchStreamRangeReader;
	}();

	exports.PDFFetchStream = PDFFetchStream;

	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.NetworkManager = exports.PDFNetworkStream = undefined;

	var _util = __w_pdfjs_require__(0);

	var _network_utils = __w_pdfjs_require__(29);

	var _global_scope = __w_pdfjs_require__(9);

	var _global_scope2 = _interopRequireDefault(_global_scope);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	;
	var OK_RESPONSE = 200;
	var PARTIAL_CONTENT_RESPONSE = 206;
	function NetworkManager(url, args) {
	  this.url = url;
	  args = args || {};
	  this.isHttp = /^https?:/i.test(url);
	  this.httpHeaders = this.isHttp && args.httpHeaders || {};
	  this.withCredentials = args.withCredentials || false;
	  this.getXhr = args.getXhr || function NetworkManager_getXhr() {
	    return new XMLHttpRequest();
	  };
	  this.currXhrId = 0;
	  this.pendingRequests = Object.create(null);
	  this.loadedRequests = Object.create(null);
	}
	function getArrayBuffer(xhr) {
	  var data = xhr.response;
	  if (typeof data !== 'string') {
	    return data;
	  }
	  var length = data.length;
	  var array = new Uint8Array(length);
	  for (var i = 0; i < length; i++) {
	    array[i] = data.charCodeAt(i) & 0xFF;
	  }
	  return array.buffer;
	}
	var supportsMozChunked = function supportsMozChunkedClosure() {
	  try {
	    var x = new XMLHttpRequest();
	    x.open('GET', _global_scope2.default.location.href);
	    x.responseType = 'moz-chunked-arraybuffer';
	    return x.responseType === 'moz-chunked-arraybuffer';
	  } catch (e) {
	    return false;
	  }
	}();
	NetworkManager.prototype = {
	  requestRange: function NetworkManager_requestRange(begin, end, listeners) {
	    var args = {
	      begin: begin,
	      end: end
	    };
	    for (var prop in listeners) {
	      args[prop] = listeners[prop];
	    }
	    return this.request(args);
	  },
	  requestFull: function NetworkManager_requestFull(listeners) {
	    return this.request(listeners);
	  },
	  request: function NetworkManager_request(args) {
	    var xhr = this.getXhr();
	    var xhrId = this.currXhrId++;
	    var pendingRequest = this.pendingRequests[xhrId] = { xhr: xhr };
	    xhr.open('GET', this.url);
	    xhr.withCredentials = this.withCredentials;
	    for (var property in this.httpHeaders) {
	      var value = this.httpHeaders[property];
	      if (typeof value === 'undefined') {
	        continue;
	      }
	      xhr.setRequestHeader(property, value);
	    }
	    if (this.isHttp && 'begin' in args && 'end' in args) {
	      var rangeStr = args.begin + '-' + (args.end - 1);
	      xhr.setRequestHeader('Range', 'bytes=' + rangeStr);
	      pendingRequest.expectedStatus = 206;
	    } else {
	      pendingRequest.expectedStatus = 200;
	    }
	    var useMozChunkedLoading = supportsMozChunked && !!args.onProgressiveData;
	    if (useMozChunkedLoading) {
	      xhr.responseType = 'moz-chunked-arraybuffer';
	      pendingRequest.onProgressiveData = args.onProgressiveData;
	      pendingRequest.mozChunked = true;
	    } else {
	      xhr.responseType = 'arraybuffer';
	    }
	    if (args.onError) {
	      xhr.onerror = function (evt) {
	        args.onError(xhr.status);
	      };
	    }
	    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
	    xhr.onprogress = this.onProgress.bind(this, xhrId);
	    pendingRequest.onHeadersReceived = args.onHeadersReceived;
	    pendingRequest.onDone = args.onDone;
	    pendingRequest.onError = args.onError;
	    pendingRequest.onProgress = args.onProgress;
	    xhr.send(null);
	    return xhrId;
	  },
	  onProgress: function NetworkManager_onProgress(xhrId, evt) {
	    var pendingRequest = this.pendingRequests[xhrId];
	    if (!pendingRequest) {
	      return;
	    }
	    if (pendingRequest.mozChunked) {
	      var chunk = getArrayBuffer(pendingRequest.xhr);
	      pendingRequest.onProgressiveData(chunk);
	    }
	    var onProgress = pendingRequest.onProgress;
	    if (onProgress) {
	      onProgress(evt);
	    }
	  },
	  onStateChange: function NetworkManager_onStateChange(xhrId, evt) {
	    var pendingRequest = this.pendingRequests[xhrId];
	    if (!pendingRequest) {
	      return;
	    }
	    var xhr = pendingRequest.xhr;
	    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
	      pendingRequest.onHeadersReceived();
	      delete pendingRequest.onHeadersReceived;
	    }
	    if (xhr.readyState !== 4) {
	      return;
	    }
	    if (!(xhrId in this.pendingRequests)) {
	      return;
	    }
	    delete this.pendingRequests[xhrId];
	    if (xhr.status === 0 && this.isHttp) {
	      if (pendingRequest.onError) {
	        pendingRequest.onError(xhr.status);
	      }
	      return;
	    }
	    var xhrStatus = xhr.status || OK_RESPONSE;
	    var ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;
	    if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
	      if (pendingRequest.onError) {
	        pendingRequest.onError(xhr.status);
	      }
	      return;
	    }
	    this.loadedRequests[xhrId] = true;
	    var chunk = getArrayBuffer(xhr);
	    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
	      var rangeHeader = xhr.getResponseHeader('Content-Range');
	      var matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
	      var begin = parseInt(matches[1], 10);
	      pendingRequest.onDone({
	        begin: begin,
	        chunk: chunk
	      });
	    } else if (pendingRequest.onProgressiveData) {
	      pendingRequest.onDone(null);
	    } else if (chunk) {
	      pendingRequest.onDone({
	        begin: 0,
	        chunk: chunk
	      });
	    } else if (pendingRequest.onError) {
	      pendingRequest.onError(xhr.status);
	    }
	  },
	  hasPendingRequests: function NetworkManager_hasPendingRequests() {
	    for (var xhrId in this.pendingRequests) {
	      return true;
	    }
	    return false;
	  },
	  getRequestXhr: function NetworkManager_getXhr(xhrId) {
	    return this.pendingRequests[xhrId].xhr;
	  },
	  isStreamingRequest: function NetworkManager_isStreamingRequest(xhrId) {
	    return !!this.pendingRequests[xhrId].onProgressiveData;
	  },
	  isPendingRequest: function NetworkManager_isPendingRequest(xhrId) {
	    return xhrId in this.pendingRequests;
	  },
	  isLoadedRequest: function NetworkManager_isLoadedRequest(xhrId) {
	    return xhrId in this.loadedRequests;
	  },
	  abortAllRequests: function NetworkManager_abortAllRequests() {
	    for (var xhrId in this.pendingRequests) {
	      this.abortRequest(xhrId | 0);
	    }
	  },
	  abortRequest: function NetworkManager_abortRequest(xhrId) {
	    var xhr = this.pendingRequests[xhrId].xhr;
	    delete this.pendingRequests[xhrId];
	    xhr.abort();
	  }
	};
	function PDFNetworkStream(options) {
	  this._options = options;
	  var source = options.source;
	  this._manager = new NetworkManager(source.url, {
	    httpHeaders: source.httpHeaders,
	    withCredentials: source.withCredentials
	  });
	  this._rangeChunkSize = source.rangeChunkSize;
	  this._fullRequestReader = null;
	  this._rangeRequestReaders = [];
	}
	PDFNetworkStream.prototype = {
	  _onRangeRequestReaderClosed: function PDFNetworkStream_onRangeRequestReaderClosed(reader) {
	    var i = this._rangeRequestReaders.indexOf(reader);
	    if (i >= 0) {
	      this._rangeRequestReaders.splice(i, 1);
	    }
	  },
	  getFullReader: function PDFNetworkStream_getFullReader() {
	    (0, _util.assert)(!this._fullRequestReader);
	    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._options);
	    return this._fullRequestReader;
	  },
	  getRangeReader: function PDFNetworkStream_getRangeReader(begin, end) {
	    var reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
	    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);
	    this._rangeRequestReaders.push(reader);
	    return reader;
	  },
	  cancelAllRequests: function PDFNetworkStream_cancelAllRequests(reason) {
	    if (this._fullRequestReader) {
	      this._fullRequestReader.cancel(reason);
	    }
	    var readers = this._rangeRequestReaders.slice(0);
	    readers.forEach(function (reader) {
	      reader.cancel(reason);
	    });
	  }
	};
	function PDFNetworkStreamFullRequestReader(manager, options) {
	  this._manager = manager;
	  var source = options.source;
	  var args = {
	    onHeadersReceived: this._onHeadersReceived.bind(this),
	    onProgressiveData: source.disableStream ? null : this._onProgressiveData.bind(this),
	    onDone: this._onDone.bind(this),
	    onError: this._onError.bind(this),
	    onProgress: this._onProgress.bind(this)
	  };
	  this._url = source.url;
	  this._fullRequestId = manager.requestFull(args);
	  this._headersReceivedCapability = (0, _util.createPromiseCapability)();
	  this._disableRange = options.disableRange || false;
	  this._contentLength = source.length;
	  this._rangeChunkSize = source.rangeChunkSize;
	  if (!this._rangeChunkSize && !this._disableRange) {
	    this._disableRange = true;
	  }
	  this._isStreamingSupported = false;
	  this._isRangeSupported = false;
	  this._cachedChunks = [];
	  this._requests = [];
	  this._done = false;
	  this._storedError = undefined;
	  this.onProgress = null;
	}
	PDFNetworkStreamFullRequestReader.prototype = {
	  _onHeadersReceived: function PDFNetworkStreamFullRequestReader_onHeadersReceived() {
	    var fullRequestXhrId = this._fullRequestId;
	    var fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);

	    var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
	      getResponseHeader: function getResponseHeader(name) {
	        return fullRequestXhr.getResponseHeader(name);
	      },
	      isHttp: this._manager.isHttp,
	      rangeChunkSize: this._rangeChunkSize,
	      disableRange: this._disableRange
	    }),
	        allowRangeRequests = _validateRangeRequest.allowRangeRequests,
	        suggestedLength = _validateRangeRequest.suggestedLength;

	    this._contentLength = suggestedLength || this._contentLength;
	    if (allowRangeRequests) {
	      this._isRangeSupported = true;
	    }
	    var networkManager = this._manager;
	    if (networkManager.isStreamingRequest(fullRequestXhrId)) {
	      this._isStreamingSupported = true;
	    } else if (this._isRangeSupported) {
	      networkManager.abortRequest(fullRequestXhrId);
	    }
	    this._headersReceivedCapability.resolve();
	  },
	  _onProgressiveData: function PDFNetworkStreamFullRequestReader_onProgressiveData(chunk) {
	    if (this._requests.length > 0) {
	      var requestCapability = this._requests.shift();
	      requestCapability.resolve({
	        value: chunk,
	        done: false
	      });
	    } else {
	      this._cachedChunks.push(chunk);
	    }
	  },
	  _onDone: function PDFNetworkStreamFullRequestReader_onDone(args) {
	    if (args) {
	      this._onProgressiveData(args.chunk);
	    }
	    this._done = true;
	    if (this._cachedChunks.length > 0) {
	      return;
	    }
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.resolve({
	        value: undefined,
	        done: true
	      });
	    });
	    this._requests = [];
	  },
	  _onError: function PDFNetworkStreamFullRequestReader_onError(status) {
	    var url = this._url;
	    var exception = (0, _network_utils.createResponseStatusError)(status, url);
	    this._storedError = exception;
	    this._headersReceivedCapability.reject(exception);
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.reject(exception);
	    });
	    this._requests = [];
	    this._cachedChunks = [];
	  },
	  _onProgress: function PDFNetworkStreamFullRequestReader_onProgress(data) {
	    if (this.onProgress) {
	      this.onProgress({
	        loaded: data.loaded,
	        total: data.lengthComputable ? data.total : this._contentLength
	      });
	    }
	  },
	  get isRangeSupported() {
	    return this._isRangeSupported;
	  },
	  get isStreamingSupported() {
	    return this._isStreamingSupported;
	  },
	  get contentLength() {
	    return this._contentLength;
	  },
	  get headersReady() {
	    return this._headersReceivedCapability.promise;
	  },
	  read: function PDFNetworkStreamFullRequestReader_read() {
	    if (this._storedError) {
	      return Promise.reject(this._storedError);
	    }
	    if (this._cachedChunks.length > 0) {
	      var chunk = this._cachedChunks.shift();
	      return Promise.resolve({
	        value: chunk,
	        done: false
	      });
	    }
	    if (this._done) {
	      return Promise.resolve({
	        value: undefined,
	        done: true
	      });
	    }
	    var requestCapability = (0, _util.createPromiseCapability)();
	    this._requests.push(requestCapability);
	    return requestCapability.promise;
	  },
	  cancel: function PDFNetworkStreamFullRequestReader_cancel(reason) {
	    this._done = true;
	    this._headersReceivedCapability.reject(reason);
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.resolve({
	        value: undefined,
	        done: true
	      });
	    });
	    this._requests = [];
	    if (this._manager.isPendingRequest(this._fullRequestId)) {
	      this._manager.abortRequest(this._fullRequestId);
	    }
	    this._fullRequestReader = null;
	  }
	};
	function PDFNetworkStreamRangeRequestReader(manager, begin, end) {
	  this._manager = manager;
	  var args = {
	    onDone: this._onDone.bind(this),
	    onProgress: this._onProgress.bind(this)
	  };
	  this._requestId = manager.requestRange(begin, end, args);
	  this._requests = [];
	  this._queuedChunk = null;
	  this._done = false;
	  this.onProgress = null;
	  this.onClosed = null;
	}
	PDFNetworkStreamRangeRequestReader.prototype = {
	  _close: function PDFNetworkStreamRangeRequestReader_close() {
	    if (this.onClosed) {
	      this.onClosed(this);
	    }
	  },
	  _onDone: function PDFNetworkStreamRangeRequestReader_onDone(data) {
	    var chunk = data.chunk;
	    if (this._requests.length > 0) {
	      var requestCapability = this._requests.shift();
	      requestCapability.resolve({
	        value: chunk,
	        done: false
	      });
	    } else {
	      this._queuedChunk = chunk;
	    }
	    this._done = true;
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.resolve({
	        value: undefined,
	        done: true
	      });
	    });
	    this._requests = [];
	    this._close();
	  },
	  _onProgress: function PDFNetworkStreamRangeRequestReader_onProgress(evt) {
	    if (!this.isStreamingSupported && this.onProgress) {
	      this.onProgress({ loaded: evt.loaded });
	    }
	  },
	  get isStreamingSupported() {
	    return false;
	  },
	  read: function PDFNetworkStreamRangeRequestReader_read() {
	    if (this._queuedChunk !== null) {
	      var chunk = this._queuedChunk;
	      this._queuedChunk = null;
	      return Promise.resolve({
	        value: chunk,
	        done: false
	      });
	    }
	    if (this._done) {
	      return Promise.resolve({
	        value: undefined,
	        done: true
	      });
	    }
	    var requestCapability = (0, _util.createPromiseCapability)();
	    this._requests.push(requestCapability);
	    return requestCapability.promise;
	  },
	  cancel: function PDFNetworkStreamRangeRequestReader_cancel(reason) {
	    this._done = true;
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.resolve({
	        value: undefined,
	        done: true
	      });
	    });
	    this._requests = [];
	    if (this._manager.isPendingRequest(this._requestId)) {
	      this._manager.abortRequest(this._requestId);
	    }
	    this._close();
	  }
	};
	exports.PDFNetworkStream = PDFNetworkStream;
	exports.NetworkManager = NetworkManager;

	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=pdf.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(105), (function() { return this; }()), __webpack_require__(106).Buffer))

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(107)
	var ieee754 = __webpack_require__(108)
	var isArray = __webpack_require__(109)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 107 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return (b64.length * 3 / 4) - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr((len * 3 / 4) - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0; i < l; i += 4) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ }),
/* 108 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 109 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Transform = __webpack_require__(111);

	var binding = __webpack_require__(131);
	var util = __webpack_require__(143);
	var assert = __webpack_require__(146).ok;

	// zlib doesn't provide these, so kludge them in following the same
	// const naming scheme zlib uses.
	binding.Z_MIN_WINDOWBITS = 8;
	binding.Z_MAX_WINDOWBITS = 15;
	binding.Z_DEFAULT_WINDOWBITS = 15;

	// fewer than 64 bytes per chunk is stupid.
	// technically it could work with as few as 8, but even 64 bytes
	// is absurdly low.  Usually a MB or more is best.
	binding.Z_MIN_CHUNK = 64;
	binding.Z_MAX_CHUNK = Infinity;
	binding.Z_DEFAULT_CHUNK = (16 * 1024);

	binding.Z_MIN_MEMLEVEL = 1;
	binding.Z_MAX_MEMLEVEL = 9;
	binding.Z_DEFAULT_MEMLEVEL = 8;

	binding.Z_MIN_LEVEL = -1;
	binding.Z_MAX_LEVEL = 9;
	binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

	// expose all the zlib constants
	Object.keys(binding).forEach(function(k) {
	  if (k.match(/^Z/)) exports[k] = binding[k];
	});

	// translation table for return codes.
	exports.codes = {
	  Z_OK: binding.Z_OK,
	  Z_STREAM_END: binding.Z_STREAM_END,
	  Z_NEED_DICT: binding.Z_NEED_DICT,
	  Z_ERRNO: binding.Z_ERRNO,
	  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
	};

	Object.keys(exports.codes).forEach(function(k) {
	  exports.codes[exports.codes[k]] = k;
	});

	exports.Deflate = Deflate;
	exports.Inflate = Inflate;
	exports.Gzip = Gzip;
	exports.Gunzip = Gunzip;
	exports.DeflateRaw = DeflateRaw;
	exports.InflateRaw = InflateRaw;
	exports.Unzip = Unzip;

	exports.createDeflate = function(o) {
	  return new Deflate(o);
	};

	exports.createInflate = function(o) {
	  return new Inflate(o);
	};

	exports.createDeflateRaw = function(o) {
	  return new DeflateRaw(o);
	};

	exports.createInflateRaw = function(o) {
	  return new InflateRaw(o);
	};

	exports.createGzip = function(o) {
	  return new Gzip(o);
	};

	exports.createGunzip = function(o) {
	  return new Gunzip(o);
	};

	exports.createUnzip = function(o) {
	  return new Unzip(o);
	};


	// Convenience methods.
	// compress/decompress a string or buffer in one step.
	exports.deflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	};

	exports.deflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	};

	exports.gzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	};

	exports.gzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	};

	exports.deflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	};

	exports.deflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	};

	exports.unzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	};

	exports.unzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	};

	exports.inflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	};

	exports.inflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	};

	exports.gunzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	};

	exports.gunzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	};

	exports.inflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	};

	exports.inflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	};

	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;

	  engine.on('error', onError);
	  engine.on('end', onEnd);

	  engine.end(buffer);
	  flow();

	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }

	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }

	  function onEnd() {
	    var buf = Buffer.concat(buffers, nread);
	    buffers = [];
	    callback(null, buf);
	    engine.close();
	  }
	}

	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string')
	    buffer = new Buffer(buffer);
	  if (!Buffer.isBuffer(buffer))
	    throw new TypeError('Not a string or buffer');

	  var flushFlag = binding.Z_FINISH;

	  return engine._processChunk(buffer, flushFlag);
	}

	// generic zlib
	// minimal 2-byte header
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib.call(this, opts, binding.DEFLATE);
	}

	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib.call(this, opts, binding.INFLATE);
	}



	// gzip - bigger header, same deflate compression
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib.call(this, opts, binding.GZIP);
	}

	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib.call(this, opts, binding.GUNZIP);
	}



	// raw - no header
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib.call(this, opts, binding.DEFLATERAW);
	}

	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib.call(this, opts, binding.INFLATERAW);
	}


	// auto-detect header.
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib.call(this, opts, binding.UNZIP);
	}


	// the Zlib class they all inherit from
	// This thing manages the queue of requests, and returns
	// true or false if there is anything in the queue when
	// you call the .write() method.

	function Zlib(opts, mode) {
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

	  Transform.call(this, opts);

	  if (opts.flush) {
	    if (opts.flush !== binding.Z_NO_FLUSH &&
	        opts.flush !== binding.Z_PARTIAL_FLUSH &&
	        opts.flush !== binding.Z_SYNC_FLUSH &&
	        opts.flush !== binding.Z_FULL_FLUSH &&
	        opts.flush !== binding.Z_FINISH &&
	        opts.flush !== binding.Z_BLOCK) {
	      throw new Error('Invalid flush flag: ' + opts.flush);
	    }
	  }
	  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

	  if (opts.chunkSize) {
	    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
	        opts.chunkSize > exports.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }

	  if (opts.windowBits) {
	    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
	        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }

	  if (opts.level) {
	    if (opts.level < exports.Z_MIN_LEVEL ||
	        opts.level > exports.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }

	  if (opts.memLevel) {
	    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
	        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }

	  if (opts.strategy) {
	    if (opts.strategy != exports.Z_FILTERED &&
	        opts.strategy != exports.Z_HUFFMAN_ONLY &&
	        opts.strategy != exports.Z_RLE &&
	        opts.strategy != exports.Z_FIXED &&
	        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }

	  if (opts.dictionary) {
	    if (!Buffer.isBuffer(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }

	  this._binding = new binding.Zlib(mode);

	  var self = this;
	  this._hadError = false;
	  this._binding.onerror = function(message, errno) {
	    // there is no way to cleanly recover.
	    // continuing only obscures problems.
	    self._binding = null;
	    self._hadError = true;

	    var error = new Error(message);
	    error.errno = errno;
	    error.code = exports.codes[errno];
	    self.emit('error', error);
	  };

	  var level = exports.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;

	  var strategy = exports.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;

	  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
	                     level,
	                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
	                     strategy,
	                     opts.dictionary);

	  this._buffer = new Buffer(this._chunkSize);
	  this._offset = 0;
	  this._closed = false;
	  this._level = level;
	  this._strategy = strategy;

	  this.once('end', this.close);
	}

	util.inherits(Zlib, Transform);

	Zlib.prototype.params = function(level, strategy, callback) {
	  if (level < exports.Z_MIN_LEVEL ||
	      level > exports.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != exports.Z_FILTERED &&
	      strategy != exports.Z_HUFFMAN_ONLY &&
	      strategy != exports.Z_RLE &&
	      strategy != exports.Z_FIXED &&
	      strategy != exports.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }

	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding.Z_SYNC_FLUSH, function() {
	      self._binding.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    process.nextTick(callback);
	  }
	};

	Zlib.prototype.reset = function() {
	  return this._binding.reset();
	};

	// This is the _flush function called by the transform class,
	// internally, when the last chunk has been written.
	Zlib.prototype._flush = function(callback) {
	  this._transform(new Buffer(0), '', callback);
	};

	Zlib.prototype.flush = function(kind, callback) {
	  var ws = this._writableState;

	  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
	    callback = kind;
	    kind = binding.Z_FULL_FLUSH;
	  }

	  if (ws.ended) {
	    if (callback)
	      process.nextTick(callback);
	  } else if (ws.ending) {
	    if (callback)
	      this.once('end', callback);
	  } else if (ws.needDrain) {
	    var self = this;
	    this.once('drain', function() {
	      self.flush(callback);
	    });
	  } else {
	    this._flushFlag = kind;
	    this.write(new Buffer(0), '', callback);
	  }
	};

	Zlib.prototype.close = function(callback) {
	  if (callback)
	    process.nextTick(callback);

	  if (this._closed)
	    return;

	  this._closed = true;

	  this._binding.close();

	  var self = this;
	  process.nextTick(function() {
	    self.emit('close');
	  });
	};

	Zlib.prototype._transform = function(chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);

	  if (!chunk === null && !Buffer.isBuffer(chunk))
	    return cb(new Error('invalid input'));

	  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	  // If it's explicitly flushing at some other time, then we use
	  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	  // goodness.
	  if (last)
	    flushFlag = binding.Z_FINISH;
	  else {
	    flushFlag = this._flushFlag;
	    // once we've flushed the last of the queue, stop flushing and
	    // go back to the normal behavior.
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
	    }
	  }

	  var self = this;
	  this._processChunk(chunk, flushFlag, cb);
	};

	Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;

	  var self = this;

	  var async = typeof cb === 'function';

	  if (!async) {
	    var buffers = [];
	    var nread = 0;

	    var error;
	    this.on('error', function(er) {
	      error = er;
	    });

	    do {
	      var res = this._binding.writeSync(flushFlag,
	                                        chunk, // in
	                                        inOff, // in_off
	                                        availInBefore, // in_len
	                                        this._buffer, // out
	                                        this._offset, //out_off
	                                        availOutBefore); // out_len
	    } while (!this._hadError && callback(res[0], res[1]));

	    if (this._hadError) {
	      throw error;
	    }

	    var buf = Buffer.concat(buffers, nread);
	    this.close();

	    return buf;
	  }

	  var req = this._binding.write(flushFlag,
	                                chunk, // in
	                                inOff, // in_off
	                                availInBefore, // in_len
	                                this._buffer, // out
	                                this._offset, //out_off
	                                availOutBefore); // out_len

	  req.buffer = chunk;
	  req.callback = callback;

	  function callback(availInAfter, availOutAfter) {
	    if (self._hadError)
	      return;

	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');

	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      // serve some output to the consumer.
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }

	    // exhausted the output buffer, or used all the input create a new one.
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = new Buffer(self._chunkSize);
	    }

	    if (availOutAfter === 0) {
	      // Not actually done.  Need to reprocess.
	      // Also, update the availInBefore to the availInAfter value,
	      // so that if we have to hit it a third (fourth, etc.) time,
	      // it'll have the correct byte counts.
	      inOff += (availInBefore - availInAfter);
	      availInBefore = availInAfter;

	      if (!async)
	        return true;

	      var newReq = self._binding.write(flushFlag,
	                                       chunk,
	                                       inOff,
	                                       availInBefore,
	                                       self._buffer,
	                                       self._offset,
	                                       self._chunkSize);
	      newReq.callback = callback; // this same function
	      newReq.buffer = chunk;
	      return;
	    }

	    if (!async)
	      return false;

	    // finished with the chunk.
	    cb();
	  }
	};

	util.inherits(Deflate, Zlib);
	util.inherits(Inflate, Zlib);
	util.inherits(Gzip, Zlib);
	util.inherits(Gunzip, Zlib);
	util.inherits(DeflateRaw, Zlib);
	util.inherits(InflateRaw, Zlib);
	util.inherits(Unzip, Zlib);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(106).Buffer, __webpack_require__(105)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(112).Transform


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(113);
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(124);
	exports.Duplex = __webpack_require__(123);
	exports.Transform = __webpack_require__(129);
	exports.PassThrough = __webpack_require__(130);


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	/*<replacement>*/

	var processNextTick = __webpack_require__(114);
	/*</replacement>*/

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(109);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(115).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = __webpack_require__(116);
	/*</replacement>*/

	// TODO(bmeurer): Change this back to const once hole checks are
	// properly optimized away early in Ignition+TurboFan.
	/*<replacement>*/
	var Buffer = __webpack_require__(117).Buffer;
	var OurUint8Array = global.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(118);
	util.inherits = __webpack_require__(119);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(120);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(121);
	var destroyImpl = __webpack_require__(122);
	var StringDecoder;

	util.inherits(Readable, Stream);

	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(123);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(128).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(123);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;

	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }

	  Stream.call(this);
	}

	Object.defineProperty(Readable.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	  }
	});

	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  this.push(null);
	  cb(err);
	};

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;

	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }

	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};

	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      stream.emit('error', er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }

	      if (addToFront) {
	        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        stream.emit('error', new Error('stream.push() after EOF'));
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	    }
	  }

	  return needMoreData(state);
	}

	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    stream.emit('data', chunk);
	    stream.read(0);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}

	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(128).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = { hasUnpiped: false };

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, unpipeInfo);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this, unpipeInfo);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
	  }

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(105)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(105)))

/***/ }),
/* 115 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(115).EventEmitter;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable node/no-deprecated-api */
	var buffer = __webpack_require__(106)
	var Buffer = buffer.Buffer

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding)
	    } else {
	      buf.fill(fill)
	    }
	  } else {
	    buf.fill(0)
	  }
	  return buf
	}

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(106).Buffer))

/***/ }),
/* 119 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 120 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/*<replacement>*/

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Buffer = __webpack_require__(117).Buffer;
	/*</replacement>*/

	function copyBuffer(src, target, offset) {
	  src.copy(target, offset);
	}

	module.exports = function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);

	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }

	  BufferList.prototype.push = function push(v) {
	    var entry = { data: v, next: null };
	    if (this.length > 0) this.tail.next = entry;else this.head = entry;
	    this.tail = entry;
	    ++this.length;
	  };

	  BufferList.prototype.unshift = function unshift(v) {
	    var entry = { data: v, next: this.head };
	    if (this.length === 0) this.tail = entry;
	    this.head = entry;
	    ++this.length;
	  };

	  BufferList.prototype.shift = function shift() {
	    if (this.length === 0) return;
	    var ret = this.head.data;
	    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	    --this.length;
	    return ret;
	  };

	  BufferList.prototype.clear = function clear() {
	    this.head = this.tail = null;
	    this.length = 0;
	  };

	  BufferList.prototype.join = function join(s) {
	    if (this.length === 0) return '';
	    var p = this.head;
	    var ret = '' + p.data;
	    while (p = p.next) {
	      ret += s + p.data;
	    }return ret;
	  };

	  BufferList.prototype.concat = function concat(n) {
	    if (this.length === 0) return Buffer.alloc(0);
	    if (this.length === 1) return this.head.data;
	    var ret = Buffer.allocUnsafe(n >>> 0);
	    var p = this.head;
	    var i = 0;
	    while (p) {
	      copyBuffer(p.data, ret, i);
	      i += p.data.length;
	      p = p.next;
	    }
	    return ret;
	  };

	  return BufferList;
	}();

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/*<replacement>*/

	var processNextTick = __webpack_require__(114);
	/*</replacement>*/

	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	  var _this = this;

	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;

	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
	      processNextTick(emitErrorNT, this, err);
	    }
	    return;
	  }

	  // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks

	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }

	  // if this is a duplex stream mark the writable part as destroyed as well
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }

	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      processNextTick(emitErrorNT, _this, err);
	      if (_this._writableState) {
	        _this._writableState.errorEmitted = true;
	      }
	    } else if (cb) {
	      cb(err);
	    }
	  });
	}

	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }

	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}

	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}

	module.exports = {
	  destroy: destroy,
	  undestroy: undestroy
	};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var processNextTick = __webpack_require__(114);
	/*</replacement>*/

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var util = __webpack_require__(118);
	util.inherits = __webpack_require__(119);
	/*</replacement>*/

	var Readable = __webpack_require__(113);
	var Writable = __webpack_require__(124);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});

	Duplex.prototype._destroy = function (err, cb) {
	  this.push(null);
	  this.end();

	  processNextTick(cb, err);
	};

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	/*<replacement>*/

	var processNextTick = __webpack_require__(114);
	/*</replacement>*/

	module.exports = Writable;

	/* <replacement> */
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(118);
	util.inherits = __webpack_require__(119);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(127)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = __webpack_require__(116);
	/*</replacement>*/

	/*<replacement>*/
	var Buffer = __webpack_require__(117).Buffer;
	var OurUint8Array = global.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*</replacement>*/

	var destroyImpl = __webpack_require__(122);

	util.inherits(Writable, Stream);

	function nop() {}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(123);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);

	  // if _final has been called
	  this.finalCalled = false;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(123);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;

	    if (typeof options.destroy === 'function') this._destroy = options.destroy;

	    if (typeof options.final === 'function') this._final = options.final;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;

	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = _isUint8Array(chunk) && !state.objectMode;

	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;

	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    processNextTick(cb, er);
	    // this can emit finish, and it will always happen
	    // after error
	    processNextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	    // this can emit finish, but finish must
	    // always follow error
	    finishMaybe(stream, state);
	  }
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      stream.emit('error', err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function') {
	      state.pendingcb++;
	      state.finalCalled = true;
	      processNextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }
	  if (state.corkedRequestsFree) {
	    state.corkedRequestsFree.next = corkReq;
	  } else {
	    state.corkedRequestsFree = corkReq;
	  }
	}

	Object.defineProperty(Writable.prototype, 'destroyed', {
	  get: function () {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._writableState.destroyed = value;
	  }
	});

	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  this.end();
	  cb(err);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(105), __webpack_require__(125).setImmediate, (function() { return this; }())))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(126);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(105)))

/***/ }),
/* 127 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(117).Buffer;

	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	};

	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}

	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return -1;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd'.repeat(p);
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd'.repeat(p + 1);
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd'.repeat(p + 2);
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character for each buffered byte of a (partial)
	// character needs to be added to the output.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(123);

	/*<replacement>*/
	var util = __webpack_require__(118);
	util.inherits = __webpack_require__(119);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) {
	    return stream.emit('error', new Error('write callback called multiple times'));
	  }

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	Transform.prototype._destroy = function (err, cb) {
	  var _this = this;

	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	    _this.emit('close');
	  });
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data !== null && data !== undefined) stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(129);

	/*<replacement>*/
	var util = __webpack_require__(118);
	util.inherits = __webpack_require__(119);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var msg = __webpack_require__(132);
	var zstream = __webpack_require__(133);
	var zlib_deflate = __webpack_require__(134);
	var zlib_inflate = __webpack_require__(139);
	var constants = __webpack_require__(142);

	for (var key in constants) {
	  exports[key] = constants[key];
	}

	// zlib modes
	exports.NONE = 0;
	exports.DEFLATE = 1;
	exports.INFLATE = 2;
	exports.GZIP = 3;
	exports.GUNZIP = 4;
	exports.DEFLATERAW = 5;
	exports.INFLATERAW = 6;
	exports.UNZIP = 7;

	/**
	 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
	 */
	function Zlib(mode) {
	  if (mode < exports.DEFLATE || mode > exports.UNZIP)
	    throw new TypeError("Bad argument");
	    
	  this.mode = mode;
	  this.init_done = false;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.windowBits = 0;
	  this.level = 0;
	  this.memLevel = 0;
	  this.strategy = 0;
	  this.dictionary = null;
	}

	Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
	  this.windowBits = windowBits;
	  this.level = level;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  // dictionary not supported.
	  
	  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
	    this.windowBits += 16;
	    
	  if (this.mode === exports.UNZIP)
	    this.windowBits += 32;
	    
	  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
	    this.windowBits = -this.windowBits;
	    
	  this.strm = new zstream();
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateInit2(
	        this.strm,
	        this.level,
	        exports.Z_DEFLATED,
	        this.windowBits,
	        this.memLevel,
	        this.strategy
	      );
	      break;
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	    case exports.UNZIP:
	      var status  = zlib_inflate.inflateInit2(
	        this.strm,
	        this.windowBits
	      );
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	    return;
	  }
	  
	  this.write_in_progress = false;
	  this.init_done = true;
	};

	Zlib.prototype.params = function() {
	  throw new Error("deflateParams Not supported");
	};

	Zlib.prototype._writeCheck = function() {
	  if (!this.init_done)
	    throw new Error("write before init");
	    
	  if (this.mode === exports.NONE)
	    throw new Error("already finalized");
	    
	  if (this.write_in_progress)
	    throw new Error("write already in progress");
	    
	  if (this.pending_close)
	    throw new Error("close is pending");
	};

	Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
	  this._writeCheck();
	  this.write_in_progress = true;
	  
	  var self = this;
	  process.nextTick(function() {
	    self.write_in_progress = false;
	    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	    self.callback(res[0], res[1]);
	    
	    if (self.pending_close)
	      self.close();
	  });
	  
	  return this;
	};

	// set method for Node buffers, used by pako
	function bufferSet(data, offset) {
	  for (var i = 0; i < data.length; i++) {
	    this[offset + i] = data[i];
	  }
	}

	Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	};

	Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this.write_in_progress = true;
	  
	  if (flush !== exports.Z_NO_FLUSH &&
	      flush !== exports.Z_PARTIAL_FLUSH &&
	      flush !== exports.Z_SYNC_FLUSH &&
	      flush !== exports.Z_FULL_FLUSH &&
	      flush !== exports.Z_FINISH &&
	      flush !== exports.Z_BLOCK) {
	    throw new Error("Invalid flush value");
	  }
	  
	  if (input == null) {
	    input = new Buffer(0);
	    in_len = 0;
	    in_off = 0;
	  }
	  
	  if (out._set)
	    out.set = out._set;
	  else
	    out.set = bufferSet;
	  
	  var strm = this.strm;
	  strm.avail_in = in_len;
	  strm.input = input;
	  strm.next_in = in_off;
	  strm.avail_out = out_len;
	  strm.output = out;
	  strm.next_out = out_off;
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflate(strm, flush);
	      break;
	    case exports.UNZIP:
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflate(strm, flush);
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
	    this._error(status);
	  }
	  
	  this.write_in_progress = false;
	  return [strm.avail_in, strm.avail_out];
	};

	Zlib.prototype.close = function() {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }
	  
	  this.pending_close = false;
	  
	  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
	    zlib_deflate.deflateEnd(this.strm);
	  } else {
	    zlib_inflate.inflateEnd(this.strm);
	  }
	  
	  this.mode = exports.NONE;
	};

	Zlib.prototype.reset = function() {
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateReset(this.strm);
	      break;
	    case exports.INFLATE:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflateReset(this.strm);
	      break;
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	  }
	};

	Zlib.prototype._error = function(status) {
	  this.onerror(msg[status] + ': ' + this.strm.msg, status);
	  
	  this.write_in_progress = false;
	  if (this.pending_close)
	    this.close();
	};

	exports.Zlib = Zlib;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(105), __webpack_require__(106).Buffer))

/***/ }),
/* 132 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ }),
/* 133 */
/***/ (function(module, exports) {

	'use strict';


	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	module.exports = ZStream;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils   = __webpack_require__(135);
	var trees   = __webpack_require__(136);
	var adler32 = __webpack_require__(137);
	var crc32   = __webpack_require__(138);
	var msg     = __webpack_require__(132);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  // zmemcpy(buf, strm->next_in, len);
	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;

	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);

	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;

	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}


	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  s = strm.state;
	  wrap = s.wrap;

	  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
	    return Z_STREAM_ERROR;
	  }

	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
	  }

	  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {            /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new utils.Buf8(s.w_size);
	    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	      s.prev[str & s.w_mask] = s.head[s.ins_h];

	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK;
	}


	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/


/***/ }),
/* 135 */
/***/ (function(module, exports) {

	'use strict';


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');


	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(135);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;

	/*============================================================================*/


	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES       = 30;
	/* number of distance codes */

	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* eslint-enable comma-spacing,array-bracket-spacing */

	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES + 2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	}


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	}



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
	        tree[m * 2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n * 2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1]/*.Len*/ = 5;
	    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n * 2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1,   5);
	  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;


/***/ }),
/* 137 */
/***/ (function(module, exports) {

	'use strict';

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	module.exports = adler32;


/***/ }),
/* 138 */
/***/ (function(module, exports) {

	'use strict';

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	module.exports = crc32;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';


	var utils         = __webpack_require__(135);
	var adler32       = __webpack_require__(137);
	var crc32         = __webpack_require__(138);
	var inflate_fast  = __webpack_require__(140);
	var inflate_table = __webpack_require__(141);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new utils.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//

	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);

	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = zswap32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//

	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;

	      opts = { bits: state.lenbits };
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;

	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }

	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }

	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }

	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;

	      opts = { bits: state.lenbits };
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;

	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }

	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = { bits: state.distbits };
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;

	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---

	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}

	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var state;
	  var dictid;
	  var ret;

	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }

	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}

	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ }),
/* 140 */
/***/ (function(module, exports) {

	'use strict';

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(135);

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }

	  var i = 0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ }),
/* 142 */
/***/ (function(module, exports) {

	'use strict';


	module.exports = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = ({"version":"0.1.1","NODE_ENV":"development"}).NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(144);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(145);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(105)))

/***/ }),
/* 144 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 145 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}

	// based on node assert, original notice:

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = __webpack_require__(143);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};

	assert.ifError = function(err) { if (err) throw err; };

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 147 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 148 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 149 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var punycode = __webpack_require__(151);
	var util = __webpack_require__(153);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(154);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(152)(module), (function() { return this; }())))

/***/ }),
/* 152 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 153 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(155);
	exports.encode = exports.stringify = __webpack_require__(156);


/***/ }),
/* 155 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ }),
/* 156 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ }),
/* 157 */,
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Circle = exports.Line = undefined;

	var _Line = __webpack_require__(159);

	var _Line2 = _interopRequireDefault(_Line);

	var _Circle = __webpack_require__(237);

	var _Circle2 = _interopRequireDefault(_Circle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	exports.Line = _Line2['default'];
	exports.Circle = _Circle2['default'];
	exports['default'] = {
	  Line: _Line2['default'],
	  Circle: _Circle2['default']
	};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(160);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(167);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _classCallCheck2 = __webpack_require__(1);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(2);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(168);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(183);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(191);

	var _react2 = _interopRequireDefault(_react);

	var _enhancer = __webpack_require__(226);

	var _enhancer2 = _interopRequireDefault(_enhancer);

	var _types = __webpack_require__(235);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Line = function (_Component) {
	  (0, _inherits3['default'])(Line, _Component);

	  function Line() {
	    (0, _classCallCheck3['default'])(this, Line);
	    return (0, _possibleConstructorReturn3['default'])(this, (Line.__proto__ || Object.getPrototypeOf(Line)).apply(this, arguments));
	  }

	  (0, _createClass3['default'])(Line, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          className = _props.className,
	          percent = _props.percent,
	          prefixCls = _props.prefixCls,
	          strokeColor = _props.strokeColor,
	          strokeLinecap = _props.strokeLinecap,
	          strokeWidth = _props.strokeWidth,
	          style = _props.style,
	          trailColor = _props.trailColor,
	          trailWidth = _props.trailWidth,
	          restProps = (0, _objectWithoutProperties3['default'])(_props, ['className', 'percent', 'prefixCls', 'strokeColor', 'strokeLinecap', 'strokeWidth', 'style', 'trailColor', 'trailWidth']);


	      delete restProps.gapPosition;

	      var pathStyle = {
	        strokeDasharray: '100px, 100px',
	        strokeDashoffset: 100 - percent + 'px',
	        transition: 'stroke-dashoffset 0.3s ease 0s, stroke 0.3s linear'
	      };

	      var center = strokeWidth / 2;
	      var right = 100 - strokeWidth / 2;
	      var pathString = 'M ' + (strokeLinecap === 'round' ? center : 0) + ',' + center + '\n           L ' + (strokeLinecap === 'round' ? right : 100) + ',' + center;
	      var viewBoxString = '0 0 100 ' + strokeWidth;

	      return _react2['default'].createElement(
	        'svg',
	        (0, _extends3['default'])({
	          className: prefixCls + '-line ' + className,
	          viewBox: viewBoxString,
	          preserveAspectRatio: 'none',
	          style: style
	        }, restProps),
	        _react2['default'].createElement('path', {
	          className: prefixCls + '-line-trail',
	          d: pathString,
	          strokeLinecap: strokeLinecap,
	          stroke: trailColor,
	          strokeWidth: trailWidth || strokeWidth,
	          fillOpacity: '0'
	        }),
	        _react2['default'].createElement('path', {
	          className: prefixCls + '-line-path',
	          d: pathString,
	          strokeLinecap: strokeLinecap,
	          stroke: strokeColor,
	          strokeWidth: strokeWidth,
	          fillOpacity: '0',
	          ref: function ref(path) {
	            _this2.path = path;
	          },
	          style: pathStyle
	        })
	      );
	    }
	  }]);
	  return Line;
	}(_react.Component);

	Line.propTypes = _types.propTypes;

	Line.defaultProps = _types.defaultProps;

	exports['default'] = (0, _enhancer2['default'])(Line);
	module.exports = exports['default'];

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _assign = __webpack_require__(161);

	var _assign2 = _interopRequireDefault(_assign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(162), __esModule: true };

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(163);
	module.exports = __webpack_require__(8).Object.assign;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(6);

	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(164) });


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(37);
	var gOPS = __webpack_require__(165);
	var pIE = __webpack_require__(166);
	var toObject = __webpack_require__(53);
	var IObject = __webpack_require__(40);
	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(17)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


/***/ }),
/* 165 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 166 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 167 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports.default = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _typeof2 = __webpack_require__(169);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _iterator = __webpack_require__(170);

	var _iterator2 = _interopRequireDefault(_iterator);

	var _symbol = __webpack_require__(173);

	var _symbol2 = _interopRequireDefault(_symbol);

	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(171), __esModule: true };

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(25);
	__webpack_require__(54);
	module.exports = __webpack_require__(172).f('iterator');


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(51);


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(174), __esModule: true };

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(175);
	__webpack_require__(24);
	__webpack_require__(181);
	__webpack_require__(182);
	module.exports = __webpack_require__(8).Symbol;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(7);
	var has = __webpack_require__(32);
	var DESCRIPTORS = __webpack_require__(16);
	var $export = __webpack_require__(6);
	var redefine = __webpack_require__(31);
	var META = __webpack_require__(84).KEY;
	var $fails = __webpack_require__(17);
	var shared = __webpack_require__(46);
	var setToStringTag = __webpack_require__(50);
	var uid = __webpack_require__(47);
	var wks = __webpack_require__(51);
	var wksExt = __webpack_require__(172);
	var wksDefine = __webpack_require__(176);
	var enumKeys = __webpack_require__(177);
	var isArray = __webpack_require__(90);
	var anObject = __webpack_require__(13);
	var toIObject = __webpack_require__(39);
	var toPrimitive = __webpack_require__(19);
	var createDesc = __webpack_require__(20);
	var _create = __webpack_require__(35);
	var gOPNExt = __webpack_require__(178);
	var $GOPD = __webpack_require__(180);
	var $DP = __webpack_require__(12);
	var $keys = __webpack_require__(37);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(179).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(166).f = $propertyIsEnumerable;
	  __webpack_require__(165).f = $getOwnPropertySymbols;

	  if (DESCRIPTORS && !__webpack_require__(30)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    replacer = args[1];
	    if (typeof replacer == 'function') $replacer = replacer;
	    if ($replacer || !isArray(replacer)) replacer = function (key, value) {
	      if ($replacer) value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(11)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(7);
	var core = __webpack_require__(8);
	var LIBRARY = __webpack_require__(30);
	var wksExt = __webpack_require__(172);
	var defineProperty = __webpack_require__(12).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(37);
	var gOPS = __webpack_require__(165);
	var pIE = __webpack_require__(166);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(39);
	var gOPN = __webpack_require__(179).f;
	var toString = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(38);
	var hiddenKeys = __webpack_require__(48).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(166);
	var createDesc = __webpack_require__(20);
	var toIObject = __webpack_require__(39);
	var toPrimitive = __webpack_require__(19);
	var has = __webpack_require__(32);
	var IE8_DOM_DEFINE = __webpack_require__(15);
	var gOPD = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(16) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(176)('asyncIterator');


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(176)('observable');


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _setPrototypeOf = __webpack_require__(184);

	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

	var _create = __webpack_require__(188);

	var _create2 = _interopRequireDefault(_create);

	var _typeof2 = __webpack_require__(169);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }

	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(185), __esModule: true };

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(186);
	module.exports = __webpack_require__(8).Object.setPrototypeOf;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(6);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(187).set });


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(14);
	var anObject = __webpack_require__(13);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(9)(Function.call, __webpack_require__(180).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(189), __esModule: true };

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(190);
	var $Object = __webpack_require__(8).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(6);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(35) });


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(192);


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(193);

	var ReactBaseClasses = __webpack_require__(194);
	var ReactChildren = __webpack_require__(203);
	var ReactDOMFactories = __webpack_require__(211);
	var ReactElement = __webpack_require__(205);
	var ReactPropTypes = __webpack_require__(217);
	var ReactVersion = __webpack_require__(222);

	var createReactClass = __webpack_require__(223);
	var onlyChild = __webpack_require__(225);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (true) {
	  var lowPriorityWarning = __webpack_require__(202);
	  var canDefineProperty = __webpack_require__(199);
	  var ReactElementValidator = __webpack_require__(212);
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;
	var createMixin = function (mixin) {
	  return mixin;
	};

	if (true) {
	  var warnedForSpread = false;
	  var warnedForCreateMixin = false;
	  __spread = function () {
	    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
	    warnedForSpread = true;
	    return _assign.apply(null, arguments);
	  };

	  createMixin = function (mixin) {
	    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
	    warnedForCreateMixin = true;
	    return mixin;
	  };
	}

	var React = {
	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactBaseClasses.Component,
	  PureComponent: ReactBaseClasses.PureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: createReactClass,
	  createFactory: createFactory,
	  createMixin: createMixin,

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	if (true) {
	  var warnedForCreateClass = false;
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });

	    Object.defineProperty(React, 'createClass', {
	      get: function () {
	        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
	        warnedForCreateClass = true;
	        return createReactClass;
	      }
	    });
	  }

	  // React.DOM factories are deprecated. Wrap these methods so that
	  // invocations of the React.DOM namespace and alert users to switch
	  // to the `react-dom-factories` package.
	  React.DOM = {};
	  var warnedForFactories = false;
	  Object.keys(ReactDOMFactories).forEach(function (factory) {
	    React.DOM[factory] = function () {
	      if (!warnedForFactories) {
	        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
	        warnedForFactories = true;
	      }
	      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
	    };
	  });
	}

	module.exports = React;

/***/ }),
/* 193 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(195),
	    _assign = __webpack_require__(193);

	var ReactNoopUpdateQueue = __webpack_require__(196);

	var canDefineProperty = __webpack_require__(199);
	var emptyObject = __webpack_require__(200);
	var invariant = __webpack_require__(201);
	var lowPriorityWarning = __webpack_require__(202);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  true ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (true) {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = {
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent
	};

/***/ }),
/* 195 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(197);

	function warnNoop(publicInstance, callerName) {
	  if (true) {
	    var constructor = publicInstance.constructor;
	     true ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(198);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (true) {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;

/***/ }),
/* 198 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (true) {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (true) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (true) {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	if (true) {
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = lowPriorityWarning;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(204);
	var ReactElement = __webpack_require__(205);

	var emptyFunction = __webpack_require__(198);
	var traverseAllChildren = __webpack_require__(208);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(195);

	var invariant = __webpack_require__(201);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(193);

	var ReactCurrentOwner = __webpack_require__(206);

	var warning = __webpack_require__(197);
	var canDefineProperty = __webpack_require__(199);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(207);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (true) {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (true) {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	       true ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	       true ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (true) {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (true) {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (true) {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;

/***/ }),
/* 206 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	module.exports = ReactCurrentOwner;

/***/ }),
/* 207 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(195);

	var ReactCurrentOwner = __webpack_require__(206);
	var REACT_ELEMENT_TYPE = __webpack_require__(207);

	var getIteratorFn = __webpack_require__(209);
	var invariant = __webpack_require__(201);
	var KeyEscapeUtils = __webpack_require__(210);
	var warning = __webpack_require__(197);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (true) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (true) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;

/***/ }),
/* 209 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 210 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(205);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (true) {
	  var ReactElementValidator = __webpack_require__(212);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(206);
	var ReactComponentTreeHook = __webpack_require__(213);
	var ReactElement = __webpack_require__(205);

	var checkReactTypeSpec = __webpack_require__(214);

	var canDefineProperty = __webpack_require__(199);
	var getIteratorFn = __webpack_require__(209);
	var warning = __webpack_require__(197);
	var lowPriorityWarning = __webpack_require__(202);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	   true ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	     true ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }

	        var sourceInfo = getSourceInfoErrorAddendum(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }

	        info += ReactComponentTreeHook.getCurrentStackAddendum();

	        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
	        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
	         true ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	        ReactComponentTreeHook.popNonStandardWarningStack();
	      }
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (true) {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	};

	module.exports = ReactElementValidator;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(195);

	var ReactCurrentOwner = __webpack_require__(206);

	var invariant = __webpack_require__(201);
	var warning = __webpack_require__(197);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty
	  // Strip regex characters so we can use it for regex
	  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
	  // Remove hasOwnProperty from the template to make it generic
	  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	   true ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ?  true ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  true ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ?  true ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ?  true ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs,

	  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
	    if (typeof console.reactStack !== 'function') {
	      return;
	    }

	    var stack = [];
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    try {
	      if (isCreatingElement) {
	        stack.push({
	          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
	          fileName: currentSource ? currentSource.fileName : null,
	          lineNumber: currentSource ? currentSource.lineNumber : null
	        });
	      }

	      while (id) {
	        var element = ReactComponentTreeHook.getElement(id);
	        var parentID = ReactComponentTreeHook.getParentID(id);
	        var ownerID = ReactComponentTreeHook.getOwnerID(id);
	        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
	        var source = element && element._source;
	        stack.push({
	          name: ownerName,
	          fileName: source ? source.fileName : null,
	          lineNumber: source ? source.lineNumber : null
	        });
	        id = parentID;
	      }
	    } catch (err) {
	      // Internal state is messed up.
	      // Stop building the stack (it's just a nice to have).
	    }

	    console.reactStack(stack);
	  },
	  popNonStandardWarningStack: function () {
	    if (typeof console.reactStackEnd !== 'function') {
	      return;
	    }
	    console.reactStackEnd();
	  }
	};

	module.exports = ReactComponentTreeHook;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(195);

	var ReactPropTypeLocationNames = __webpack_require__(215);
	var ReactPropTypesSecret = __webpack_require__(216);

	var invariant = __webpack_require__(201);
	var warning = __webpack_require__(197);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && ({"version":"0.1.1","NODE_ENV":"development"}) && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(213);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (true) {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(213);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(105)))

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (true) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 216 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(205),
	    isValidElement = _require.isValidElement;

	var factory = __webpack_require__(218);

	module.exports = factory(isValidElement);

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(219);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(198);
	var invariant = __webpack_require__(201);
	var warning = __webpack_require__(197);
	var assign = __webpack_require__(193);

	var ReactPropTypesSecret = __webpack_require__(220);
	var checkPropTypes = __webpack_require__(221);

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (true) {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (("development") !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	       true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        warning(
	          false,
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received %s at index %s.',
	          getPostfixForTypeWarning(checker),
	          i
	        );
	        return emptyFunction.thatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 220 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	if (true) {
	  var invariant = __webpack_require__(201);
	  var warning = __webpack_require__(197);
	  var ReactPropTypesSecret = __webpack_require__(220);
	  var loggedTypeFailures = {};
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (true) {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;


/***/ }),
/* 222 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	module.exports = '15.6.2';

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(194),
	    Component = _require.Component;

	var _require2 = __webpack_require__(205),
	    isValidElement = _require2.isValidElement;

	var ReactNoopUpdateQueue = __webpack_require__(196);
	var factory = __webpack_require__(224);

	module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(193);

	var emptyObject = __webpack_require__(200);
	var _invariant = __webpack_require__(201);

	if (true) {
	  var warning = __webpack_require__(197);
	}

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	var ReactPropTypeLocationNames;
	if (true) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	} else {
	  ReactPropTypeLocationNames = {};
	}

	function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
	  /**
	   * Policies that describe methods in `ReactClassInterface`.
	   */

	  var injectedMixins = [];

	  /**
	   * Composite components are higher-level components that compose other composite
	   * or host components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */
	  var ReactClassInterface = {
	    /**
	     * An array of Mixin objects to include when defining your component.
	     *
	     * @type {array}
	     * @optional
	     */
	    mixins: 'DEFINE_MANY',

	    /**
	     * An object containing properties and methods that should be defined on
	     * the component's constructor instead of its prototype (static methods).
	     *
	     * @type {object}
	     * @optional
	     */
	    statics: 'DEFINE_MANY',

	    /**
	     * Definition of prop types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    propTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    contextTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types this component sets for its children.
	     *
	     * @type {object}
	     * @optional
	     */
	    childContextTypes: 'DEFINE_MANY',

	    // ==== Definition methods ====

	    /**
	     * Invoked when the component is mounted. Values in the mapping will be set on
	     * `this.props` if that prop is not specified (i.e. using an `in` check).
	     *
	     * This method is invoked before `getInitialState` and therefore cannot rely
	     * on `this.state` or use `this.setState`.
	     *
	     * @return {object}
	     * @optional
	     */
	    getDefaultProps: 'DEFINE_MANY_MERGED',

	    /**
	     * Invoked once before the component is mounted. The return value will be used
	     * as the initial value of `this.state`.
	     *
	     *   getInitialState: function() {
	     *     return {
	     *       isOn: false,
	     *       fooBaz: new BazFoo()
	     *     }
	     *   }
	     *
	     * @return {object}
	     * @optional
	     */
	    getInitialState: 'DEFINE_MANY_MERGED',

	    /**
	     * @return {object}
	     * @optional
	     */
	    getChildContext: 'DEFINE_MANY_MERGED',

	    /**
	     * Uses props from `this.props` and state from `this.state` to render the
	     * structure of the component.
	     *
	     * No guarantees are made about when or how often this method is invoked, so
	     * it must not have side effects.
	     *
	     *   render: function() {
	     *     var name = this.props.name;
	     *     return <div>Hello, {name}!</div>;
	     *   }
	     *
	     * @return {ReactComponent}
	     * @required
	     */
	    render: 'DEFINE_ONCE',

	    // ==== Delegate methods ====

	    /**
	     * Invoked when the component is initially created and about to be mounted.
	     * This may have side effects, but any external subscriptions or data created
	     * by this method must be cleaned up in `componentWillUnmount`.
	     *
	     * @optional
	     */
	    componentWillMount: 'DEFINE_MANY',

	    /**
	     * Invoked when the component has been mounted and has a DOM representation.
	     * However, there is no guarantee that the DOM node is in the document.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been mounted (initialized and rendered) for the first time.
	     *
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidMount: 'DEFINE_MANY',

	    /**
	     * Invoked before the component receives new props.
	     *
	     * Use this as an opportunity to react to a prop transition by updating the
	     * state using `this.setState`. Current props are accessed via `this.props`.
	     *
	     *   componentWillReceiveProps: function(nextProps, nextContext) {
	     *     this.setState({
	     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	     *     });
	     *   }
	     *
	     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	     * transition may cause a state change, but the opposite is not true. If you
	     * need it, you are probably looking for `componentWillUpdate`.
	     *
	     * @param {object} nextProps
	     * @optional
	     */
	    componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Invoked while deciding if the component should be updated as a result of
	     * receiving new props, state and/or context.
	     *
	     * Use this as an opportunity to `return false` when you're certain that the
	     * transition to the new props/state/context will not require a component
	     * update.
	     *
	     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	     *     return !equal(nextProps, this.props) ||
	     *       !equal(nextState, this.state) ||
	     *       !equal(nextContext, this.context);
	     *   }
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @return {boolean} True if the component should update.
	     * @optional
	     */
	    shouldComponentUpdate: 'DEFINE_ONCE',

	    /**
	     * Invoked when the component is about to update due to a transition from
	     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	     * and `nextContext`.
	     *
	     * Use this as an opportunity to perform preparation before an update occurs.
	     *
	     * NOTE: You **cannot** use `this.setState()` in this method.
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @param {ReactReconcileTransaction} transaction
	     * @optional
	     */
	    componentWillUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component's DOM representation has been updated.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been updated.
	     *
	     * @param {object} prevProps
	     * @param {?object} prevState
	     * @param {?object} prevContext
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component is about to be removed from its parent and have
	     * its DOM representation destroyed.
	     *
	     * Use this as an opportunity to deallocate any external resources.
	     *
	     * NOTE: There is no `componentDidUnmount` since your component will have been
	     * destroyed by that point.
	     *
	     * @optional
	     */
	    componentWillUnmount: 'DEFINE_MANY',

	    // ==== Advanced methods ====

	    /**
	     * Updates the component's currently mounted DOM representation.
	     *
	     * By default, this implements React's rendering and reconciliation algorithm.
	     * Sophisticated clients may wish to override this.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     * @overridable
	     */
	    updateComponent: 'OVERRIDE_BASE'
	  };

	  /**
	   * Mapping from class specification keys to special processing functions.
	   *
	   * Although these are declared like instance properties in the specification
	   * when defining classes using `React.createClass`, they are actually static
	   * and are accessible on the constructor instead of the prototype. Despite
	   * being static, they must be defined outside of the "statics" key under
	   * which all other static methods are defined.
	   */
	  var RESERVED_SPEC_KEYS = {
	    displayName: function(Constructor, displayName) {
	      Constructor.displayName = displayName;
	    },
	    mixins: function(Constructor, mixins) {
	      if (mixins) {
	        for (var i = 0; i < mixins.length; i++) {
	          mixSpecIntoComponent(Constructor, mixins[i]);
	        }
	      }
	    },
	    childContextTypes: function(Constructor, childContextTypes) {
	      if (true) {
	        validateTypeDef(Constructor, childContextTypes, 'childContext');
	      }
	      Constructor.childContextTypes = _assign(
	        {},
	        Constructor.childContextTypes,
	        childContextTypes
	      );
	    },
	    contextTypes: function(Constructor, contextTypes) {
	      if (true) {
	        validateTypeDef(Constructor, contextTypes, 'context');
	      }
	      Constructor.contextTypes = _assign(
	        {},
	        Constructor.contextTypes,
	        contextTypes
	      );
	    },
	    /**
	     * Special case getDefaultProps which should move into statics but requires
	     * automatic merging.
	     */
	    getDefaultProps: function(Constructor, getDefaultProps) {
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps = createMergedResultFunction(
	          Constructor.getDefaultProps,
	          getDefaultProps
	        );
	      } else {
	        Constructor.getDefaultProps = getDefaultProps;
	      }
	    },
	    propTypes: function(Constructor, propTypes) {
	      if (true) {
	        validateTypeDef(Constructor, propTypes, 'prop');
	      }
	      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	    },
	    statics: function(Constructor, statics) {
	      mixStaticSpecIntoComponent(Constructor, statics);
	    },
	    autobind: function() {}
	  };

	  function validateTypeDef(Constructor, typeDef, location) {
	    for (var propName in typeDef) {
	      if (typeDef.hasOwnProperty(propName)) {
	        // use a warning instead of an _invariant so components
	        // don't show up in prod but only in __DEV__
	        if (true) {
	          warning(
	            typeof typeDef[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	              'React.PropTypes.',
	            Constructor.displayName || 'ReactClass',
	            ReactPropTypeLocationNames[location],
	            propName
	          );
	        }
	      }
	    }
	  }

	  function validateMethodOverride(isAlreadyDefined, name) {
	    var specPolicy = ReactClassInterface.hasOwnProperty(name)
	      ? ReactClassInterface[name]
	      : null;

	    // Disallow overriding of base class methods unless explicitly allowed.
	    if (ReactClassMixin.hasOwnProperty(name)) {
	      _invariant(
	        specPolicy === 'OVERRIDE_BASE',
	        'ReactClassInterface: You are attempting to override ' +
	          '`%s` from your class specification. Ensure that your method names ' +
	          'do not overlap with React methods.',
	        name
	      );
	    }

	    // Disallow defining methods more than once unless explicitly allowed.
	    if (isAlreadyDefined) {
	      _invariant(
	        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
	        'ReactClassInterface: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be due ' +
	          'to a mixin.',
	        name
	      );
	    }
	  }

	  /**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classes.
	   */
	  function mixSpecIntoComponent(Constructor, spec) {
	    if (!spec) {
	      if (true) {
	        var typeofSpec = typeof spec;
	        var isMixinValid = typeofSpec === 'object' && spec !== null;

	        if (true) {
	          warning(
	            isMixinValid,
	            "%s: You're attempting to include a mixin that is either null " +
	              'or not an object. Check the mixins included by the component, ' +
	              'as well as any mixins they include themselves. ' +
	              'Expected object but got %s.',
	            Constructor.displayName || 'ReactClass',
	            spec === null ? null : typeofSpec
	          );
	        }
	      }

	      return;
	    }

	    _invariant(
	      typeof spec !== 'function',
	      "ReactClass: You're attempting to " +
	        'use a component class or function as a mixin. Instead, just use a ' +
	        'regular object.'
	    );
	    _invariant(
	      !isValidElement(spec),
	      "ReactClass: You're attempting to " +
	        'use a component as a mixin. Instead, just use a regular object.'
	    );

	    var proto = Constructor.prototype;
	    var autoBindPairs = proto.__reactAutoBindPairs;

	    // By handling mixins before any other properties, we ensure the same
	    // chaining order is applied to methods with DEFINE_MANY policy, whether
	    // mixins are listed before or after these methods in the spec.
	    if (spec.hasOwnProperty(MIXINS_KEY)) {
	      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	    }

	    for (var name in spec) {
	      if (!spec.hasOwnProperty(name)) {
	        continue;
	      }

	      if (name === MIXINS_KEY) {
	        // We have already handled mixins in a special case above.
	        continue;
	      }

	      var property = spec[name];
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      validateMethodOverride(isAlreadyDefined, name);

	      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	        RESERVED_SPEC_KEYS[name](Constructor, property);
	      } else {
	        // Setup methods on prototype:
	        // The following member methods should not be automatically bound:
	        // 1. Expected ReactClass methods (in the "interface").
	        // 2. Overridden methods (that were mixed in).
	        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	        var isFunction = typeof property === 'function';
	        var shouldAutoBind =
	          isFunction &&
	          !isReactClassMethod &&
	          !isAlreadyDefined &&
	          spec.autobind !== false;

	        if (shouldAutoBind) {
	          autoBindPairs.push(name, property);
	          proto[name] = property;
	        } else {
	          if (isAlreadyDefined) {
	            var specPolicy = ReactClassInterface[name];

	            // These cases should already be caught by validateMethodOverride.
	            _invariant(
	              isReactClassMethod &&
	                (specPolicy === 'DEFINE_MANY_MERGED' ||
	                  specPolicy === 'DEFINE_MANY'),
	              'ReactClass: Unexpected spec policy %s for key %s ' +
	                'when mixing in component specs.',
	              specPolicy,
	              name
	            );

	            // For methods which are defined more than once, call the existing
	            // methods before calling the new property, merging if appropriate.
	            if (specPolicy === 'DEFINE_MANY_MERGED') {
	              proto[name] = createMergedResultFunction(proto[name], property);
	            } else if (specPolicy === 'DEFINE_MANY') {
	              proto[name] = createChainedFunction(proto[name], property);
	            }
	          } else {
	            proto[name] = property;
	            if (true) {
	              // Add verbose displayName to the function, which helps when looking
	              // at profiling tools.
	              if (typeof property === 'function' && spec.displayName) {
	                proto[name].displayName = spec.displayName + '_' + name;
	              }
	            }
	          }
	        }
	      }
	    }
	  }

	  function mixStaticSpecIntoComponent(Constructor, statics) {
	    if (!statics) {
	      return;
	    }
	    for (var name in statics) {
	      var property = statics[name];
	      if (!statics.hasOwnProperty(name)) {
	        continue;
	      }

	      var isReserved = name in RESERVED_SPEC_KEYS;
	      _invariant(
	        !isReserved,
	        'ReactClass: You are attempting to define a reserved ' +
	          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	          'as an instance property instead; it will still be accessible on the ' +
	          'constructor.',
	        name
	      );

	      var isInherited = name in Constructor;
	      _invariant(
	        !isInherited,
	        'ReactClass: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be ' +
	          'due to a mixin.',
	        name
	      );
	      Constructor[name] = property;
	    }
	  }

	  /**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */
	  function mergeIntoWithNoDuplicateKeys(one, two) {
	    _invariant(
	      one && two && typeof one === 'object' && typeof two === 'object',
	      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	    );

	    for (var key in two) {
	      if (two.hasOwnProperty(key)) {
	        _invariant(
	          one[key] === undefined,
	          'mergeIntoWithNoDuplicateKeys(): ' +
	            'Tried to merge two objects with the same key: `%s`. This conflict ' +
	            'may be due to a mixin; in particular, this may be caused by two ' +
	            'getInitialState() or getDefaultProps() methods returning objects ' +
	            'with clashing keys.',
	          key
	        );
	        one[key] = two[key];
	      }
	    }
	    return one;
	  }

	  /**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createMergedResultFunction(one, two) {
	    return function mergedResult() {
	      var a = one.apply(this, arguments);
	      var b = two.apply(this, arguments);
	      if (a == null) {
	        return b;
	      } else if (b == null) {
	        return a;
	      }
	      var c = {};
	      mergeIntoWithNoDuplicateKeys(c, a);
	      mergeIntoWithNoDuplicateKeys(c, b);
	      return c;
	    };
	  }

	  /**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createChainedFunction(one, two) {
	    return function chainedFunction() {
	      one.apply(this, arguments);
	      two.apply(this, arguments);
	    };
	  }

	  /**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */
	  function bindAutoBindMethod(component, method) {
	    var boundMethod = method.bind(component);
	    if (true) {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis) {
	        for (
	          var _len = arguments.length,
	            args = Array(_len > 1 ? _len - 1 : 0),
	            _key = 1;
	          _key < _len;
	          _key++
	        ) {
	          args[_key - 1] = arguments[_key];
	        }

	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          if (true) {
	            warning(
	              false,
	              'bind(): React component methods may only be bound to the ' +
	                'component instance. See %s',
	              componentName
	            );
	          }
	        } else if (!args.length) {
	          if (true) {
	            warning(
	              false,
	              'bind(): You are binding a component method to the component. ' +
	                'React does this for you automatically in a high-performance ' +
	                'way, so you can safely remove this call. See %s',
	              componentName
	            );
	          }
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }

	  /**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */
	  function bindAutoBindMethods(component) {
	    var pairs = component.__reactAutoBindPairs;
	    for (var i = 0; i < pairs.length; i += 2) {
	      var autoBindKey = pairs[i];
	      var method = pairs[i + 1];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }

	  var IsMountedPreMixin = {
	    componentDidMount: function() {
	      this.__isMounted = true;
	    }
	  };

	  var IsMountedPostMixin = {
	    componentWillUnmount: function() {
	      this.__isMounted = false;
	    }
	  };

	  /**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */
	  var ReactClassMixin = {
	    /**
	     * TODO: This will be deprecated because state should always keep a consistent
	     * type signature and the only use case for this, is to avoid that.
	     */
	    replaceState: function(newState, callback) {
	      this.updater.enqueueReplaceState(this, newState, callback);
	    },

	    /**
	     * Checks whether or not this composite component is mounted.
	     * @return {boolean} True if mounted, false otherwise.
	     * @protected
	     * @final
	     */
	    isMounted: function() {
	      if (true) {
	        warning(
	          this.__didWarnIsMounted,
	          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
	            'subscriptions and pending requests in componentWillUnmount to ' +
	            'prevent memory leaks.',
	          (this.constructor && this.constructor.displayName) ||
	            this.name ||
	            'Component'
	        );
	        this.__didWarnIsMounted = true;
	      }
	      return !!this.__isMounted;
	    }
	  };

	  var ReactClassComponent = function() {};
	  _assign(
	    ReactClassComponent.prototype,
	    ReactComponent.prototype,
	    ReactClassMixin
	  );

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function(props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (true) {
	        warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	            'JSX instead. See: https://fb.me/react-legacyfactory'
	        );
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (true) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (
	          initialState === undefined &&
	          this.getInitialState._isMockFunction
	        ) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      _invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      );

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
	    mixSpecIntoComponent(Constructor, spec);
	    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (true) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    _invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    );

	    if (true) {
	      warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.componentWillRecieveProps,
	        '%s has a method called ' +
	          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  }

	  return createClass;
	}

	module.exports = factory;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(195);

	var ReactElement = __webpack_require__(205);

	var invariant = __webpack_require__(201);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ?  true ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(1);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(2);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(168);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _get2 = __webpack_require__(227);

	var _get3 = _interopRequireDefault(_get2);

	var _inherits2 = __webpack_require__(183);

	var _inherits3 = _interopRequireDefault(_inherits2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var enhancer = function enhancer(WrappedComponent) {
	  return function (_WrappedComponent) {
	    (0, _inherits3['default'])(Progress, _WrappedComponent);

	    function Progress() {
	      (0, _classCallCheck3['default'])(this, Progress);
	      return (0, _possibleConstructorReturn3['default'])(this, (Progress.__proto__ || Object.getPrototypeOf(Progress)).apply(this, arguments));
	    }

	    (0, _createClass3['default'])(Progress, [{
	      key: 'componentDidUpdate',
	      value: function componentDidUpdate() {
	        if (!this.path) {
	          return;
	        }
	        var pathStyle = this.path.style;
	        pathStyle.transitionDuration = '0.3s, 0.3s';
	        var now = Date.now();
	        if (this.prevTimeStamp && now - this.prevTimeStamp < 100) {
	          pathStyle.transitionDuration = '0s, 0s';
	        }
	        this.prevTimeStamp = Date.now();
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        return (0, _get3['default'])(Progress.prototype.__proto__ || Object.getPrototypeOf(Progress.prototype), 'render', this).call(this);
	      }
	    }]);
	    return Progress;
	  }(WrappedComponent);
	};

	exports['default'] = enhancer;
	module.exports = exports['default'];

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _getPrototypeOf = __webpack_require__(228);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _getOwnPropertyDescriptor = __webpack_require__(232);

	var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function get(object, property, receiver) {
	  if (object === null) object = Function.prototype;
	  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

	  if (desc === undefined) {
	    var parent = (0, _getPrototypeOf2.default)(object);

	    if (parent === null) {
	      return undefined;
	    } else {
	      return get(parent, property, receiver);
	    }
	  } else if ("value" in desc) {
	    return desc.value;
	  } else {
	    var getter = desc.get;

	    if (getter === undefined) {
	      return undefined;
	    }

	    return getter.call(receiver);
	  }
	};

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(229), __esModule: true };

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230);
	module.exports = __webpack_require__(8).Object.getPrototypeOf;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(53);
	var $getPrototypeOf = __webpack_require__(52);

	__webpack_require__(231)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(6);
	var core = __webpack_require__(8);
	var fails = __webpack_require__(17);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(233), __esModule: true };

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(234);
	var $Object = __webpack_require__(8).Object;
	module.exports = function getOwnPropertyDescriptor(it, key) {
	  return $Object.getOwnPropertyDescriptor(it, key);
	};


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(39);
	var $getOwnPropertyDescriptor = __webpack_require__(180).f;

	__webpack_require__(231)('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.propTypes = exports.defaultProps = undefined;

	var _propTypes = __webpack_require__(236);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var defaultProps = exports.defaultProps = {
	  className: '',
	  percent: 0,
	  prefixCls: 'rc-progress',
	  strokeColor: '#2db7f5',
	  strokeLinecap: 'round',
	  strokeWidth: 1,
	  style: {},
	  trailColor: '#D9D9D9',
	  trailWidth: 1
	};

	var propTypes = exports.propTypes = {
	  className: _propTypes2['default'].string,
	  percent: _propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].string]),
	  prefixCls: _propTypes2['default'].string,
	  strokeColor: _propTypes2['default'].string,
	  strokeLinecap: _propTypes2['default'].oneOf(['butt', 'round', 'square']),
	  strokeWidth: _propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].string]),
	  style: _propTypes2['default'].object,
	  trailColor: _propTypes2['default'].string,
	  trailWidth: _propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].string])
	};

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (true) {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(219)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = require('./factoryWithThrowingShims')();
	}


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(160);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(167);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _classCallCheck2 = __webpack_require__(1);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(2);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(168);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(183);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(191);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(236);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _enhancer = __webpack_require__(226);

	var _enhancer2 = _interopRequireDefault(_enhancer);

	var _types = __webpack_require__(235);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/* eslint react/prop-types: 0 */
	var Circle = function (_Component) {
	  (0, _inherits3['default'])(Circle, _Component);

	  function Circle() {
	    (0, _classCallCheck3['default'])(this, Circle);
	    return (0, _possibleConstructorReturn3['default'])(this, (Circle.__proto__ || Object.getPrototypeOf(Circle)).apply(this, arguments));
	  }

	  (0, _createClass3['default'])(Circle, [{
	    key: 'getPathStyles',
	    value: function getPathStyles() {
	      var _props = this.props,
	          percent = _props.percent,
	          strokeWidth = _props.strokeWidth,
	          _props$gapDegree = _props.gapDegree,
	          gapDegree = _props$gapDegree === undefined ? 0 : _props$gapDegree,
	          gapPosition = _props.gapPosition;

	      var radius = 50 - strokeWidth / 2;
	      var beginPositionX = 0;
	      var beginPositionY = -radius;
	      var endPositionX = 0;
	      var endPositionY = -2 * radius;
	      switch (gapPosition) {
	        case 'left':
	          beginPositionX = -radius;
	          beginPositionY = 0;
	          endPositionX = 2 * radius;
	          endPositionY = 0;
	          break;
	        case 'right':
	          beginPositionX = radius;
	          beginPositionY = 0;
	          endPositionX = -2 * radius;
	          endPositionY = 0;
	          break;
	        case 'bottom':
	          beginPositionY = radius;
	          endPositionY = 2 * radius;
	          break;
	        default:
	      }
	      var pathString = 'M 50,50 m ' + beginPositionX + ',' + beginPositionY + '\n     a ' + radius + ',' + radius + ' 0 1 1 ' + endPositionX + ',' + -endPositionY + '\n     a ' + radius + ',' + radius + ' 0 1 1 ' + -endPositionX + ',' + endPositionY;
	      var len = Math.PI * 2 * radius;
	      var trailPathStyle = {
	        strokeDasharray: len - gapDegree + 'px ' + len + 'px',
	        strokeDashoffset: '-' + gapDegree / 2 + 'px',
	        transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'
	      };
	      var strokePathStyle = {
	        strokeDasharray: percent / 100 * (len - gapDegree) + 'px ' + len + 'px',
	        strokeDashoffset: '-' + gapDegree / 2 + 'px',
	        transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'
	      };
	      return { pathString: pathString, trailPathStyle: trailPathStyle, strokePathStyle: strokePathStyle };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props2 = this.props,
	          prefixCls = _props2.prefixCls,
	          strokeWidth = _props2.strokeWidth,
	          trailWidth = _props2.trailWidth,
	          strokeColor = _props2.strokeColor,
	          trailColor = _props2.trailColor,
	          strokeLinecap = _props2.strokeLinecap,
	          style = _props2.style,
	          className = _props2.className,
	          restProps = (0, _objectWithoutProperties3['default'])(_props2, ['prefixCls', 'strokeWidth', 'trailWidth', 'strokeColor', 'trailColor', 'strokeLinecap', 'style', 'className']);

	      var _getPathStyles = this.getPathStyles(),
	          pathString = _getPathStyles.pathString,
	          trailPathStyle = _getPathStyles.trailPathStyle,
	          strokePathStyle = _getPathStyles.strokePathStyle;

	      var showCirclePath = restProps.percent > 0;
	      delete restProps.percent;
	      delete restProps.gapDegree;
	      delete restProps.gapPosition;
	      return _react2['default'].createElement(
	        'svg',
	        (0, _extends3['default'])({
	          className: prefixCls + '-circle ' + className,
	          viewBox: '0 0 100 100',
	          style: style
	        }, restProps),
	        _react2['default'].createElement('path', {
	          className: prefixCls + '-circle-trail',
	          d: pathString,
	          stroke: trailColor,
	          strokeWidth: trailWidth || strokeWidth,
	          fillOpacity: '0',
	          style: trailPathStyle
	        }),
	        showCirclePath && _react2['default'].createElement('path', {
	          className: prefixCls + '-circle-path',
	          d: pathString,
	          strokeLinecap: strokeLinecap,
	          stroke: strokeColor,
	          strokeWidth: strokeWidth,
	          fillOpacity: '0',
	          ref: function ref(path) {
	            _this2.path = path;
	          },
	          style: strokePathStyle
	        })
	      );
	    }
	  }]);
	  return Circle;
	}(_react.Component);

	Circle.propTypes = (0, _extends3['default'])({}, _types.propTypes, {
	  gapPosition: _propTypes2['default'].oneOf(['top', 'bottom', 'left', 'right'])
	});

	Circle.defaultProps = (0, _extends3['default'])({}, _types.defaultProps, {
	  gapPosition: 'top'
	});

	exports['default'] = (0, _enhancer2['default'])(Circle);
	module.exports = exports['default'];

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/classCallCheck'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck);
	        global.Metadata = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var Metadata = function Metadata(originalMetadata) {
	        (0, _classCallCheck3.default)(this, Metadata);

	        if (originalMetadata.metadata) {
	            this.title = originalMetadata.metadata.get('dc:title');
	            this.creator = originalMetadata.metadata.get('xap:creatortool');
	            this.producer = originalMetadata.metadata.get('pdf:producer');
	        } else {
	            this.title = originalMetadata.info.Title;
	            this.author = originalMetadata.info.Author;
	            this.creator = originalMetadata.info.Creator;
	            this.producer = originalMetadata.info.Producer;
	        }
	    };

	    exports.default = Metadata;
	});

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require("babel-runtime/helpers/classCallCheck"));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck);
	        global.Page = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2) {
	    "use strict";

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var Page = function Page(options) {
	        (0, _classCallCheck3.default)(this, Page);

	        this.index = options.index;
	        this.items = options.items || []; //PageItem
	    };

	    exports.default = Page;
	});

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(168), __webpack_require__(183), __webpack_require__(241)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('./PageItem.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.possibleConstructorReturn, global.inherits, global.PageItem);
	        global.TextItem = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _possibleConstructorReturn2, _inherits2, _PageItem2) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _PageItem3 = _interopRequireDefault(_PageItem2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var TextItem = function (_PageItem) {
	        (0, _inherits3.default)(TextItem, _PageItem);

	        function TextItem(options) {
	            (0, _classCallCheck3.default)(this, TextItem);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (TextItem.__proto__ || (0, _getPrototypeOf2.default)(TextItem)).call(this, options));

	            _this.x = options.x;
	            _this.y = options.y;
	            _this.width = options.width;
	            _this.height = options.height;
	            _this.text = options.text;
	            _this.font = options.font;

	            _this.lineFormat = options.lineFormat;
	            _this.unopenedFormat = options.unopenedFormat;
	            _this.unclosedFormat = options.unclosedFormat;
	            return _this;
	        }

	        return TextItem;
	    }(_PageItem3.default);

	    exports.default = TextItem;
	});

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(2), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require("babel-runtime/helpers/createClass"), require("babel-runtime/helpers/classCallCheck"));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.createClass, global.classCallCheck);
	        global.PageItem = mod.exports;
	    }
	})(this, function (exports, _createClass2, _classCallCheck2) {
	    "use strict";

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });
	    exports.ParsedElements = undefined;

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var PageItem = function PageItem(options) {
	        (0, _classCallCheck3.default)(this, PageItem);

	        if (this.constructor === PageItem) {
	            throw new TypeError("Can not construct abstract class.");
	        }
	        this.type = options.type;
	        this.annotation = options.annotation;
	        this.parsedElements = options.parsedElements;
	    };

	    exports.default = PageItem;

	    var ParsedElements = exports.ParsedElements = function () {
	        function ParsedElements(options) {
	            (0, _classCallCheck3.default)(this, ParsedElements);

	            this.footnoteLinks = options.footnoteLinks || [];
	            this.footnotes = options.footnotes || [];
	            this.containLinks = options.containLinks;
	            this.formattedWords = options.formattedWords;
	        }

	        (0, _createClass3.default)(ParsedElements, [{
	            key: "add",
	            value: function add(parsedElements) {
	                this.footnoteLinks = this.footnoteLinks.concat(parsedElements.footnoteLinks);
	                this.footnotes = this.footnotes.concat(parsedElements.footnotes);
	                this.containLinks = this.containLinks || parsedElements.containLinks;
	                this.formattedWords += parsedElements.formattedWords;
	            }
	        }]);
	        return ParsedElements;
	    }();
	});

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(243);


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Local dependencies
	 */

	var assign       = __webpack_require__(244).assign;
	var Renderer     = __webpack_require__(246);
	var ParserCore   = __webpack_require__(248);
	var ParserBlock  = __webpack_require__(266);
	var ParserInline = __webpack_require__(281);
	var Ruler        = __webpack_require__(249);

	/**
	 * Preset configs
	 */

	var config = {
	  'default':    __webpack_require__(300),
	  'full':       __webpack_require__(301),
	  'commonmark': __webpack_require__(302)
	};

	/**
	 * The `StateCore` class manages state.
	 *
	 * @param {Object} `instance` Remarkable instance
	 * @param {String} `str` Markdown string
	 * @param {Object} `env`
	 */

	function StateCore(instance, str, env) {
	  this.src = str;
	  this.env = env;
	  this.options = instance.options;
	  this.tokens = [];
	  this.inlineMode = false;

	  this.inline = instance.inline;
	  this.block = instance.block;
	  this.renderer = instance.renderer;
	  this.typographer = instance.typographer;
	}

	/**
	 * The main `Remarkable` class. Create an instance of
	 * `Remarkable` with a `preset` and/or `options`.
	 *
	 * @param {String} `preset` If no preset is given, `default` is used.
	 * @param {Object} `options`
	 */

	function Remarkable(preset, options) {
	  if (typeof preset !== 'string') {
	    options = preset;
	    preset = 'default';
	  }

	  this.inline   = new ParserInline();
	  this.block    = new ParserBlock();
	  this.core     = new ParserCore();
	  this.renderer = new Renderer();
	  this.ruler    = new Ruler();

	  this.options  = {};
	  this.configure(config[preset]);
	  this.set(options || {});
	}

	/**
	 * Set options as an alternative to passing them
	 * to the constructor.
	 *
	 * ```js
	 * md.set({typographer: true});
	 * ```
	 * @param {Object} `options`
	 * @api public
	 */

	Remarkable.prototype.set = function (options) {
	  assign(this.options, options);
	};

	/**
	 * Batch loader for components rules states, and options
	 *
	 * @param  {Object} `presets`
	 */

	Remarkable.prototype.configure = function (presets) {
	  var self = this;

	  if (!presets) { throw new Error('Wrong `remarkable` preset, check name/content'); }
	  if (presets.options) { self.set(presets.options); }
	  if (presets.components) {
	    Object.keys(presets.components).forEach(function (name) {
	      if (presets.components[name].rules) {
	        self[name].ruler.enable(presets.components[name].rules, true);
	      }
	    });
	  }
	};

	/**
	 * Use a plugin.
	 *
	 * ```js
	 * var md = new Remarkable();
	 *
	 * md.use(plugin1)
	 *   .use(plugin2, opts)
	 *   .use(plugin3);
	 * ```
	 *
	 * @param  {Function} `plugin`
	 * @param  {Object} `options`
	 * @return {Object} `Remarkable` for chaining
	 */

	Remarkable.prototype.use = function (plugin, options) {
	  plugin(this, options);
	  return this;
	};


	/**
	 * Parse the input `string` and return a tokens array.
	 * Modifies `env` with definitions data.
	 *
	 * @param  {String} `string`
	 * @param  {Object} `env`
	 * @return {Array} Array of tokens
	 */

	Remarkable.prototype.parse = function (str, env) {
	  var state = new StateCore(this, str, env);
	  this.core.process(state);
	  return state.tokens;
	};

	/**
	 * The main `.render()` method that does all the magic :)
	 *
	 * @param  {String} `string`
	 * @param  {Object} `env`
	 * @return {String} Rendered HTML.
	 */

	Remarkable.prototype.render = function (str, env) {
	  env = env || {};
	  return this.renderer.render(this.parse(str, env), this.options, env);
	};

	/**
	 * Parse the given content `string` as a single string.
	 *
	 * @param  {String} `string`
	 * @param  {Object} `env`
	 * @return {Array} Array of tokens
	 */

	Remarkable.prototype.parseInline = function (str, env) {
	  var state = new StateCore(this, str, env);
	  state.inlineMode = true;
	  this.core.process(state);
	  return state.tokens;
	};

	/**
	 * Render a single content `string`, without wrapping it
	 * to paragraphs
	 *
	 * @param  {String} `str`
	 * @param  {Object} `env`
	 * @return {String}
	 */

	Remarkable.prototype.renderInline = function (str, env) {
	  env = env || {};
	  return this.renderer.render(this.parseInline(str, env), this.options, env);
	};

	/**
	 * Expose `Remarkable`
	 */

	module.exports = Remarkable;

	/**
	 * Expose `utils`, Useful helper functions for custom
	 * rendering.
	 */

	module.exports.utils = __webpack_require__(244);


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Utility functions
	 */

	function typeOf(obj) {
	  return Object.prototype.toString.call(obj);
	}

	function isString(obj) {
	  return typeOf(obj) === '[object String]';
	}

	var hasOwn = Object.prototype.hasOwnProperty;

	function has(object, key) {
	  return object
	    ? hasOwn.call(object, key)
	    : false;
	}

	// Extend objects
	//
	function assign(obj /*from1, from2, from3, ...*/) {
	  var sources = [].slice.call(arguments, 1);

	  sources.forEach(function (source) {
	    if (!source) { return; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be object');
	    }

	    Object.keys(source).forEach(function (key) {
	      obj[key] = source[key];
	    });
	  });

	  return obj;
	}

	////////////////////////////////////////////////////////////////////////////////

	var UNESCAPE_MD_RE = /\\([\\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;

	function unescapeMd(str) {
	  if (str.indexOf('\\') < 0) { return str; }
	  return str.replace(UNESCAPE_MD_RE, '$1');
	}

	////////////////////////////////////////////////////////////////////////////////

	function isValidEntityCode(c) {
	  /*eslint no-bitwise:0*/
	  // broken sequence
	  if (c >= 0xD800 && c <= 0xDFFF) { return false; }
	  // never used
	  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }
	  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }
	  // control codes
	  if (c >= 0x00 && c <= 0x08) { return false; }
	  if (c === 0x0B) { return false; }
	  if (c >= 0x0E && c <= 0x1F) { return false; }
	  if (c >= 0x7F && c <= 0x9F) { return false; }
	  // out of range
	  if (c > 0x10FFFF) { return false; }
	  return true;
	}

	function fromCodePoint(c) {
	  /*eslint no-bitwise:0*/
	  if (c > 0xffff) {
	    c -= 0x10000;
	    var surrogate1 = 0xd800 + (c >> 10),
	        surrogate2 = 0xdc00 + (c & 0x3ff);

	    return String.fromCharCode(surrogate1, surrogate2);
	  }
	  return String.fromCharCode(c);
	}

	var NAMED_ENTITY_RE   = /&([a-z#][a-z0-9]{1,31});/gi;
	var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
	var entities = __webpack_require__(245);

	function replaceEntityPattern(match, name) {
	  var code = 0;

	  if (has(entities, name)) {
	    return entities[name];
	  } else if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
	    code = name[1].toLowerCase() === 'x' ?
	      parseInt(name.slice(2), 16)
	    :
	      parseInt(name.slice(1), 10);
	    if (isValidEntityCode(code)) {
	      return fromCodePoint(code);
	    }
	  }
	  return match;
	}

	function replaceEntities(str) {
	  if (str.indexOf('&') < 0) { return str; }

	  return str.replace(NAMED_ENTITY_RE, replaceEntityPattern);
	}

	////////////////////////////////////////////////////////////////////////////////

	var HTML_ESCAPE_TEST_RE = /[&<>"]/;
	var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
	var HTML_REPLACEMENTS = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};

	function replaceUnsafeChar(ch) {
	  return HTML_REPLACEMENTS[ch];
	}

	function escapeHtml(str) {
	  if (HTML_ESCAPE_TEST_RE.test(str)) {
	    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
	  }
	  return str;
	}

	////////////////////////////////////////////////////////////////////////////////

	exports.assign            = assign;
	exports.isString          = isString;
	exports.has               = has;
	exports.unescapeMd        = unescapeMd;
	exports.isValidEntityCode = isValidEntityCode;
	exports.fromCodePoint     = fromCodePoint;
	exports.replaceEntities   = replaceEntities;
	exports.escapeHtml        = escapeHtml;


/***/ }),
/* 245 */
/***/ (function(module, exports) {

	// List of valid entities
	//
	// Generate with ./support/entities.js script
	//
	'use strict';

	/*eslint quotes:0*/
	module.exports = {
	  "Aacute":"\u00C1",
	  "aacute":"\u00E1",
	  "Abreve":"\u0102",
	  "abreve":"\u0103",
	  "ac":"\u223E",
	  "acd":"\u223F",
	  "acE":"\u223E\u0333",
	  "Acirc":"\u00C2",
	  "acirc":"\u00E2",
	  "acute":"\u00B4",
	  "Acy":"\u0410",
	  "acy":"\u0430",
	  "AElig":"\u00C6",
	  "aelig":"\u00E6",
	  "af":"\u2061",
	  "Afr":"\uD835\uDD04",
	  "afr":"\uD835\uDD1E",
	  "Agrave":"\u00C0",
	  "agrave":"\u00E0",
	  "alefsym":"\u2135",
	  "aleph":"\u2135",
	  "Alpha":"\u0391",
	  "alpha":"\u03B1",
	  "Amacr":"\u0100",
	  "amacr":"\u0101",
	  "amalg":"\u2A3F",
	  "AMP":"\u0026",
	  "amp":"\u0026",
	  "And":"\u2A53",
	  "and":"\u2227",
	  "andand":"\u2A55",
	  "andd":"\u2A5C",
	  "andslope":"\u2A58",
	  "andv":"\u2A5A",
	  "ang":"\u2220",
	  "ange":"\u29A4",
	  "angle":"\u2220",
	  "angmsd":"\u2221",
	  "angmsdaa":"\u29A8",
	  "angmsdab":"\u29A9",
	  "angmsdac":"\u29AA",
	  "angmsdad":"\u29AB",
	  "angmsdae":"\u29AC",
	  "angmsdaf":"\u29AD",
	  "angmsdag":"\u29AE",
	  "angmsdah":"\u29AF",
	  "angrt":"\u221F",
	  "angrtvb":"\u22BE",
	  "angrtvbd":"\u299D",
	  "angsph":"\u2222",
	  "angst":"\u00C5",
	  "angzarr":"\u237C",
	  "Aogon":"\u0104",
	  "aogon":"\u0105",
	  "Aopf":"\uD835\uDD38",
	  "aopf":"\uD835\uDD52",
	  "ap":"\u2248",
	  "apacir":"\u2A6F",
	  "apE":"\u2A70",
	  "ape":"\u224A",
	  "apid":"\u224B",
	  "apos":"\u0027",
	  "ApplyFunction":"\u2061",
	  "approx":"\u2248",
	  "approxeq":"\u224A",
	  "Aring":"\u00C5",
	  "aring":"\u00E5",
	  "Ascr":"\uD835\uDC9C",
	  "ascr":"\uD835\uDCB6",
	  "Assign":"\u2254",
	  "ast":"\u002A",
	  "asymp":"\u2248",
	  "asympeq":"\u224D",
	  "Atilde":"\u00C3",
	  "atilde":"\u00E3",
	  "Auml":"\u00C4",
	  "auml":"\u00E4",
	  "awconint":"\u2233",
	  "awint":"\u2A11",
	  "backcong":"\u224C",
	  "backepsilon":"\u03F6",
	  "backprime":"\u2035",
	  "backsim":"\u223D",
	  "backsimeq":"\u22CD",
	  "Backslash":"\u2216",
	  "Barv":"\u2AE7",
	  "barvee":"\u22BD",
	  "Barwed":"\u2306",
	  "barwed":"\u2305",
	  "barwedge":"\u2305",
	  "bbrk":"\u23B5",
	  "bbrktbrk":"\u23B6",
	  "bcong":"\u224C",
	  "Bcy":"\u0411",
	  "bcy":"\u0431",
	  "bdquo":"\u201E",
	  "becaus":"\u2235",
	  "Because":"\u2235",
	  "because":"\u2235",
	  "bemptyv":"\u29B0",
	  "bepsi":"\u03F6",
	  "bernou":"\u212C",
	  "Bernoullis":"\u212C",
	  "Beta":"\u0392",
	  "beta":"\u03B2",
	  "beth":"\u2136",
	  "between":"\u226C",
	  "Bfr":"\uD835\uDD05",
	  "bfr":"\uD835\uDD1F",
	  "bigcap":"\u22C2",
	  "bigcirc":"\u25EF",
	  "bigcup":"\u22C3",
	  "bigodot":"\u2A00",
	  "bigoplus":"\u2A01",
	  "bigotimes":"\u2A02",
	  "bigsqcup":"\u2A06",
	  "bigstar":"\u2605",
	  "bigtriangledown":"\u25BD",
	  "bigtriangleup":"\u25B3",
	  "biguplus":"\u2A04",
	  "bigvee":"\u22C1",
	  "bigwedge":"\u22C0",
	  "bkarow":"\u290D",
	  "blacklozenge":"\u29EB",
	  "blacksquare":"\u25AA",
	  "blacktriangle":"\u25B4",
	  "blacktriangledown":"\u25BE",
	  "blacktriangleleft":"\u25C2",
	  "blacktriangleright":"\u25B8",
	  "blank":"\u2423",
	  "blk12":"\u2592",
	  "blk14":"\u2591",
	  "blk34":"\u2593",
	  "block":"\u2588",
	  "bne":"\u003D\u20E5",
	  "bnequiv":"\u2261\u20E5",
	  "bNot":"\u2AED",
	  "bnot":"\u2310",
	  "Bopf":"\uD835\uDD39",
	  "bopf":"\uD835\uDD53",
	  "bot":"\u22A5",
	  "bottom":"\u22A5",
	  "bowtie":"\u22C8",
	  "boxbox":"\u29C9",
	  "boxDL":"\u2557",
	  "boxDl":"\u2556",
	  "boxdL":"\u2555",
	  "boxdl":"\u2510",
	  "boxDR":"\u2554",
	  "boxDr":"\u2553",
	  "boxdR":"\u2552",
	  "boxdr":"\u250C",
	  "boxH":"\u2550",
	  "boxh":"\u2500",
	  "boxHD":"\u2566",
	  "boxHd":"\u2564",
	  "boxhD":"\u2565",
	  "boxhd":"\u252C",
	  "boxHU":"\u2569",
	  "boxHu":"\u2567",
	  "boxhU":"\u2568",
	  "boxhu":"\u2534",
	  "boxminus":"\u229F",
	  "boxplus":"\u229E",
	  "boxtimes":"\u22A0",
	  "boxUL":"\u255D",
	  "boxUl":"\u255C",
	  "boxuL":"\u255B",
	  "boxul":"\u2518",
	  "boxUR":"\u255A",
	  "boxUr":"\u2559",
	  "boxuR":"\u2558",
	  "boxur":"\u2514",
	  "boxV":"\u2551",
	  "boxv":"\u2502",
	  "boxVH":"\u256C",
	  "boxVh":"\u256B",
	  "boxvH":"\u256A",
	  "boxvh":"\u253C",
	  "boxVL":"\u2563",
	  "boxVl":"\u2562",
	  "boxvL":"\u2561",
	  "boxvl":"\u2524",
	  "boxVR":"\u2560",
	  "boxVr":"\u255F",
	  "boxvR":"\u255E",
	  "boxvr":"\u251C",
	  "bprime":"\u2035",
	  "Breve":"\u02D8",
	  "breve":"\u02D8",
	  "brvbar":"\u00A6",
	  "Bscr":"\u212C",
	  "bscr":"\uD835\uDCB7",
	  "bsemi":"\u204F",
	  "bsim":"\u223D",
	  "bsime":"\u22CD",
	  "bsol":"\u005C",
	  "bsolb":"\u29C5",
	  "bsolhsub":"\u27C8",
	  "bull":"\u2022",
	  "bullet":"\u2022",
	  "bump":"\u224E",
	  "bumpE":"\u2AAE",
	  "bumpe":"\u224F",
	  "Bumpeq":"\u224E",
	  "bumpeq":"\u224F",
	  "Cacute":"\u0106",
	  "cacute":"\u0107",
	  "Cap":"\u22D2",
	  "cap":"\u2229",
	  "capand":"\u2A44",
	  "capbrcup":"\u2A49",
	  "capcap":"\u2A4B",
	  "capcup":"\u2A47",
	  "capdot":"\u2A40",
	  "CapitalDifferentialD":"\u2145",
	  "caps":"\u2229\uFE00",
	  "caret":"\u2041",
	  "caron":"\u02C7",
	  "Cayleys":"\u212D",
	  "ccaps":"\u2A4D",
	  "Ccaron":"\u010C",
	  "ccaron":"\u010D",
	  "Ccedil":"\u00C7",
	  "ccedil":"\u00E7",
	  "Ccirc":"\u0108",
	  "ccirc":"\u0109",
	  "Cconint":"\u2230",
	  "ccups":"\u2A4C",
	  "ccupssm":"\u2A50",
	  "Cdot":"\u010A",
	  "cdot":"\u010B",
	  "cedil":"\u00B8",
	  "Cedilla":"\u00B8",
	  "cemptyv":"\u29B2",
	  "cent":"\u00A2",
	  "CenterDot":"\u00B7",
	  "centerdot":"\u00B7",
	  "Cfr":"\u212D",
	  "cfr":"\uD835\uDD20",
	  "CHcy":"\u0427",
	  "chcy":"\u0447",
	  "check":"\u2713",
	  "checkmark":"\u2713",
	  "Chi":"\u03A7",
	  "chi":"\u03C7",
	  "cir":"\u25CB",
	  "circ":"\u02C6",
	  "circeq":"\u2257",
	  "circlearrowleft":"\u21BA",
	  "circlearrowright":"\u21BB",
	  "circledast":"\u229B",
	  "circledcirc":"\u229A",
	  "circleddash":"\u229D",
	  "CircleDot":"\u2299",
	  "circledR":"\u00AE",
	  "circledS":"\u24C8",
	  "CircleMinus":"\u2296",
	  "CirclePlus":"\u2295",
	  "CircleTimes":"\u2297",
	  "cirE":"\u29C3",
	  "cire":"\u2257",
	  "cirfnint":"\u2A10",
	  "cirmid":"\u2AEF",
	  "cirscir":"\u29C2",
	  "ClockwiseContourIntegral":"\u2232",
	  "CloseCurlyDoubleQuote":"\u201D",
	  "CloseCurlyQuote":"\u2019",
	  "clubs":"\u2663",
	  "clubsuit":"\u2663",
	  "Colon":"\u2237",
	  "colon":"\u003A",
	  "Colone":"\u2A74",
	  "colone":"\u2254",
	  "coloneq":"\u2254",
	  "comma":"\u002C",
	  "commat":"\u0040",
	  "comp":"\u2201",
	  "compfn":"\u2218",
	  "complement":"\u2201",
	  "complexes":"\u2102",
	  "cong":"\u2245",
	  "congdot":"\u2A6D",
	  "Congruent":"\u2261",
	  "Conint":"\u222F",
	  "conint":"\u222E",
	  "ContourIntegral":"\u222E",
	  "Copf":"\u2102",
	  "copf":"\uD835\uDD54",
	  "coprod":"\u2210",
	  "Coproduct":"\u2210",
	  "COPY":"\u00A9",
	  "copy":"\u00A9",
	  "copysr":"\u2117",
	  "CounterClockwiseContourIntegral":"\u2233",
	  "crarr":"\u21B5",
	  "Cross":"\u2A2F",
	  "cross":"\u2717",
	  "Cscr":"\uD835\uDC9E",
	  "cscr":"\uD835\uDCB8",
	  "csub":"\u2ACF",
	  "csube":"\u2AD1",
	  "csup":"\u2AD0",
	  "csupe":"\u2AD2",
	  "ctdot":"\u22EF",
	  "cudarrl":"\u2938",
	  "cudarrr":"\u2935",
	  "cuepr":"\u22DE",
	  "cuesc":"\u22DF",
	  "cularr":"\u21B6",
	  "cularrp":"\u293D",
	  "Cup":"\u22D3",
	  "cup":"\u222A",
	  "cupbrcap":"\u2A48",
	  "CupCap":"\u224D",
	  "cupcap":"\u2A46",
	  "cupcup":"\u2A4A",
	  "cupdot":"\u228D",
	  "cupor":"\u2A45",
	  "cups":"\u222A\uFE00",
	  "curarr":"\u21B7",
	  "curarrm":"\u293C",
	  "curlyeqprec":"\u22DE",
	  "curlyeqsucc":"\u22DF",
	  "curlyvee":"\u22CE",
	  "curlywedge":"\u22CF",
	  "curren":"\u00A4",
	  "curvearrowleft":"\u21B6",
	  "curvearrowright":"\u21B7",
	  "cuvee":"\u22CE",
	  "cuwed":"\u22CF",
	  "cwconint":"\u2232",
	  "cwint":"\u2231",
	  "cylcty":"\u232D",
	  "Dagger":"\u2021",
	  "dagger":"\u2020",
	  "daleth":"\u2138",
	  "Darr":"\u21A1",
	  "dArr":"\u21D3",
	  "darr":"\u2193",
	  "dash":"\u2010",
	  "Dashv":"\u2AE4",
	  "dashv":"\u22A3",
	  "dbkarow":"\u290F",
	  "dblac":"\u02DD",
	  "Dcaron":"\u010E",
	  "dcaron":"\u010F",
	  "Dcy":"\u0414",
	  "dcy":"\u0434",
	  "DD":"\u2145",
	  "dd":"\u2146",
	  "ddagger":"\u2021",
	  "ddarr":"\u21CA",
	  "DDotrahd":"\u2911",
	  "ddotseq":"\u2A77",
	  "deg":"\u00B0",
	  "Del":"\u2207",
	  "Delta":"\u0394",
	  "delta":"\u03B4",
	  "demptyv":"\u29B1",
	  "dfisht":"\u297F",
	  "Dfr":"\uD835\uDD07",
	  "dfr":"\uD835\uDD21",
	  "dHar":"\u2965",
	  "dharl":"\u21C3",
	  "dharr":"\u21C2",
	  "DiacriticalAcute":"\u00B4",
	  "DiacriticalDot":"\u02D9",
	  "DiacriticalDoubleAcute":"\u02DD",
	  "DiacriticalGrave":"\u0060",
	  "DiacriticalTilde":"\u02DC",
	  "diam":"\u22C4",
	  "Diamond":"\u22C4",
	  "diamond":"\u22C4",
	  "diamondsuit":"\u2666",
	  "diams":"\u2666",
	  "die":"\u00A8",
	  "DifferentialD":"\u2146",
	  "digamma":"\u03DD",
	  "disin":"\u22F2",
	  "div":"\u00F7",
	  "divide":"\u00F7",
	  "divideontimes":"\u22C7",
	  "divonx":"\u22C7",
	  "DJcy":"\u0402",
	  "djcy":"\u0452",
	  "dlcorn":"\u231E",
	  "dlcrop":"\u230D",
	  "dollar":"\u0024",
	  "Dopf":"\uD835\uDD3B",
	  "dopf":"\uD835\uDD55",
	  "Dot":"\u00A8",
	  "dot":"\u02D9",
	  "DotDot":"\u20DC",
	  "doteq":"\u2250",
	  "doteqdot":"\u2251",
	  "DotEqual":"\u2250",
	  "dotminus":"\u2238",
	  "dotplus":"\u2214",
	  "dotsquare":"\u22A1",
	  "doublebarwedge":"\u2306",
	  "DoubleContourIntegral":"\u222F",
	  "DoubleDot":"\u00A8",
	  "DoubleDownArrow":"\u21D3",
	  "DoubleLeftArrow":"\u21D0",
	  "DoubleLeftRightArrow":"\u21D4",
	  "DoubleLeftTee":"\u2AE4",
	  "DoubleLongLeftArrow":"\u27F8",
	  "DoubleLongLeftRightArrow":"\u27FA",
	  "DoubleLongRightArrow":"\u27F9",
	  "DoubleRightArrow":"\u21D2",
	  "DoubleRightTee":"\u22A8",
	  "DoubleUpArrow":"\u21D1",
	  "DoubleUpDownArrow":"\u21D5",
	  "DoubleVerticalBar":"\u2225",
	  "DownArrow":"\u2193",
	  "Downarrow":"\u21D3",
	  "downarrow":"\u2193",
	  "DownArrowBar":"\u2913",
	  "DownArrowUpArrow":"\u21F5",
	  "DownBreve":"\u0311",
	  "downdownarrows":"\u21CA",
	  "downharpoonleft":"\u21C3",
	  "downharpoonright":"\u21C2",
	  "DownLeftRightVector":"\u2950",
	  "DownLeftTeeVector":"\u295E",
	  "DownLeftVector":"\u21BD",
	  "DownLeftVectorBar":"\u2956",
	  "DownRightTeeVector":"\u295F",
	  "DownRightVector":"\u21C1",
	  "DownRightVectorBar":"\u2957",
	  "DownTee":"\u22A4",
	  "DownTeeArrow":"\u21A7",
	  "drbkarow":"\u2910",
	  "drcorn":"\u231F",
	  "drcrop":"\u230C",
	  "Dscr":"\uD835\uDC9F",
	  "dscr":"\uD835\uDCB9",
	  "DScy":"\u0405",
	  "dscy":"\u0455",
	  "dsol":"\u29F6",
	  "Dstrok":"\u0110",
	  "dstrok":"\u0111",
	  "dtdot":"\u22F1",
	  "dtri":"\u25BF",
	  "dtrif":"\u25BE",
	  "duarr":"\u21F5",
	  "duhar":"\u296F",
	  "dwangle":"\u29A6",
	  "DZcy":"\u040F",
	  "dzcy":"\u045F",
	  "dzigrarr":"\u27FF",
	  "Eacute":"\u00C9",
	  "eacute":"\u00E9",
	  "easter":"\u2A6E",
	  "Ecaron":"\u011A",
	  "ecaron":"\u011B",
	  "ecir":"\u2256",
	  "Ecirc":"\u00CA",
	  "ecirc":"\u00EA",
	  "ecolon":"\u2255",
	  "Ecy":"\u042D",
	  "ecy":"\u044D",
	  "eDDot":"\u2A77",
	  "Edot":"\u0116",
	  "eDot":"\u2251",
	  "edot":"\u0117",
	  "ee":"\u2147",
	  "efDot":"\u2252",
	  "Efr":"\uD835\uDD08",
	  "efr":"\uD835\uDD22",
	  "eg":"\u2A9A",
	  "Egrave":"\u00C8",
	  "egrave":"\u00E8",
	  "egs":"\u2A96",
	  "egsdot":"\u2A98",
	  "el":"\u2A99",
	  "Element":"\u2208",
	  "elinters":"\u23E7",
	  "ell":"\u2113",
	  "els":"\u2A95",
	  "elsdot":"\u2A97",
	  "Emacr":"\u0112",
	  "emacr":"\u0113",
	  "empty":"\u2205",
	  "emptyset":"\u2205",
	  "EmptySmallSquare":"\u25FB",
	  "emptyv":"\u2205",
	  "EmptyVerySmallSquare":"\u25AB",
	  "emsp":"\u2003",
	  "emsp13":"\u2004",
	  "emsp14":"\u2005",
	  "ENG":"\u014A",
	  "eng":"\u014B",
	  "ensp":"\u2002",
	  "Eogon":"\u0118",
	  "eogon":"\u0119",
	  "Eopf":"\uD835\uDD3C",
	  "eopf":"\uD835\uDD56",
	  "epar":"\u22D5",
	  "eparsl":"\u29E3",
	  "eplus":"\u2A71",
	  "epsi":"\u03B5",
	  "Epsilon":"\u0395",
	  "epsilon":"\u03B5",
	  "epsiv":"\u03F5",
	  "eqcirc":"\u2256",
	  "eqcolon":"\u2255",
	  "eqsim":"\u2242",
	  "eqslantgtr":"\u2A96",
	  "eqslantless":"\u2A95",
	  "Equal":"\u2A75",
	  "equals":"\u003D",
	  "EqualTilde":"\u2242",
	  "equest":"\u225F",
	  "Equilibrium":"\u21CC",
	  "equiv":"\u2261",
	  "equivDD":"\u2A78",
	  "eqvparsl":"\u29E5",
	  "erarr":"\u2971",
	  "erDot":"\u2253",
	  "Escr":"\u2130",
	  "escr":"\u212F",
	  "esdot":"\u2250",
	  "Esim":"\u2A73",
	  "esim":"\u2242",
	  "Eta":"\u0397",
	  "eta":"\u03B7",
	  "ETH":"\u00D0",
	  "eth":"\u00F0",
	  "Euml":"\u00CB",
	  "euml":"\u00EB",
	  "euro":"\u20AC",
	  "excl":"\u0021",
	  "exist":"\u2203",
	  "Exists":"\u2203",
	  "expectation":"\u2130",
	  "ExponentialE":"\u2147",
	  "exponentiale":"\u2147",
	  "fallingdotseq":"\u2252",
	  "Fcy":"\u0424",
	  "fcy":"\u0444",
	  "female":"\u2640",
	  "ffilig":"\uFB03",
	  "fflig":"\uFB00",
	  "ffllig":"\uFB04",
	  "Ffr":"\uD835\uDD09",
	  "ffr":"\uD835\uDD23",
	  "filig":"\uFB01",
	  "FilledSmallSquare":"\u25FC",
	  "FilledVerySmallSquare":"\u25AA",
	  "fjlig":"\u0066\u006A",
	  "flat":"\u266D",
	  "fllig":"\uFB02",
	  "fltns":"\u25B1",
	  "fnof":"\u0192",
	  "Fopf":"\uD835\uDD3D",
	  "fopf":"\uD835\uDD57",
	  "ForAll":"\u2200",
	  "forall":"\u2200",
	  "fork":"\u22D4",
	  "forkv":"\u2AD9",
	  "Fouriertrf":"\u2131",
	  "fpartint":"\u2A0D",
	  "frac12":"\u00BD",
	  "frac13":"\u2153",
	  "frac14":"\u00BC",
	  "frac15":"\u2155",
	  "frac16":"\u2159",
	  "frac18":"\u215B",
	  "frac23":"\u2154",
	  "frac25":"\u2156",
	  "frac34":"\u00BE",
	  "frac35":"\u2157",
	  "frac38":"\u215C",
	  "frac45":"\u2158",
	  "frac56":"\u215A",
	  "frac58":"\u215D",
	  "frac78":"\u215E",
	  "frasl":"\u2044",
	  "frown":"\u2322",
	  "Fscr":"\u2131",
	  "fscr":"\uD835\uDCBB",
	  "gacute":"\u01F5",
	  "Gamma":"\u0393",
	  "gamma":"\u03B3",
	  "Gammad":"\u03DC",
	  "gammad":"\u03DD",
	  "gap":"\u2A86",
	  "Gbreve":"\u011E",
	  "gbreve":"\u011F",
	  "Gcedil":"\u0122",
	  "Gcirc":"\u011C",
	  "gcirc":"\u011D",
	  "Gcy":"\u0413",
	  "gcy":"\u0433",
	  "Gdot":"\u0120",
	  "gdot":"\u0121",
	  "gE":"\u2267",
	  "ge":"\u2265",
	  "gEl":"\u2A8C",
	  "gel":"\u22DB",
	  "geq":"\u2265",
	  "geqq":"\u2267",
	  "geqslant":"\u2A7E",
	  "ges":"\u2A7E",
	  "gescc":"\u2AA9",
	  "gesdot":"\u2A80",
	  "gesdoto":"\u2A82",
	  "gesdotol":"\u2A84",
	  "gesl":"\u22DB\uFE00",
	  "gesles":"\u2A94",
	  "Gfr":"\uD835\uDD0A",
	  "gfr":"\uD835\uDD24",
	  "Gg":"\u22D9",
	  "gg":"\u226B",
	  "ggg":"\u22D9",
	  "gimel":"\u2137",
	  "GJcy":"\u0403",
	  "gjcy":"\u0453",
	  "gl":"\u2277",
	  "gla":"\u2AA5",
	  "glE":"\u2A92",
	  "glj":"\u2AA4",
	  "gnap":"\u2A8A",
	  "gnapprox":"\u2A8A",
	  "gnE":"\u2269",
	  "gne":"\u2A88",
	  "gneq":"\u2A88",
	  "gneqq":"\u2269",
	  "gnsim":"\u22E7",
	  "Gopf":"\uD835\uDD3E",
	  "gopf":"\uD835\uDD58",
	  "grave":"\u0060",
	  "GreaterEqual":"\u2265",
	  "GreaterEqualLess":"\u22DB",
	  "GreaterFullEqual":"\u2267",
	  "GreaterGreater":"\u2AA2",
	  "GreaterLess":"\u2277",
	  "GreaterSlantEqual":"\u2A7E",
	  "GreaterTilde":"\u2273",
	  "Gscr":"\uD835\uDCA2",
	  "gscr":"\u210A",
	  "gsim":"\u2273",
	  "gsime":"\u2A8E",
	  "gsiml":"\u2A90",
	  "GT":"\u003E",
	  "Gt":"\u226B",
	  "gt":"\u003E",
	  "gtcc":"\u2AA7",
	  "gtcir":"\u2A7A",
	  "gtdot":"\u22D7",
	  "gtlPar":"\u2995",
	  "gtquest":"\u2A7C",
	  "gtrapprox":"\u2A86",
	  "gtrarr":"\u2978",
	  "gtrdot":"\u22D7",
	  "gtreqless":"\u22DB",
	  "gtreqqless":"\u2A8C",
	  "gtrless":"\u2277",
	  "gtrsim":"\u2273",
	  "gvertneqq":"\u2269\uFE00",
	  "gvnE":"\u2269\uFE00",
	  "Hacek":"\u02C7",
	  "hairsp":"\u200A",
	  "half":"\u00BD",
	  "hamilt":"\u210B",
	  "HARDcy":"\u042A",
	  "hardcy":"\u044A",
	  "hArr":"\u21D4",
	  "harr":"\u2194",
	  "harrcir":"\u2948",
	  "harrw":"\u21AD",
	  "Hat":"\u005E",
	  "hbar":"\u210F",
	  "Hcirc":"\u0124",
	  "hcirc":"\u0125",
	  "hearts":"\u2665",
	  "heartsuit":"\u2665",
	  "hellip":"\u2026",
	  "hercon":"\u22B9",
	  "Hfr":"\u210C",
	  "hfr":"\uD835\uDD25",
	  "HilbertSpace":"\u210B",
	  "hksearow":"\u2925",
	  "hkswarow":"\u2926",
	  "hoarr":"\u21FF",
	  "homtht":"\u223B",
	  "hookleftarrow":"\u21A9",
	  "hookrightarrow":"\u21AA",
	  "Hopf":"\u210D",
	  "hopf":"\uD835\uDD59",
	  "horbar":"\u2015",
	  "HorizontalLine":"\u2500",
	  "Hscr":"\u210B",
	  "hscr":"\uD835\uDCBD",
	  "hslash":"\u210F",
	  "Hstrok":"\u0126",
	  "hstrok":"\u0127",
	  "HumpDownHump":"\u224E",
	  "HumpEqual":"\u224F",
	  "hybull":"\u2043",
	  "hyphen":"\u2010",
	  "Iacute":"\u00CD",
	  "iacute":"\u00ED",
	  "ic":"\u2063",
	  "Icirc":"\u00CE",
	  "icirc":"\u00EE",
	  "Icy":"\u0418",
	  "icy":"\u0438",
	  "Idot":"\u0130",
	  "IEcy":"\u0415",
	  "iecy":"\u0435",
	  "iexcl":"\u00A1",
	  "iff":"\u21D4",
	  "Ifr":"\u2111",
	  "ifr":"\uD835\uDD26",
	  "Igrave":"\u00CC",
	  "igrave":"\u00EC",
	  "ii":"\u2148",
	  "iiiint":"\u2A0C",
	  "iiint":"\u222D",
	  "iinfin":"\u29DC",
	  "iiota":"\u2129",
	  "IJlig":"\u0132",
	  "ijlig":"\u0133",
	  "Im":"\u2111",
	  "Imacr":"\u012A",
	  "imacr":"\u012B",
	  "image":"\u2111",
	  "ImaginaryI":"\u2148",
	  "imagline":"\u2110",
	  "imagpart":"\u2111",
	  "imath":"\u0131",
	  "imof":"\u22B7",
	  "imped":"\u01B5",
	  "Implies":"\u21D2",
	  "in":"\u2208",
	  "incare":"\u2105",
	  "infin":"\u221E",
	  "infintie":"\u29DD",
	  "inodot":"\u0131",
	  "Int":"\u222C",
	  "int":"\u222B",
	  "intcal":"\u22BA",
	  "integers":"\u2124",
	  "Integral":"\u222B",
	  "intercal":"\u22BA",
	  "Intersection":"\u22C2",
	  "intlarhk":"\u2A17",
	  "intprod":"\u2A3C",
	  "InvisibleComma":"\u2063",
	  "InvisibleTimes":"\u2062",
	  "IOcy":"\u0401",
	  "iocy":"\u0451",
	  "Iogon":"\u012E",
	  "iogon":"\u012F",
	  "Iopf":"\uD835\uDD40",
	  "iopf":"\uD835\uDD5A",
	  "Iota":"\u0399",
	  "iota":"\u03B9",
	  "iprod":"\u2A3C",
	  "iquest":"\u00BF",
	  "Iscr":"\u2110",
	  "iscr":"\uD835\uDCBE",
	  "isin":"\u2208",
	  "isindot":"\u22F5",
	  "isinE":"\u22F9",
	  "isins":"\u22F4",
	  "isinsv":"\u22F3",
	  "isinv":"\u2208",
	  "it":"\u2062",
	  "Itilde":"\u0128",
	  "itilde":"\u0129",
	  "Iukcy":"\u0406",
	  "iukcy":"\u0456",
	  "Iuml":"\u00CF",
	  "iuml":"\u00EF",
	  "Jcirc":"\u0134",
	  "jcirc":"\u0135",
	  "Jcy":"\u0419",
	  "jcy":"\u0439",
	  "Jfr":"\uD835\uDD0D",
	  "jfr":"\uD835\uDD27",
	  "jmath":"\u0237",
	  "Jopf":"\uD835\uDD41",
	  "jopf":"\uD835\uDD5B",
	  "Jscr":"\uD835\uDCA5",
	  "jscr":"\uD835\uDCBF",
	  "Jsercy":"\u0408",
	  "jsercy":"\u0458",
	  "Jukcy":"\u0404",
	  "jukcy":"\u0454",
	  "Kappa":"\u039A",
	  "kappa":"\u03BA",
	  "kappav":"\u03F0",
	  "Kcedil":"\u0136",
	  "kcedil":"\u0137",
	  "Kcy":"\u041A",
	  "kcy":"\u043A",
	  "Kfr":"\uD835\uDD0E",
	  "kfr":"\uD835\uDD28",
	  "kgreen":"\u0138",
	  "KHcy":"\u0425",
	  "khcy":"\u0445",
	  "KJcy":"\u040C",
	  "kjcy":"\u045C",
	  "Kopf":"\uD835\uDD42",
	  "kopf":"\uD835\uDD5C",
	  "Kscr":"\uD835\uDCA6",
	  "kscr":"\uD835\uDCC0",
	  "lAarr":"\u21DA",
	  "Lacute":"\u0139",
	  "lacute":"\u013A",
	  "laemptyv":"\u29B4",
	  "lagran":"\u2112",
	  "Lambda":"\u039B",
	  "lambda":"\u03BB",
	  "Lang":"\u27EA",
	  "lang":"\u27E8",
	  "langd":"\u2991",
	  "langle":"\u27E8",
	  "lap":"\u2A85",
	  "Laplacetrf":"\u2112",
	  "laquo":"\u00AB",
	  "Larr":"\u219E",
	  "lArr":"\u21D0",
	  "larr":"\u2190",
	  "larrb":"\u21E4",
	  "larrbfs":"\u291F",
	  "larrfs":"\u291D",
	  "larrhk":"\u21A9",
	  "larrlp":"\u21AB",
	  "larrpl":"\u2939",
	  "larrsim":"\u2973",
	  "larrtl":"\u21A2",
	  "lat":"\u2AAB",
	  "lAtail":"\u291B",
	  "latail":"\u2919",
	  "late":"\u2AAD",
	  "lates":"\u2AAD\uFE00",
	  "lBarr":"\u290E",
	  "lbarr":"\u290C",
	  "lbbrk":"\u2772",
	  "lbrace":"\u007B",
	  "lbrack":"\u005B",
	  "lbrke":"\u298B",
	  "lbrksld":"\u298F",
	  "lbrkslu":"\u298D",
	  "Lcaron":"\u013D",
	  "lcaron":"\u013E",
	  "Lcedil":"\u013B",
	  "lcedil":"\u013C",
	  "lceil":"\u2308",
	  "lcub":"\u007B",
	  "Lcy":"\u041B",
	  "lcy":"\u043B",
	  "ldca":"\u2936",
	  "ldquo":"\u201C",
	  "ldquor":"\u201E",
	  "ldrdhar":"\u2967",
	  "ldrushar":"\u294B",
	  "ldsh":"\u21B2",
	  "lE":"\u2266",
	  "le":"\u2264",
	  "LeftAngleBracket":"\u27E8",
	  "LeftArrow":"\u2190",
	  "Leftarrow":"\u21D0",
	  "leftarrow":"\u2190",
	  "LeftArrowBar":"\u21E4",
	  "LeftArrowRightArrow":"\u21C6",
	  "leftarrowtail":"\u21A2",
	  "LeftCeiling":"\u2308",
	  "LeftDoubleBracket":"\u27E6",
	  "LeftDownTeeVector":"\u2961",
	  "LeftDownVector":"\u21C3",
	  "LeftDownVectorBar":"\u2959",
	  "LeftFloor":"\u230A",
	  "leftharpoondown":"\u21BD",
	  "leftharpoonup":"\u21BC",
	  "leftleftarrows":"\u21C7",
	  "LeftRightArrow":"\u2194",
	  "Leftrightarrow":"\u21D4",
	  "leftrightarrow":"\u2194",
	  "leftrightarrows":"\u21C6",
	  "leftrightharpoons":"\u21CB",
	  "leftrightsquigarrow":"\u21AD",
	  "LeftRightVector":"\u294E",
	  "LeftTee":"\u22A3",
	  "LeftTeeArrow":"\u21A4",
	  "LeftTeeVector":"\u295A",
	  "leftthreetimes":"\u22CB",
	  "LeftTriangle":"\u22B2",
	  "LeftTriangleBar":"\u29CF",
	  "LeftTriangleEqual":"\u22B4",
	  "LeftUpDownVector":"\u2951",
	  "LeftUpTeeVector":"\u2960",
	  "LeftUpVector":"\u21BF",
	  "LeftUpVectorBar":"\u2958",
	  "LeftVector":"\u21BC",
	  "LeftVectorBar":"\u2952",
	  "lEg":"\u2A8B",
	  "leg":"\u22DA",
	  "leq":"\u2264",
	  "leqq":"\u2266",
	  "leqslant":"\u2A7D",
	  "les":"\u2A7D",
	  "lescc":"\u2AA8",
	  "lesdot":"\u2A7F",
	  "lesdoto":"\u2A81",
	  "lesdotor":"\u2A83",
	  "lesg":"\u22DA\uFE00",
	  "lesges":"\u2A93",
	  "lessapprox":"\u2A85",
	  "lessdot":"\u22D6",
	  "lesseqgtr":"\u22DA",
	  "lesseqqgtr":"\u2A8B",
	  "LessEqualGreater":"\u22DA",
	  "LessFullEqual":"\u2266",
	  "LessGreater":"\u2276",
	  "lessgtr":"\u2276",
	  "LessLess":"\u2AA1",
	  "lesssim":"\u2272",
	  "LessSlantEqual":"\u2A7D",
	  "LessTilde":"\u2272",
	  "lfisht":"\u297C",
	  "lfloor":"\u230A",
	  "Lfr":"\uD835\uDD0F",
	  "lfr":"\uD835\uDD29",
	  "lg":"\u2276",
	  "lgE":"\u2A91",
	  "lHar":"\u2962",
	  "lhard":"\u21BD",
	  "lharu":"\u21BC",
	  "lharul":"\u296A",
	  "lhblk":"\u2584",
	  "LJcy":"\u0409",
	  "ljcy":"\u0459",
	  "Ll":"\u22D8",
	  "ll":"\u226A",
	  "llarr":"\u21C7",
	  "llcorner":"\u231E",
	  "Lleftarrow":"\u21DA",
	  "llhard":"\u296B",
	  "lltri":"\u25FA",
	  "Lmidot":"\u013F",
	  "lmidot":"\u0140",
	  "lmoust":"\u23B0",
	  "lmoustache":"\u23B0",
	  "lnap":"\u2A89",
	  "lnapprox":"\u2A89",
	  "lnE":"\u2268",
	  "lne":"\u2A87",
	  "lneq":"\u2A87",
	  "lneqq":"\u2268",
	  "lnsim":"\u22E6",
	  "loang":"\u27EC",
	  "loarr":"\u21FD",
	  "lobrk":"\u27E6",
	  "LongLeftArrow":"\u27F5",
	  "Longleftarrow":"\u27F8",
	  "longleftarrow":"\u27F5",
	  "LongLeftRightArrow":"\u27F7",
	  "Longleftrightarrow":"\u27FA",
	  "longleftrightarrow":"\u27F7",
	  "longmapsto":"\u27FC",
	  "LongRightArrow":"\u27F6",
	  "Longrightarrow":"\u27F9",
	  "longrightarrow":"\u27F6",
	  "looparrowleft":"\u21AB",
	  "looparrowright":"\u21AC",
	  "lopar":"\u2985",
	  "Lopf":"\uD835\uDD43",
	  "lopf":"\uD835\uDD5D",
	  "loplus":"\u2A2D",
	  "lotimes":"\u2A34",
	  "lowast":"\u2217",
	  "lowbar":"\u005F",
	  "LowerLeftArrow":"\u2199",
	  "LowerRightArrow":"\u2198",
	  "loz":"\u25CA",
	  "lozenge":"\u25CA",
	  "lozf":"\u29EB",
	  "lpar":"\u0028",
	  "lparlt":"\u2993",
	  "lrarr":"\u21C6",
	  "lrcorner":"\u231F",
	  "lrhar":"\u21CB",
	  "lrhard":"\u296D",
	  "lrm":"\u200E",
	  "lrtri":"\u22BF",
	  "lsaquo":"\u2039",
	  "Lscr":"\u2112",
	  "lscr":"\uD835\uDCC1",
	  "Lsh":"\u21B0",
	  "lsh":"\u21B0",
	  "lsim":"\u2272",
	  "lsime":"\u2A8D",
	  "lsimg":"\u2A8F",
	  "lsqb":"\u005B",
	  "lsquo":"\u2018",
	  "lsquor":"\u201A",
	  "Lstrok":"\u0141",
	  "lstrok":"\u0142",
	  "LT":"\u003C",
	  "Lt":"\u226A",
	  "lt":"\u003C",
	  "ltcc":"\u2AA6",
	  "ltcir":"\u2A79",
	  "ltdot":"\u22D6",
	  "lthree":"\u22CB",
	  "ltimes":"\u22C9",
	  "ltlarr":"\u2976",
	  "ltquest":"\u2A7B",
	  "ltri":"\u25C3",
	  "ltrie":"\u22B4",
	  "ltrif":"\u25C2",
	  "ltrPar":"\u2996",
	  "lurdshar":"\u294A",
	  "luruhar":"\u2966",
	  "lvertneqq":"\u2268\uFE00",
	  "lvnE":"\u2268\uFE00",
	  "macr":"\u00AF",
	  "male":"\u2642",
	  "malt":"\u2720",
	  "maltese":"\u2720",
	  "Map":"\u2905",
	  "map":"\u21A6",
	  "mapsto":"\u21A6",
	  "mapstodown":"\u21A7",
	  "mapstoleft":"\u21A4",
	  "mapstoup":"\u21A5",
	  "marker":"\u25AE",
	  "mcomma":"\u2A29",
	  "Mcy":"\u041C",
	  "mcy":"\u043C",
	  "mdash":"\u2014",
	  "mDDot":"\u223A",
	  "measuredangle":"\u2221",
	  "MediumSpace":"\u205F",
	  "Mellintrf":"\u2133",
	  "Mfr":"\uD835\uDD10",
	  "mfr":"\uD835\uDD2A",
	  "mho":"\u2127",
	  "micro":"\u00B5",
	  "mid":"\u2223",
	  "midast":"\u002A",
	  "midcir":"\u2AF0",
	  "middot":"\u00B7",
	  "minus":"\u2212",
	  "minusb":"\u229F",
	  "minusd":"\u2238",
	  "minusdu":"\u2A2A",
	  "MinusPlus":"\u2213",
	  "mlcp":"\u2ADB",
	  "mldr":"\u2026",
	  "mnplus":"\u2213",
	  "models":"\u22A7",
	  "Mopf":"\uD835\uDD44",
	  "mopf":"\uD835\uDD5E",
	  "mp":"\u2213",
	  "Mscr":"\u2133",
	  "mscr":"\uD835\uDCC2",
	  "mstpos":"\u223E",
	  "Mu":"\u039C",
	  "mu":"\u03BC",
	  "multimap":"\u22B8",
	  "mumap":"\u22B8",
	  "nabla":"\u2207",
	  "Nacute":"\u0143",
	  "nacute":"\u0144",
	  "nang":"\u2220\u20D2",
	  "nap":"\u2249",
	  "napE":"\u2A70\u0338",
	  "napid":"\u224B\u0338",
	  "napos":"\u0149",
	  "napprox":"\u2249",
	  "natur":"\u266E",
	  "natural":"\u266E",
	  "naturals":"\u2115",
	  "nbsp":"\u00A0",
	  "nbump":"\u224E\u0338",
	  "nbumpe":"\u224F\u0338",
	  "ncap":"\u2A43",
	  "Ncaron":"\u0147",
	  "ncaron":"\u0148",
	  "Ncedil":"\u0145",
	  "ncedil":"\u0146",
	  "ncong":"\u2247",
	  "ncongdot":"\u2A6D\u0338",
	  "ncup":"\u2A42",
	  "Ncy":"\u041D",
	  "ncy":"\u043D",
	  "ndash":"\u2013",
	  "ne":"\u2260",
	  "nearhk":"\u2924",
	  "neArr":"\u21D7",
	  "nearr":"\u2197",
	  "nearrow":"\u2197",
	  "nedot":"\u2250\u0338",
	  "NegativeMediumSpace":"\u200B",
	  "NegativeThickSpace":"\u200B",
	  "NegativeThinSpace":"\u200B",
	  "NegativeVeryThinSpace":"\u200B",
	  "nequiv":"\u2262",
	  "nesear":"\u2928",
	  "nesim":"\u2242\u0338",
	  "NestedGreaterGreater":"\u226B",
	  "NestedLessLess":"\u226A",
	  "NewLine":"\u000A",
	  "nexist":"\u2204",
	  "nexists":"\u2204",
	  "Nfr":"\uD835\uDD11",
	  "nfr":"\uD835\uDD2B",
	  "ngE":"\u2267\u0338",
	  "nge":"\u2271",
	  "ngeq":"\u2271",
	  "ngeqq":"\u2267\u0338",
	  "ngeqslant":"\u2A7E\u0338",
	  "nges":"\u2A7E\u0338",
	  "nGg":"\u22D9\u0338",
	  "ngsim":"\u2275",
	  "nGt":"\u226B\u20D2",
	  "ngt":"\u226F",
	  "ngtr":"\u226F",
	  "nGtv":"\u226B\u0338",
	  "nhArr":"\u21CE",
	  "nharr":"\u21AE",
	  "nhpar":"\u2AF2",
	  "ni":"\u220B",
	  "nis":"\u22FC",
	  "nisd":"\u22FA",
	  "niv":"\u220B",
	  "NJcy":"\u040A",
	  "njcy":"\u045A",
	  "nlArr":"\u21CD",
	  "nlarr":"\u219A",
	  "nldr":"\u2025",
	  "nlE":"\u2266\u0338",
	  "nle":"\u2270",
	  "nLeftarrow":"\u21CD",
	  "nleftarrow":"\u219A",
	  "nLeftrightarrow":"\u21CE",
	  "nleftrightarrow":"\u21AE",
	  "nleq":"\u2270",
	  "nleqq":"\u2266\u0338",
	  "nleqslant":"\u2A7D\u0338",
	  "nles":"\u2A7D\u0338",
	  "nless":"\u226E",
	  "nLl":"\u22D8\u0338",
	  "nlsim":"\u2274",
	  "nLt":"\u226A\u20D2",
	  "nlt":"\u226E",
	  "nltri":"\u22EA",
	  "nltrie":"\u22EC",
	  "nLtv":"\u226A\u0338",
	  "nmid":"\u2224",
	  "NoBreak":"\u2060",
	  "NonBreakingSpace":"\u00A0",
	  "Nopf":"\u2115",
	  "nopf":"\uD835\uDD5F",
	  "Not":"\u2AEC",
	  "not":"\u00AC",
	  "NotCongruent":"\u2262",
	  "NotCupCap":"\u226D",
	  "NotDoubleVerticalBar":"\u2226",
	  "NotElement":"\u2209",
	  "NotEqual":"\u2260",
	  "NotEqualTilde":"\u2242\u0338",
	  "NotExists":"\u2204",
	  "NotGreater":"\u226F",
	  "NotGreaterEqual":"\u2271",
	  "NotGreaterFullEqual":"\u2267\u0338",
	  "NotGreaterGreater":"\u226B\u0338",
	  "NotGreaterLess":"\u2279",
	  "NotGreaterSlantEqual":"\u2A7E\u0338",
	  "NotGreaterTilde":"\u2275",
	  "NotHumpDownHump":"\u224E\u0338",
	  "NotHumpEqual":"\u224F\u0338",
	  "notin":"\u2209",
	  "notindot":"\u22F5\u0338",
	  "notinE":"\u22F9\u0338",
	  "notinva":"\u2209",
	  "notinvb":"\u22F7",
	  "notinvc":"\u22F6",
	  "NotLeftTriangle":"\u22EA",
	  "NotLeftTriangleBar":"\u29CF\u0338",
	  "NotLeftTriangleEqual":"\u22EC",
	  "NotLess":"\u226E",
	  "NotLessEqual":"\u2270",
	  "NotLessGreater":"\u2278",
	  "NotLessLess":"\u226A\u0338",
	  "NotLessSlantEqual":"\u2A7D\u0338",
	  "NotLessTilde":"\u2274",
	  "NotNestedGreaterGreater":"\u2AA2\u0338",
	  "NotNestedLessLess":"\u2AA1\u0338",
	  "notni":"\u220C",
	  "notniva":"\u220C",
	  "notnivb":"\u22FE",
	  "notnivc":"\u22FD",
	  "NotPrecedes":"\u2280",
	  "NotPrecedesEqual":"\u2AAF\u0338",
	  "NotPrecedesSlantEqual":"\u22E0",
	  "NotReverseElement":"\u220C",
	  "NotRightTriangle":"\u22EB",
	  "NotRightTriangleBar":"\u29D0\u0338",
	  "NotRightTriangleEqual":"\u22ED",
	  "NotSquareSubset":"\u228F\u0338",
	  "NotSquareSubsetEqual":"\u22E2",
	  "NotSquareSuperset":"\u2290\u0338",
	  "NotSquareSupersetEqual":"\u22E3",
	  "NotSubset":"\u2282\u20D2",
	  "NotSubsetEqual":"\u2288",
	  "NotSucceeds":"\u2281",
	  "NotSucceedsEqual":"\u2AB0\u0338",
	  "NotSucceedsSlantEqual":"\u22E1",
	  "NotSucceedsTilde":"\u227F\u0338",
	  "NotSuperset":"\u2283\u20D2",
	  "NotSupersetEqual":"\u2289",
	  "NotTilde":"\u2241",
	  "NotTildeEqual":"\u2244",
	  "NotTildeFullEqual":"\u2247",
	  "NotTildeTilde":"\u2249",
	  "NotVerticalBar":"\u2224",
	  "npar":"\u2226",
	  "nparallel":"\u2226",
	  "nparsl":"\u2AFD\u20E5",
	  "npart":"\u2202\u0338",
	  "npolint":"\u2A14",
	  "npr":"\u2280",
	  "nprcue":"\u22E0",
	  "npre":"\u2AAF\u0338",
	  "nprec":"\u2280",
	  "npreceq":"\u2AAF\u0338",
	  "nrArr":"\u21CF",
	  "nrarr":"\u219B",
	  "nrarrc":"\u2933\u0338",
	  "nrarrw":"\u219D\u0338",
	  "nRightarrow":"\u21CF",
	  "nrightarrow":"\u219B",
	  "nrtri":"\u22EB",
	  "nrtrie":"\u22ED",
	  "nsc":"\u2281",
	  "nsccue":"\u22E1",
	  "nsce":"\u2AB0\u0338",
	  "Nscr":"\uD835\uDCA9",
	  "nscr":"\uD835\uDCC3",
	  "nshortmid":"\u2224",
	  "nshortparallel":"\u2226",
	  "nsim":"\u2241",
	  "nsime":"\u2244",
	  "nsimeq":"\u2244",
	  "nsmid":"\u2224",
	  "nspar":"\u2226",
	  "nsqsube":"\u22E2",
	  "nsqsupe":"\u22E3",
	  "nsub":"\u2284",
	  "nsubE":"\u2AC5\u0338",
	  "nsube":"\u2288",
	  "nsubset":"\u2282\u20D2",
	  "nsubseteq":"\u2288",
	  "nsubseteqq":"\u2AC5\u0338",
	  "nsucc":"\u2281",
	  "nsucceq":"\u2AB0\u0338",
	  "nsup":"\u2285",
	  "nsupE":"\u2AC6\u0338",
	  "nsupe":"\u2289",
	  "nsupset":"\u2283\u20D2",
	  "nsupseteq":"\u2289",
	  "nsupseteqq":"\u2AC6\u0338",
	  "ntgl":"\u2279",
	  "Ntilde":"\u00D1",
	  "ntilde":"\u00F1",
	  "ntlg":"\u2278",
	  "ntriangleleft":"\u22EA",
	  "ntrianglelefteq":"\u22EC",
	  "ntriangleright":"\u22EB",
	  "ntrianglerighteq":"\u22ED",
	  "Nu":"\u039D",
	  "nu":"\u03BD",
	  "num":"\u0023",
	  "numero":"\u2116",
	  "numsp":"\u2007",
	  "nvap":"\u224D\u20D2",
	  "nVDash":"\u22AF",
	  "nVdash":"\u22AE",
	  "nvDash":"\u22AD",
	  "nvdash":"\u22AC",
	  "nvge":"\u2265\u20D2",
	  "nvgt":"\u003E\u20D2",
	  "nvHarr":"\u2904",
	  "nvinfin":"\u29DE",
	  "nvlArr":"\u2902",
	  "nvle":"\u2264\u20D2",
	  "nvlt":"\u003C\u20D2",
	  "nvltrie":"\u22B4\u20D2",
	  "nvrArr":"\u2903",
	  "nvrtrie":"\u22B5\u20D2",
	  "nvsim":"\u223C\u20D2",
	  "nwarhk":"\u2923",
	  "nwArr":"\u21D6",
	  "nwarr":"\u2196",
	  "nwarrow":"\u2196",
	  "nwnear":"\u2927",
	  "Oacute":"\u00D3",
	  "oacute":"\u00F3",
	  "oast":"\u229B",
	  "ocir":"\u229A",
	  "Ocirc":"\u00D4",
	  "ocirc":"\u00F4",
	  "Ocy":"\u041E",
	  "ocy":"\u043E",
	  "odash":"\u229D",
	  "Odblac":"\u0150",
	  "odblac":"\u0151",
	  "odiv":"\u2A38",
	  "odot":"\u2299",
	  "odsold":"\u29BC",
	  "OElig":"\u0152",
	  "oelig":"\u0153",
	  "ofcir":"\u29BF",
	  "Ofr":"\uD835\uDD12",
	  "ofr":"\uD835\uDD2C",
	  "ogon":"\u02DB",
	  "Ograve":"\u00D2",
	  "ograve":"\u00F2",
	  "ogt":"\u29C1",
	  "ohbar":"\u29B5",
	  "ohm":"\u03A9",
	  "oint":"\u222E",
	  "olarr":"\u21BA",
	  "olcir":"\u29BE",
	  "olcross":"\u29BB",
	  "oline":"\u203E",
	  "olt":"\u29C0",
	  "Omacr":"\u014C",
	  "omacr":"\u014D",
	  "Omega":"\u03A9",
	  "omega":"\u03C9",
	  "Omicron":"\u039F",
	  "omicron":"\u03BF",
	  "omid":"\u29B6",
	  "ominus":"\u2296",
	  "Oopf":"\uD835\uDD46",
	  "oopf":"\uD835\uDD60",
	  "opar":"\u29B7",
	  "OpenCurlyDoubleQuote":"\u201C",
	  "OpenCurlyQuote":"\u2018",
	  "operp":"\u29B9",
	  "oplus":"\u2295",
	  "Or":"\u2A54",
	  "or":"\u2228",
	  "orarr":"\u21BB",
	  "ord":"\u2A5D",
	  "order":"\u2134",
	  "orderof":"\u2134",
	  "ordf":"\u00AA",
	  "ordm":"\u00BA",
	  "origof":"\u22B6",
	  "oror":"\u2A56",
	  "orslope":"\u2A57",
	  "orv":"\u2A5B",
	  "oS":"\u24C8",
	  "Oscr":"\uD835\uDCAA",
	  "oscr":"\u2134",
	  "Oslash":"\u00D8",
	  "oslash":"\u00F8",
	  "osol":"\u2298",
	  "Otilde":"\u00D5",
	  "otilde":"\u00F5",
	  "Otimes":"\u2A37",
	  "otimes":"\u2297",
	  "otimesas":"\u2A36",
	  "Ouml":"\u00D6",
	  "ouml":"\u00F6",
	  "ovbar":"\u233D",
	  "OverBar":"\u203E",
	  "OverBrace":"\u23DE",
	  "OverBracket":"\u23B4",
	  "OverParenthesis":"\u23DC",
	  "par":"\u2225",
	  "para":"\u00B6",
	  "parallel":"\u2225",
	  "parsim":"\u2AF3",
	  "parsl":"\u2AFD",
	  "part":"\u2202",
	  "PartialD":"\u2202",
	  "Pcy":"\u041F",
	  "pcy":"\u043F",
	  "percnt":"\u0025",
	  "period":"\u002E",
	  "permil":"\u2030",
	  "perp":"\u22A5",
	  "pertenk":"\u2031",
	  "Pfr":"\uD835\uDD13",
	  "pfr":"\uD835\uDD2D",
	  "Phi":"\u03A6",
	  "phi":"\u03C6",
	  "phiv":"\u03D5",
	  "phmmat":"\u2133",
	  "phone":"\u260E",
	  "Pi":"\u03A0",
	  "pi":"\u03C0",
	  "pitchfork":"\u22D4",
	  "piv":"\u03D6",
	  "planck":"\u210F",
	  "planckh":"\u210E",
	  "plankv":"\u210F",
	  "plus":"\u002B",
	  "plusacir":"\u2A23",
	  "plusb":"\u229E",
	  "pluscir":"\u2A22",
	  "plusdo":"\u2214",
	  "plusdu":"\u2A25",
	  "pluse":"\u2A72",
	  "PlusMinus":"\u00B1",
	  "plusmn":"\u00B1",
	  "plussim":"\u2A26",
	  "plustwo":"\u2A27",
	  "pm":"\u00B1",
	  "Poincareplane":"\u210C",
	  "pointint":"\u2A15",
	  "Popf":"\u2119",
	  "popf":"\uD835\uDD61",
	  "pound":"\u00A3",
	  "Pr":"\u2ABB",
	  "pr":"\u227A",
	  "prap":"\u2AB7",
	  "prcue":"\u227C",
	  "prE":"\u2AB3",
	  "pre":"\u2AAF",
	  "prec":"\u227A",
	  "precapprox":"\u2AB7",
	  "preccurlyeq":"\u227C",
	  "Precedes":"\u227A",
	  "PrecedesEqual":"\u2AAF",
	  "PrecedesSlantEqual":"\u227C",
	  "PrecedesTilde":"\u227E",
	  "preceq":"\u2AAF",
	  "precnapprox":"\u2AB9",
	  "precneqq":"\u2AB5",
	  "precnsim":"\u22E8",
	  "precsim":"\u227E",
	  "Prime":"\u2033",
	  "prime":"\u2032",
	  "primes":"\u2119",
	  "prnap":"\u2AB9",
	  "prnE":"\u2AB5",
	  "prnsim":"\u22E8",
	  "prod":"\u220F",
	  "Product":"\u220F",
	  "profalar":"\u232E",
	  "profline":"\u2312",
	  "profsurf":"\u2313",
	  "prop":"\u221D",
	  "Proportion":"\u2237",
	  "Proportional":"\u221D",
	  "propto":"\u221D",
	  "prsim":"\u227E",
	  "prurel":"\u22B0",
	  "Pscr":"\uD835\uDCAB",
	  "pscr":"\uD835\uDCC5",
	  "Psi":"\u03A8",
	  "psi":"\u03C8",
	  "puncsp":"\u2008",
	  "Qfr":"\uD835\uDD14",
	  "qfr":"\uD835\uDD2E",
	  "qint":"\u2A0C",
	  "Qopf":"\u211A",
	  "qopf":"\uD835\uDD62",
	  "qprime":"\u2057",
	  "Qscr":"\uD835\uDCAC",
	  "qscr":"\uD835\uDCC6",
	  "quaternions":"\u210D",
	  "quatint":"\u2A16",
	  "quest":"\u003F",
	  "questeq":"\u225F",
	  "QUOT":"\u0022",
	  "quot":"\u0022",
	  "rAarr":"\u21DB",
	  "race":"\u223D\u0331",
	  "Racute":"\u0154",
	  "racute":"\u0155",
	  "radic":"\u221A",
	  "raemptyv":"\u29B3",
	  "Rang":"\u27EB",
	  "rang":"\u27E9",
	  "rangd":"\u2992",
	  "range":"\u29A5",
	  "rangle":"\u27E9",
	  "raquo":"\u00BB",
	  "Rarr":"\u21A0",
	  "rArr":"\u21D2",
	  "rarr":"\u2192",
	  "rarrap":"\u2975",
	  "rarrb":"\u21E5",
	  "rarrbfs":"\u2920",
	  "rarrc":"\u2933",
	  "rarrfs":"\u291E",
	  "rarrhk":"\u21AA",
	  "rarrlp":"\u21AC",
	  "rarrpl":"\u2945",
	  "rarrsim":"\u2974",
	  "Rarrtl":"\u2916",
	  "rarrtl":"\u21A3",
	  "rarrw":"\u219D",
	  "rAtail":"\u291C",
	  "ratail":"\u291A",
	  "ratio":"\u2236",
	  "rationals":"\u211A",
	  "RBarr":"\u2910",
	  "rBarr":"\u290F",
	  "rbarr":"\u290D",
	  "rbbrk":"\u2773",
	  "rbrace":"\u007D",
	  "rbrack":"\u005D",
	  "rbrke":"\u298C",
	  "rbrksld":"\u298E",
	  "rbrkslu":"\u2990",
	  "Rcaron":"\u0158",
	  "rcaron":"\u0159",
	  "Rcedil":"\u0156",
	  "rcedil":"\u0157",
	  "rceil":"\u2309",
	  "rcub":"\u007D",
	  "Rcy":"\u0420",
	  "rcy":"\u0440",
	  "rdca":"\u2937",
	  "rdldhar":"\u2969",
	  "rdquo":"\u201D",
	  "rdquor":"\u201D",
	  "rdsh":"\u21B3",
	  "Re":"\u211C",
	  "real":"\u211C",
	  "realine":"\u211B",
	  "realpart":"\u211C",
	  "reals":"\u211D",
	  "rect":"\u25AD",
	  "REG":"\u00AE",
	  "reg":"\u00AE",
	  "ReverseElement":"\u220B",
	  "ReverseEquilibrium":"\u21CB",
	  "ReverseUpEquilibrium":"\u296F",
	  "rfisht":"\u297D",
	  "rfloor":"\u230B",
	  "Rfr":"\u211C",
	  "rfr":"\uD835\uDD2F",
	  "rHar":"\u2964",
	  "rhard":"\u21C1",
	  "rharu":"\u21C0",
	  "rharul":"\u296C",
	  "Rho":"\u03A1",
	  "rho":"\u03C1",
	  "rhov":"\u03F1",
	  "RightAngleBracket":"\u27E9",
	  "RightArrow":"\u2192",
	  "Rightarrow":"\u21D2",
	  "rightarrow":"\u2192",
	  "RightArrowBar":"\u21E5",
	  "RightArrowLeftArrow":"\u21C4",
	  "rightarrowtail":"\u21A3",
	  "RightCeiling":"\u2309",
	  "RightDoubleBracket":"\u27E7",
	  "RightDownTeeVector":"\u295D",
	  "RightDownVector":"\u21C2",
	  "RightDownVectorBar":"\u2955",
	  "RightFloor":"\u230B",
	  "rightharpoondown":"\u21C1",
	  "rightharpoonup":"\u21C0",
	  "rightleftarrows":"\u21C4",
	  "rightleftharpoons":"\u21CC",
	  "rightrightarrows":"\u21C9",
	  "rightsquigarrow":"\u219D",
	  "RightTee":"\u22A2",
	  "RightTeeArrow":"\u21A6",
	  "RightTeeVector":"\u295B",
	  "rightthreetimes":"\u22CC",
	  "RightTriangle":"\u22B3",
	  "RightTriangleBar":"\u29D0",
	  "RightTriangleEqual":"\u22B5",
	  "RightUpDownVector":"\u294F",
	  "RightUpTeeVector":"\u295C",
	  "RightUpVector":"\u21BE",
	  "RightUpVectorBar":"\u2954",
	  "RightVector":"\u21C0",
	  "RightVectorBar":"\u2953",
	  "ring":"\u02DA",
	  "risingdotseq":"\u2253",
	  "rlarr":"\u21C4",
	  "rlhar":"\u21CC",
	  "rlm":"\u200F",
	  "rmoust":"\u23B1",
	  "rmoustache":"\u23B1",
	  "rnmid":"\u2AEE",
	  "roang":"\u27ED",
	  "roarr":"\u21FE",
	  "robrk":"\u27E7",
	  "ropar":"\u2986",
	  "Ropf":"\u211D",
	  "ropf":"\uD835\uDD63",
	  "roplus":"\u2A2E",
	  "rotimes":"\u2A35",
	  "RoundImplies":"\u2970",
	  "rpar":"\u0029",
	  "rpargt":"\u2994",
	  "rppolint":"\u2A12",
	  "rrarr":"\u21C9",
	  "Rrightarrow":"\u21DB",
	  "rsaquo":"\u203A",
	  "Rscr":"\u211B",
	  "rscr":"\uD835\uDCC7",
	  "Rsh":"\u21B1",
	  "rsh":"\u21B1",
	  "rsqb":"\u005D",
	  "rsquo":"\u2019",
	  "rsquor":"\u2019",
	  "rthree":"\u22CC",
	  "rtimes":"\u22CA",
	  "rtri":"\u25B9",
	  "rtrie":"\u22B5",
	  "rtrif":"\u25B8",
	  "rtriltri":"\u29CE",
	  "RuleDelayed":"\u29F4",
	  "ruluhar":"\u2968",
	  "rx":"\u211E",
	  "Sacute":"\u015A",
	  "sacute":"\u015B",
	  "sbquo":"\u201A",
	  "Sc":"\u2ABC",
	  "sc":"\u227B",
	  "scap":"\u2AB8",
	  "Scaron":"\u0160",
	  "scaron":"\u0161",
	  "sccue":"\u227D",
	  "scE":"\u2AB4",
	  "sce":"\u2AB0",
	  "Scedil":"\u015E",
	  "scedil":"\u015F",
	  "Scirc":"\u015C",
	  "scirc":"\u015D",
	  "scnap":"\u2ABA",
	  "scnE":"\u2AB6",
	  "scnsim":"\u22E9",
	  "scpolint":"\u2A13",
	  "scsim":"\u227F",
	  "Scy":"\u0421",
	  "scy":"\u0441",
	  "sdot":"\u22C5",
	  "sdotb":"\u22A1",
	  "sdote":"\u2A66",
	  "searhk":"\u2925",
	  "seArr":"\u21D8",
	  "searr":"\u2198",
	  "searrow":"\u2198",
	  "sect":"\u00A7",
	  "semi":"\u003B",
	  "seswar":"\u2929",
	  "setminus":"\u2216",
	  "setmn":"\u2216",
	  "sext":"\u2736",
	  "Sfr":"\uD835\uDD16",
	  "sfr":"\uD835\uDD30",
	  "sfrown":"\u2322",
	  "sharp":"\u266F",
	  "SHCHcy":"\u0429",
	  "shchcy":"\u0449",
	  "SHcy":"\u0428",
	  "shcy":"\u0448",
	  "ShortDownArrow":"\u2193",
	  "ShortLeftArrow":"\u2190",
	  "shortmid":"\u2223",
	  "shortparallel":"\u2225",
	  "ShortRightArrow":"\u2192",
	  "ShortUpArrow":"\u2191",
	  "shy":"\u00AD",
	  "Sigma":"\u03A3",
	  "sigma":"\u03C3",
	  "sigmaf":"\u03C2",
	  "sigmav":"\u03C2",
	  "sim":"\u223C",
	  "simdot":"\u2A6A",
	  "sime":"\u2243",
	  "simeq":"\u2243",
	  "simg":"\u2A9E",
	  "simgE":"\u2AA0",
	  "siml":"\u2A9D",
	  "simlE":"\u2A9F",
	  "simne":"\u2246",
	  "simplus":"\u2A24",
	  "simrarr":"\u2972",
	  "slarr":"\u2190",
	  "SmallCircle":"\u2218",
	  "smallsetminus":"\u2216",
	  "smashp":"\u2A33",
	  "smeparsl":"\u29E4",
	  "smid":"\u2223",
	  "smile":"\u2323",
	  "smt":"\u2AAA",
	  "smte":"\u2AAC",
	  "smtes":"\u2AAC\uFE00",
	  "SOFTcy":"\u042C",
	  "softcy":"\u044C",
	  "sol":"\u002F",
	  "solb":"\u29C4",
	  "solbar":"\u233F",
	  "Sopf":"\uD835\uDD4A",
	  "sopf":"\uD835\uDD64",
	  "spades":"\u2660",
	  "spadesuit":"\u2660",
	  "spar":"\u2225",
	  "sqcap":"\u2293",
	  "sqcaps":"\u2293\uFE00",
	  "sqcup":"\u2294",
	  "sqcups":"\u2294\uFE00",
	  "Sqrt":"\u221A",
	  "sqsub":"\u228F",
	  "sqsube":"\u2291",
	  "sqsubset":"\u228F",
	  "sqsubseteq":"\u2291",
	  "sqsup":"\u2290",
	  "sqsupe":"\u2292",
	  "sqsupset":"\u2290",
	  "sqsupseteq":"\u2292",
	  "squ":"\u25A1",
	  "Square":"\u25A1",
	  "square":"\u25A1",
	  "SquareIntersection":"\u2293",
	  "SquareSubset":"\u228F",
	  "SquareSubsetEqual":"\u2291",
	  "SquareSuperset":"\u2290",
	  "SquareSupersetEqual":"\u2292",
	  "SquareUnion":"\u2294",
	  "squarf":"\u25AA",
	  "squf":"\u25AA",
	  "srarr":"\u2192",
	  "Sscr":"\uD835\uDCAE",
	  "sscr":"\uD835\uDCC8",
	  "ssetmn":"\u2216",
	  "ssmile":"\u2323",
	  "sstarf":"\u22C6",
	  "Star":"\u22C6",
	  "star":"\u2606",
	  "starf":"\u2605",
	  "straightepsilon":"\u03F5",
	  "straightphi":"\u03D5",
	  "strns":"\u00AF",
	  "Sub":"\u22D0",
	  "sub":"\u2282",
	  "subdot":"\u2ABD",
	  "subE":"\u2AC5",
	  "sube":"\u2286",
	  "subedot":"\u2AC3",
	  "submult":"\u2AC1",
	  "subnE":"\u2ACB",
	  "subne":"\u228A",
	  "subplus":"\u2ABF",
	  "subrarr":"\u2979",
	  "Subset":"\u22D0",
	  "subset":"\u2282",
	  "subseteq":"\u2286",
	  "subseteqq":"\u2AC5",
	  "SubsetEqual":"\u2286",
	  "subsetneq":"\u228A",
	  "subsetneqq":"\u2ACB",
	  "subsim":"\u2AC7",
	  "subsub":"\u2AD5",
	  "subsup":"\u2AD3",
	  "succ":"\u227B",
	  "succapprox":"\u2AB8",
	  "succcurlyeq":"\u227D",
	  "Succeeds":"\u227B",
	  "SucceedsEqual":"\u2AB0",
	  "SucceedsSlantEqual":"\u227D",
	  "SucceedsTilde":"\u227F",
	  "succeq":"\u2AB0",
	  "succnapprox":"\u2ABA",
	  "succneqq":"\u2AB6",
	  "succnsim":"\u22E9",
	  "succsim":"\u227F",
	  "SuchThat":"\u220B",
	  "Sum":"\u2211",
	  "sum":"\u2211",
	  "sung":"\u266A",
	  "Sup":"\u22D1",
	  "sup":"\u2283",
	  "sup1":"\u00B9",
	  "sup2":"\u00B2",
	  "sup3":"\u00B3",
	  "supdot":"\u2ABE",
	  "supdsub":"\u2AD8",
	  "supE":"\u2AC6",
	  "supe":"\u2287",
	  "supedot":"\u2AC4",
	  "Superset":"\u2283",
	  "SupersetEqual":"\u2287",
	  "suphsol":"\u27C9",
	  "suphsub":"\u2AD7",
	  "suplarr":"\u297B",
	  "supmult":"\u2AC2",
	  "supnE":"\u2ACC",
	  "supne":"\u228B",
	  "supplus":"\u2AC0",
	  "Supset":"\u22D1",
	  "supset":"\u2283",
	  "supseteq":"\u2287",
	  "supseteqq":"\u2AC6",
	  "supsetneq":"\u228B",
	  "supsetneqq":"\u2ACC",
	  "supsim":"\u2AC8",
	  "supsub":"\u2AD4",
	  "supsup":"\u2AD6",
	  "swarhk":"\u2926",
	  "swArr":"\u21D9",
	  "swarr":"\u2199",
	  "swarrow":"\u2199",
	  "swnwar":"\u292A",
	  "szlig":"\u00DF",
	  "Tab":"\u0009",
	  "target":"\u2316",
	  "Tau":"\u03A4",
	  "tau":"\u03C4",
	  "tbrk":"\u23B4",
	  "Tcaron":"\u0164",
	  "tcaron":"\u0165",
	  "Tcedil":"\u0162",
	  "tcedil":"\u0163",
	  "Tcy":"\u0422",
	  "tcy":"\u0442",
	  "tdot":"\u20DB",
	  "telrec":"\u2315",
	  "Tfr":"\uD835\uDD17",
	  "tfr":"\uD835\uDD31",
	  "there4":"\u2234",
	  "Therefore":"\u2234",
	  "therefore":"\u2234",
	  "Theta":"\u0398",
	  "theta":"\u03B8",
	  "thetasym":"\u03D1",
	  "thetav":"\u03D1",
	  "thickapprox":"\u2248",
	  "thicksim":"\u223C",
	  "ThickSpace":"\u205F\u200A",
	  "thinsp":"\u2009",
	  "ThinSpace":"\u2009",
	  "thkap":"\u2248",
	  "thksim":"\u223C",
	  "THORN":"\u00DE",
	  "thorn":"\u00FE",
	  "Tilde":"\u223C",
	  "tilde":"\u02DC",
	  "TildeEqual":"\u2243",
	  "TildeFullEqual":"\u2245",
	  "TildeTilde":"\u2248",
	  "times":"\u00D7",
	  "timesb":"\u22A0",
	  "timesbar":"\u2A31",
	  "timesd":"\u2A30",
	  "tint":"\u222D",
	  "toea":"\u2928",
	  "top":"\u22A4",
	  "topbot":"\u2336",
	  "topcir":"\u2AF1",
	  "Topf":"\uD835\uDD4B",
	  "topf":"\uD835\uDD65",
	  "topfork":"\u2ADA",
	  "tosa":"\u2929",
	  "tprime":"\u2034",
	  "TRADE":"\u2122",
	  "trade":"\u2122",
	  "triangle":"\u25B5",
	  "triangledown":"\u25BF",
	  "triangleleft":"\u25C3",
	  "trianglelefteq":"\u22B4",
	  "triangleq":"\u225C",
	  "triangleright":"\u25B9",
	  "trianglerighteq":"\u22B5",
	  "tridot":"\u25EC",
	  "trie":"\u225C",
	  "triminus":"\u2A3A",
	  "TripleDot":"\u20DB",
	  "triplus":"\u2A39",
	  "trisb":"\u29CD",
	  "tritime":"\u2A3B",
	  "trpezium":"\u23E2",
	  "Tscr":"\uD835\uDCAF",
	  "tscr":"\uD835\uDCC9",
	  "TScy":"\u0426",
	  "tscy":"\u0446",
	  "TSHcy":"\u040B",
	  "tshcy":"\u045B",
	  "Tstrok":"\u0166",
	  "tstrok":"\u0167",
	  "twixt":"\u226C",
	  "twoheadleftarrow":"\u219E",
	  "twoheadrightarrow":"\u21A0",
	  "Uacute":"\u00DA",
	  "uacute":"\u00FA",
	  "Uarr":"\u219F",
	  "uArr":"\u21D1",
	  "uarr":"\u2191",
	  "Uarrocir":"\u2949",
	  "Ubrcy":"\u040E",
	  "ubrcy":"\u045E",
	  "Ubreve":"\u016C",
	  "ubreve":"\u016D",
	  "Ucirc":"\u00DB",
	  "ucirc":"\u00FB",
	  "Ucy":"\u0423",
	  "ucy":"\u0443",
	  "udarr":"\u21C5",
	  "Udblac":"\u0170",
	  "udblac":"\u0171",
	  "udhar":"\u296E",
	  "ufisht":"\u297E",
	  "Ufr":"\uD835\uDD18",
	  "ufr":"\uD835\uDD32",
	  "Ugrave":"\u00D9",
	  "ugrave":"\u00F9",
	  "uHar":"\u2963",
	  "uharl":"\u21BF",
	  "uharr":"\u21BE",
	  "uhblk":"\u2580",
	  "ulcorn":"\u231C",
	  "ulcorner":"\u231C",
	  "ulcrop":"\u230F",
	  "ultri":"\u25F8",
	  "Umacr":"\u016A",
	  "umacr":"\u016B",
	  "uml":"\u00A8",
	  "UnderBar":"\u005F",
	  "UnderBrace":"\u23DF",
	  "UnderBracket":"\u23B5",
	  "UnderParenthesis":"\u23DD",
	  "Union":"\u22C3",
	  "UnionPlus":"\u228E",
	  "Uogon":"\u0172",
	  "uogon":"\u0173",
	  "Uopf":"\uD835\uDD4C",
	  "uopf":"\uD835\uDD66",
	  "UpArrow":"\u2191",
	  "Uparrow":"\u21D1",
	  "uparrow":"\u2191",
	  "UpArrowBar":"\u2912",
	  "UpArrowDownArrow":"\u21C5",
	  "UpDownArrow":"\u2195",
	  "Updownarrow":"\u21D5",
	  "updownarrow":"\u2195",
	  "UpEquilibrium":"\u296E",
	  "upharpoonleft":"\u21BF",
	  "upharpoonright":"\u21BE",
	  "uplus":"\u228E",
	  "UpperLeftArrow":"\u2196",
	  "UpperRightArrow":"\u2197",
	  "Upsi":"\u03D2",
	  "upsi":"\u03C5",
	  "upsih":"\u03D2",
	  "Upsilon":"\u03A5",
	  "upsilon":"\u03C5",
	  "UpTee":"\u22A5",
	  "UpTeeArrow":"\u21A5",
	  "upuparrows":"\u21C8",
	  "urcorn":"\u231D",
	  "urcorner":"\u231D",
	  "urcrop":"\u230E",
	  "Uring":"\u016E",
	  "uring":"\u016F",
	  "urtri":"\u25F9",
	  "Uscr":"\uD835\uDCB0",
	  "uscr":"\uD835\uDCCA",
	  "utdot":"\u22F0",
	  "Utilde":"\u0168",
	  "utilde":"\u0169",
	  "utri":"\u25B5",
	  "utrif":"\u25B4",
	  "uuarr":"\u21C8",
	  "Uuml":"\u00DC",
	  "uuml":"\u00FC",
	  "uwangle":"\u29A7",
	  "vangrt":"\u299C",
	  "varepsilon":"\u03F5",
	  "varkappa":"\u03F0",
	  "varnothing":"\u2205",
	  "varphi":"\u03D5",
	  "varpi":"\u03D6",
	  "varpropto":"\u221D",
	  "vArr":"\u21D5",
	  "varr":"\u2195",
	  "varrho":"\u03F1",
	  "varsigma":"\u03C2",
	  "varsubsetneq":"\u228A\uFE00",
	  "varsubsetneqq":"\u2ACB\uFE00",
	  "varsupsetneq":"\u228B\uFE00",
	  "varsupsetneqq":"\u2ACC\uFE00",
	  "vartheta":"\u03D1",
	  "vartriangleleft":"\u22B2",
	  "vartriangleright":"\u22B3",
	  "Vbar":"\u2AEB",
	  "vBar":"\u2AE8",
	  "vBarv":"\u2AE9",
	  "Vcy":"\u0412",
	  "vcy":"\u0432",
	  "VDash":"\u22AB",
	  "Vdash":"\u22A9",
	  "vDash":"\u22A8",
	  "vdash":"\u22A2",
	  "Vdashl":"\u2AE6",
	  "Vee":"\u22C1",
	  "vee":"\u2228",
	  "veebar":"\u22BB",
	  "veeeq":"\u225A",
	  "vellip":"\u22EE",
	  "Verbar":"\u2016",
	  "verbar":"\u007C",
	  "Vert":"\u2016",
	  "vert":"\u007C",
	  "VerticalBar":"\u2223",
	  "VerticalLine":"\u007C",
	  "VerticalSeparator":"\u2758",
	  "VerticalTilde":"\u2240",
	  "VeryThinSpace":"\u200A",
	  "Vfr":"\uD835\uDD19",
	  "vfr":"\uD835\uDD33",
	  "vltri":"\u22B2",
	  "vnsub":"\u2282\u20D2",
	  "vnsup":"\u2283\u20D2",
	  "Vopf":"\uD835\uDD4D",
	  "vopf":"\uD835\uDD67",
	  "vprop":"\u221D",
	  "vrtri":"\u22B3",
	  "Vscr":"\uD835\uDCB1",
	  "vscr":"\uD835\uDCCB",
	  "vsubnE":"\u2ACB\uFE00",
	  "vsubne":"\u228A\uFE00",
	  "vsupnE":"\u2ACC\uFE00",
	  "vsupne":"\u228B\uFE00",
	  "Vvdash":"\u22AA",
	  "vzigzag":"\u299A",
	  "Wcirc":"\u0174",
	  "wcirc":"\u0175",
	  "wedbar":"\u2A5F",
	  "Wedge":"\u22C0",
	  "wedge":"\u2227",
	  "wedgeq":"\u2259",
	  "weierp":"\u2118",
	  "Wfr":"\uD835\uDD1A",
	  "wfr":"\uD835\uDD34",
	  "Wopf":"\uD835\uDD4E",
	  "wopf":"\uD835\uDD68",
	  "wp":"\u2118",
	  "wr":"\u2240",
	  "wreath":"\u2240",
	  "Wscr":"\uD835\uDCB2",
	  "wscr":"\uD835\uDCCC",
	  "xcap":"\u22C2",
	  "xcirc":"\u25EF",
	  "xcup":"\u22C3",
	  "xdtri":"\u25BD",
	  "Xfr":"\uD835\uDD1B",
	  "xfr":"\uD835\uDD35",
	  "xhArr":"\u27FA",
	  "xharr":"\u27F7",
	  "Xi":"\u039E",
	  "xi":"\u03BE",
	  "xlArr":"\u27F8",
	  "xlarr":"\u27F5",
	  "xmap":"\u27FC",
	  "xnis":"\u22FB",
	  "xodot":"\u2A00",
	  "Xopf":"\uD835\uDD4F",
	  "xopf":"\uD835\uDD69",
	  "xoplus":"\u2A01",
	  "xotime":"\u2A02",
	  "xrArr":"\u27F9",
	  "xrarr":"\u27F6",
	  "Xscr":"\uD835\uDCB3",
	  "xscr":"\uD835\uDCCD",
	  "xsqcup":"\u2A06",
	  "xuplus":"\u2A04",
	  "xutri":"\u25B3",
	  "xvee":"\u22C1",
	  "xwedge":"\u22C0",
	  "Yacute":"\u00DD",
	  "yacute":"\u00FD",
	  "YAcy":"\u042F",
	  "yacy":"\u044F",
	  "Ycirc":"\u0176",
	  "ycirc":"\u0177",
	  "Ycy":"\u042B",
	  "ycy":"\u044B",
	  "yen":"\u00A5",
	  "Yfr":"\uD835\uDD1C",
	  "yfr":"\uD835\uDD36",
	  "YIcy":"\u0407",
	  "yicy":"\u0457",
	  "Yopf":"\uD835\uDD50",
	  "yopf":"\uD835\uDD6A",
	  "Yscr":"\uD835\uDCB4",
	  "yscr":"\uD835\uDCCE",
	  "YUcy":"\u042E",
	  "yucy":"\u044E",
	  "Yuml":"\u0178",
	  "yuml":"\u00FF",
	  "Zacute":"\u0179",
	  "zacute":"\u017A",
	  "Zcaron":"\u017D",
	  "zcaron":"\u017E",
	  "Zcy":"\u0417",
	  "zcy":"\u0437",
	  "Zdot":"\u017B",
	  "zdot":"\u017C",
	  "zeetrf":"\u2128",
	  "ZeroWidthSpace":"\u200B",
	  "Zeta":"\u0396",
	  "zeta":"\u03B6",
	  "Zfr":"\u2128",
	  "zfr":"\uD835\uDD37",
	  "ZHcy":"\u0416",
	  "zhcy":"\u0436",
	  "zigrarr":"\u21DD",
	  "Zopf":"\u2124",
	  "zopf":"\uD835\uDD6B",
	  "Zscr":"\uD835\uDCB5",
	  "zscr":"\uD835\uDCCF",
	  "zwj":"\u200D",
	  "zwnj":"\u200C"
	};


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Local dependencies
	 */

	var utils = __webpack_require__(244);
	var rules = __webpack_require__(247);

	/**
	 * Expose `Renderer`
	 */

	module.exports = Renderer;

	/**
	 * Renderer class. Renders HTML and exposes `rules` to allow
	 * local modifications.
	 */

	function Renderer() {
	  this.rules = utils.assign({}, rules);

	  // exported helper, for custom rules only
	  this.getBreak = rules.getBreak;
	}

	/**
	 * Render a string of inline HTML with the given `tokens` and
	 * `options`.
	 *
	 * @param  {Array} `tokens`
	 * @param  {Object} `options`
	 * @param  {Object} `env`
	 * @return {String}
	 * @api public
	 */

	Renderer.prototype.renderInline = function (tokens, options, env) {
	  var _rules = this.rules;
	  var len = tokens.length, i = 0;
	  var result = '';

	  while (len--) {
	    result += _rules[tokens[i].type](tokens, i++, options, env, this);
	  }

	  return result;
	};

	/**
	 * Render a string of HTML with the given `tokens` and
	 * `options`.
	 *
	 * @param  {Array} `tokens`
	 * @param  {Object} `options`
	 * @param  {Object} `env`
	 * @return {String}
	 * @api public
	 */

	Renderer.prototype.render = function (tokens, options, env) {
	  var _rules = this.rules;
	  var len = tokens.length, i = -1;
	  var result = '';

	  while (++i < len) {
	    if (tokens[i].type === 'inline') {
	      result += this.renderInline(tokens[i].children, options, env);
	    } else {
	      result += _rules[tokens[i].type](tokens, i, options, env, this);
	    }
	  }
	  return result;
	};


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Local dependencies
	 */

	var has             = __webpack_require__(244).has;
	var unescapeMd      = __webpack_require__(244).unescapeMd;
	var replaceEntities = __webpack_require__(244).replaceEntities;
	var escapeHtml      = __webpack_require__(244).escapeHtml;

	/**
	 * Renderer rules cache
	 */

	var rules = {};

	/**
	 * Blockquotes
	 */

	rules.blockquote_open = function(/* tokens, idx, options, env */) {
	  return '<blockquote>\n';
	};

	rules.blockquote_close = function(tokens, idx /*, options, env */) {
	  return '</blockquote>' + getBreak(tokens, idx);
	};

	/**
	 * Code
	 */

	rules.code = function(tokens, idx /*, options, env */) {
	  if (tokens[idx].block) {
	    return '<pre><code>' + escapeHtml(tokens[idx].content) + '</code></pre>' + getBreak(tokens, idx);
	  }
	  return '<code>' + escapeHtml(tokens[idx].content) + '</code>';
	};

	/**
	 * Fenced code blocks
	 */

	rules.fence = function(tokens, idx, options, env, instance) {
	  var token = tokens[idx];
	  var langClass = '';
	  var langPrefix = options.langPrefix;
	  var langName = '', fences, fenceName;
	  var highlighted;

	  if (token.params) {

	    //
	    // ```foo bar
	    //
	    // Try custom renderer "foo" first. That will simplify overwrite
	    // for diagrams, latex, and any other fenced block with custom look
	    //

	    fences = token.params.split(/\s+/g);
	    fenceName = fences.join(' ');

	    if (has(instance.rules.fence_custom, fences[0])) {
	      return instance.rules.fence_custom[fences[0]](tokens, idx, options, env, instance);
	    }

	    langName = escapeHtml(replaceEntities(unescapeMd(fenceName)));
	    langClass = ' class="' + langPrefix + langName + '"';
	  }

	  if (options.highlight) {
	    highlighted = options.highlight.apply(options.highlight, [ token.content ].concat(fences))
	      || escapeHtml(token.content);
	  } else {
	    highlighted = escapeHtml(token.content);
	  }

	  return '<pre><code' + langClass + '>'
	        + highlighted
	        + '</code></pre>'
	        + getBreak(tokens, idx);
	};

	rules.fence_custom = {};

	/**
	 * Headings
	 */

	rules.heading_open = function(tokens, idx /*, options, env */) {
	  return '<h' + tokens[idx].hLevel + '>';
	};
	rules.heading_close = function(tokens, idx /*, options, env */) {
	  return '</h' + tokens[idx].hLevel + '>\n';
	};

	/**
	 * Horizontal rules
	 */

	rules.hr = function(tokens, idx, options /*, env */) {
	  return (options.xhtmlOut ? '<hr />' : '<hr>') + getBreak(tokens, idx);
	};

	/**
	 * Bullets
	 */

	rules.bullet_list_open = function(/* tokens, idx, options, env */) {
	  return '<ul>\n';
	};
	rules.bullet_list_close = function(tokens, idx /*, options, env */) {
	  return '</ul>' + getBreak(tokens, idx);
	};

	/**
	 * List items
	 */

	rules.list_item_open = function(/* tokens, idx, options, env */) {
	  return '<li>';
	};
	rules.list_item_close = function(/* tokens, idx, options, env */) {
	  return '</li>\n';
	};

	/**
	 * Ordered list items
	 */

	rules.ordered_list_open = function(tokens, idx /*, options, env */) {
	  var token = tokens[idx];
	  var order = token.order > 1 ? ' start="' + token.order + '"' : '';
	  return '<ol' + order + '>\n';
	};
	rules.ordered_list_close = function(tokens, idx /*, options, env */) {
	  return '</ol>' + getBreak(tokens, idx);
	};

	/**
	 * Paragraphs
	 */

	rules.paragraph_open = function(tokens, idx /*, options, env */) {
	  return tokens[idx].tight ? '' : '<p>';
	};
	rules.paragraph_close = function(tokens, idx /*, options, env */) {
	  var addBreak = !(tokens[idx].tight && idx && tokens[idx - 1].type === 'inline' && !tokens[idx - 1].content);
	  return (tokens[idx].tight ? '' : '</p>') + (addBreak ? getBreak(tokens, idx) : '');
	};

	/**
	 * Links
	 */

	rules.link_open = function(tokens, idx, options /* env */) {
	  var title = tokens[idx].title ? (' title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '"') : '';
	  var target = options.linkTarget ? (' target="' + options.linkTarget + '"') : '';
	  return '<a href="' + escapeHtml(tokens[idx].href) + '"' + title + target + '>';
	};
	rules.link_close = function(/* tokens, idx, options, env */) {
	  return '</a>';
	};

	/**
	 * Images
	 */

	rules.image = function(tokens, idx, options /*, env */) {
	  var src = ' src="' + escapeHtml(tokens[idx].src) + '"';
	  var title = tokens[idx].title ? (' title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '"') : '';
	  var alt = ' alt="' + (tokens[idx].alt ? escapeHtml(replaceEntities(unescapeMd(tokens[idx].alt))) : '') + '"';
	  var suffix = options.xhtmlOut ? ' /' : '';
	  return '<img' + src + alt + title + suffix + '>';
	};

	/**
	 * Tables
	 */

	rules.table_open = function(/* tokens, idx, options, env */) {
	  return '<table>\n';
	};
	rules.table_close = function(/* tokens, idx, options, env */) {
	  return '</table>\n';
	};
	rules.thead_open = function(/* tokens, idx, options, env */) {
	  return '<thead>\n';
	};
	rules.thead_close = function(/* tokens, idx, options, env */) {
	  return '</thead>\n';
	};
	rules.tbody_open = function(/* tokens, idx, options, env */) {
	  return '<tbody>\n';
	};
	rules.tbody_close = function(/* tokens, idx, options, env */) {
	  return '</tbody>\n';
	};
	rules.tr_open = function(/* tokens, idx, options, env */) {
	  return '<tr>';
	};
	rules.tr_close = function(/* tokens, idx, options, env */) {
	  return '</tr>\n';
	};
	rules.th_open = function(tokens, idx /*, options, env */) {
	  var token = tokens[idx];
	  return '<th'
	    + (token.align ? ' style="text-align:' + token.align + '"' : '')
	    + '>';
	};
	rules.th_close = function(/* tokens, idx, options, env */) {
	  return '</th>';
	};
	rules.td_open = function(tokens, idx /*, options, env */) {
	  var token = tokens[idx];
	  return '<td'
	    + (token.align ? ' style="text-align:' + token.align + '"' : '')
	    + '>';
	};
	rules.td_close = function(/* tokens, idx, options, env */) {
	  return '</td>';
	};

	/**
	 * Bold
	 */

	rules.strong_open = function(/* tokens, idx, options, env */) {
	  return '<strong>';
	};
	rules.strong_close = function(/* tokens, idx, options, env */) {
	  return '</strong>';
	};

	/**
	 * Italicize
	 */

	rules.em_open = function(/* tokens, idx, options, env */) {
	  return '<em>';
	};
	rules.em_close = function(/* tokens, idx, options, env */) {
	  return '</em>';
	};

	/**
	 * Strikethrough
	 */

	rules.del_open = function(/* tokens, idx, options, env */) {
	  return '<del>';
	};
	rules.del_close = function(/* tokens, idx, options, env */) {
	  return '</del>';
	};

	/**
	 * Insert
	 */

	rules.ins_open = function(/* tokens, idx, options, env */) {
	  return '<ins>';
	};
	rules.ins_close = function(/* tokens, idx, options, env */) {
	  return '</ins>';
	};

	/**
	 * Highlight
	 */

	rules.mark_open = function(/* tokens, idx, options, env */) {
	  return '<mark>';
	};
	rules.mark_close = function(/* tokens, idx, options, env */) {
	  return '</mark>';
	};

	/**
	 * Super- and sub-script
	 */

	rules.sub = function(tokens, idx /*, options, env */) {
	  return '<sub>' + escapeHtml(tokens[idx].content) + '</sub>';
	};
	rules.sup = function(tokens, idx /*, options, env */) {
	  return '<sup>' + escapeHtml(tokens[idx].content) + '</sup>';
	};

	/**
	 * Breaks
	 */

	rules.hardbreak = function(tokens, idx, options /*, env */) {
	  return options.xhtmlOut ? '<br />\n' : '<br>\n';
	};
	rules.softbreak = function(tokens, idx, options /*, env */) {
	  return options.breaks ? (options.xhtmlOut ? '<br />\n' : '<br>\n') : '\n';
	};

	/**
	 * Text
	 */

	rules.text = function(tokens, idx /*, options, env */) {
	  return escapeHtml(tokens[idx].content);
	};

	/**
	 * Content
	 */

	rules.htmlblock = function(tokens, idx /*, options, env */) {
	  return tokens[idx].content;
	};
	rules.htmltag = function(tokens, idx /*, options, env */) {
	  return tokens[idx].content;
	};

	/**
	 * Abbreviations, initialism
	 */

	rules.abbr_open = function(tokens, idx /*, options, env */) {
	  return '<abbr title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '">';
	};
	rules.abbr_close = function(/* tokens, idx, options, env */) {
	  return '</abbr>';
	};

	/**
	 * Footnotes
	 */

	rules.footnote_ref = function(tokens, idx) {
	  var n = Number(tokens[idx].id + 1).toString();
	  var id = 'fnref' + n;
	  if (tokens[idx].subId > 0) {
	    id += ':' + tokens[idx].subId;
	  }
	  return '<sup class="footnote-ref"><a href="#fn' + n + '" id="' + id + '">[' + n + ']</a></sup>';
	};
	rules.footnote_block_open = function(tokens, idx, options) {
	  var hr = options.xhtmlOut
	    ? '<hr class="footnotes-sep" />\n'
	    : '<hr class="footnotes-sep">\n';
	  return hr + '<section class="footnotes">\n<ol class="footnotes-list">\n';
	};
	rules.footnote_block_close = function() {
	  return '</ol>\n</section>\n';
	};
	rules.footnote_open = function(tokens, idx) {
	  var id = Number(tokens[idx].id + 1).toString();
	  return '<li id="fn' + id + '"  class="footnote-item">';
	};
	rules.footnote_close = function() {
	  return '</li>\n';
	};
	rules.footnote_anchor = function(tokens, idx) {
	  var n = Number(tokens[idx].id + 1).toString();
	  var id = 'fnref' + n;
	  if (tokens[idx].subId > 0) {
	    id += ':' + tokens[idx].subId;
	  }
	  return ' <a href="#' + id + '" class="footnote-backref">↩</a>';
	};

	/**
	 * Definition lists
	 */

	rules.dl_open = function() {
	  return '<dl>\n';
	};
	rules.dt_open = function() {
	  return '<dt>';
	};
	rules.dd_open = function() {
	  return '<dd>';
	};
	rules.dl_close = function() {
	  return '</dl>\n';
	};
	rules.dt_close = function() {
	  return '</dt>\n';
	};
	rules.dd_close = function() {
	  return '</dd>\n';
	};

	/**
	 * Helper functions
	 */

	function nextToken(tokens, idx) {
	  if (++idx >= tokens.length - 2) {
	    return idx;
	  }
	  if ((tokens[idx].type === 'paragraph_open' && tokens[idx].tight) &&
	      (tokens[idx + 1].type === 'inline' && tokens[idx + 1].content.length === 0) &&
	      (tokens[idx + 2].type === 'paragraph_close' && tokens[idx + 2].tight)) {
	    return nextToken(tokens, idx + 2);
	  }
	  return idx;
	}

	/**
	 * Check to see if `\n` is needed before the next token.
	 *
	 * @param  {Array} `tokens`
	 * @param  {Number} `idx`
	 * @return {String} Empty string or newline
	 * @api private
	 */

	var getBreak = rules.getBreak = function getBreak(tokens, idx) {
	  idx = nextToken(tokens, idx);
	  if (idx < tokens.length && tokens[idx].type === 'list_item_close') {
	    return '';
	  }
	  return '\n';
	};

	/**
	 * Expose `rules`
	 */

	module.exports = rules;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Local dependencies
	 */

	var Ruler = __webpack_require__(249);

	/**
	 * Core parser `rules`
	 */

	var _rules = [
	  [ 'block',          __webpack_require__(250)          ],
	  [ 'abbr',           __webpack_require__(251)           ],
	  [ 'references',     __webpack_require__(254)     ],
	  [ 'inline',         __webpack_require__(259)         ],
	  [ 'footnote_tail',  __webpack_require__(260)  ],
	  [ 'abbr2',          __webpack_require__(261)          ],
	  [ 'replacements',   __webpack_require__(262)   ],
	  [ 'smartquotes',    __webpack_require__(263)    ],
	  [ 'linkify',        __webpack_require__(264)        ]
	];

	/**
	 * Class for top level (`core`) parser rules
	 *
	 * @api private
	 */

	function Core() {
	  this.options = {};
	  this.ruler = new Ruler();
	  for (var i = 0; i < _rules.length; i++) {
	    this.ruler.push(_rules[i][0], _rules[i][1]);
	  }
	}

	/**
	 * Process rules with the given `state`
	 *
	 * @param  {Object} `state`
	 * @api private
	 */

	Core.prototype.process = function (state) {
	  var i, l, rules;
	  rules = this.ruler.getRules('');
	  for (i = 0, l = rules.length; i < l; i++) {
	    rules[i](state);
	  }
	};

	/**
	 * Expose `Core`
	 */

	module.exports = Core;


/***/ }),
/* 249 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Ruler is a helper class for building responsibility chains from
	 * parse rules. It allows:
	 *
	 *   - easy stack rules chains
	 *   - getting main chain and named chains content (as arrays of functions)
	 *
	 * Helper methods, should not be used directly.
	 * @api private
	 */

	function Ruler() {
	  // List of added rules. Each element is:
	  //
	  // { name: XXX,
	  //   enabled: Boolean,
	  //   fn: Function(),
	  //   alt: [ name2, name3 ] }
	  //
	  this.__rules__ = [];

	  // Cached rule chains.
	  //
	  // First level - chain name, '' for default.
	  // Second level - digital anchor for fast filtering by charcodes.
	  //
	  this.__cache__ = null;
	}

	/**
	 * Find the index of a rule by `name`.
	 *
	 * @param  {String} `name`
	 * @return {Number} Index of the given `name`
	 * @api private
	 */

	Ruler.prototype.__find__ = function (name) {
	  var len = this.__rules__.length;
	  var i = -1;

	  while (len--) {
	    if (this.__rules__[++i].name === name) {
	      return i;
	    }
	  }
	  return -1;
	};

	/**
	 * Build the rules lookup cache
	 *
	 * @api private
	 */

	Ruler.prototype.__compile__ = function () {
	  var self = this;
	  var chains = [ '' ];

	  // collect unique names
	  self.__rules__.forEach(function (rule) {
	    if (!rule.enabled) {
	      return;
	    }

	    rule.alt.forEach(function (altName) {
	      if (chains.indexOf(altName) < 0) {
	        chains.push(altName);
	      }
	    });
	  });

	  self.__cache__ = {};

	  chains.forEach(function (chain) {
	    self.__cache__[chain] = [];
	    self.__rules__.forEach(function (rule) {
	      if (!rule.enabled) {
	        return;
	      }

	      if (chain && rule.alt.indexOf(chain) < 0) {
	        return;
	      }
	      self.__cache__[chain].push(rule.fn);
	    });
	  });
	};

	/**
	 * Ruler public methods
	 * ------------------------------------------------
	 */

	/**
	 * Replace rule function
	 *
	 * @param  {String} `name` Rule name
	 * @param  {Function `fn`
	 * @param  {Object} `options`
	 * @api private
	 */

	Ruler.prototype.at = function (name, fn, options) {
	  var idx = this.__find__(name);
	  var opt = options || {};

	  if (idx === -1) {
	    throw new Error('Parser rule not found: ' + name);
	  }

	  this.__rules__[idx].fn = fn;
	  this.__rules__[idx].alt = opt.alt || [];
	  this.__cache__ = null;
	};

	/**
	 * Add a rule to the chain before given the `ruleName`.
	 *
	 * @param  {String}   `beforeName`
	 * @param  {String}   `ruleName`
	 * @param  {Function} `fn`
	 * @param  {Object}   `options`
	 * @api private
	 */

	Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
	  var idx = this.__find__(beforeName);
	  var opt = options || {};

	  if (idx === -1) {
	    throw new Error('Parser rule not found: ' + beforeName);
	  }

	  this.__rules__.splice(idx, 0, {
	    name: ruleName,
	    enabled: true,
	    fn: fn,
	    alt: opt.alt || []
	  });

	  this.__cache__ = null;
	};

	/**
	 * Add a rule to the chain after the given `ruleName`.
	 *
	 * @param  {String}   `afterName`
	 * @param  {String}   `ruleName`
	 * @param  {Function} `fn`
	 * @param  {Object}   `options`
	 * @api private
	 */

	Ruler.prototype.after = function (afterName, ruleName, fn, options) {
	  var idx = this.__find__(afterName);
	  var opt = options || {};

	  if (idx === -1) {
	    throw new Error('Parser rule not found: ' + afterName);
	  }

	  this.__rules__.splice(idx + 1, 0, {
	    name: ruleName,
	    enabled: true,
	    fn: fn,
	    alt: opt.alt || []
	  });

	  this.__cache__ = null;
	};

	/**
	 * Add a rule to the end of chain.
	 *
	 * @param  {String}   `ruleName`
	 * @param  {Function} `fn`
	 * @param  {Object}   `options`
	 * @return {String}
	 */

	Ruler.prototype.push = function (ruleName, fn, options) {
	  var opt = options || {};

	  this.__rules__.push({
	    name: ruleName,
	    enabled: true,
	    fn: fn,
	    alt: opt.alt || []
	  });

	  this.__cache__ = null;
	};

	/**
	 * Enable a rule or list of rules.
	 *
	 * @param  {String|Array} `list` Name or array of rule names to enable
	 * @param  {Boolean} `strict` If `true`, all non listed rules will be disabled.
	 * @api private
	 */

	Ruler.prototype.enable = function (list, strict) {
	  list = !Array.isArray(list)
	    ? [ list ]
	    : list;

	  // In strict mode disable all existing rules first
	  if (strict) {
	    this.__rules__.forEach(function (rule) {
	      rule.enabled = false;
	    });
	  }

	  // Search by name and enable
	  list.forEach(function (name) {
	    var idx = this.__find__(name);
	    if (idx < 0) {
	      throw new Error('Rules manager: invalid rule name ' + name);
	    }
	    this.__rules__[idx].enabled = true;
	  }, this);

	  this.__cache__ = null;
	};


	/**
	 * Disable a rule or list of rules.
	 *
	 * @param  {String|Array} `list` Name or array of rule names to disable
	 * @api private
	 */

	Ruler.prototype.disable = function (list) {
	  list = !Array.isArray(list)
	    ? [ list ]
	    : list;

	  // Search by name and disable
	  list.forEach(function (name) {
	    var idx = this.__find__(name);
	    if (idx < 0) {
	      throw new Error('Rules manager: invalid rule name ' + name);
	    }
	    this.__rules__[idx].enabled = false;
	  }, this);

	  this.__cache__ = null;
	};

	/**
	 * Get a rules list as an array of functions.
	 *
	 * @param  {String} `chainName`
	 * @return {Object}
	 * @api private
	 */

	Ruler.prototype.getRules = function (chainName) {
	  if (this.__cache__ === null) {
	    this.__compile__();
	  }
	  return this.__cache__[chainName] || [];
	};

	/**
	 * Expose `Ruler`
	 */

	module.exports = Ruler;


/***/ }),
/* 250 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function block(state) {

	  if (state.inlineMode) {
	    state.tokens.push({
	      type: 'inline',
	      content: state.src.replace(/\n/g, ' ').trim(),
	      level: 0,
	      lines: [ 0, 1 ],
	      children: []
	    });

	  } else {
	    state.block.parse(state.src, state.options, state.env, state.tokens);
	  }
	};


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	// Parse abbreviation definitions, i.e. `*[abbr]: description`
	//

	'use strict';


	var StateInline    = __webpack_require__(252);
	var parseLinkLabel = __webpack_require__(253);


	function parseAbbr(str, parserInline, options, env) {
	  var state, labelEnd, pos, max, label, title;

	  if (str.charCodeAt(0) !== 0x2A/* * */) { return -1; }
	  if (str.charCodeAt(1) !== 0x5B/* [ */) { return -1; }

	  if (str.indexOf(']:') === -1) { return -1; }

	  state = new StateInline(str, parserInline, options, env, []);
	  labelEnd = parseLinkLabel(state, 1);

	  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return -1; }

	  max = state.posMax;

	  // abbr title is always one line, so looking for ending "\n" here
	  for (pos = labelEnd + 2; pos < max; pos++) {
	    if (state.src.charCodeAt(pos) === 0x0A) { break; }
	  }

	  label = str.slice(2, labelEnd);
	  title = str.slice(labelEnd + 2, pos).trim();
	  if (title.length === 0) { return -1; }
	  if (!env.abbreviations) { env.abbreviations = {}; }
	  // prepend ':' to avoid conflict with Object.prototype members
	  if (typeof env.abbreviations[':' + label] === 'undefined') {
	    env.abbreviations[':' + label] = title;
	  }

	  return pos;
	}

	module.exports = function abbr(state) {
	  var tokens = state.tokens, i, l, content, pos;

	  if (state.inlineMode) {
	    return;
	  }

	  // Parse inlines
	  for (i = 1, l = tokens.length - 1; i < l; i++) {
	    if (tokens[i - 1].type === 'paragraph_open' &&
	        tokens[i].type === 'inline' &&
	        tokens[i + 1].type === 'paragraph_close') {

	      content = tokens[i].content;
	      while (content.length) {
	        pos = parseAbbr(content, state.inline, state.options, state.env);
	        if (pos < 0) { break; }
	        content = content.slice(pos).trim();
	      }

	      tokens[i].content = content;
	      if (!content.length) {
	        tokens[i - 1].tight = true;
	        tokens[i + 1].tight = true;
	      }
	    }
	  }
	};


/***/ }),
/* 252 */
/***/ (function(module, exports) {

	// Inline parser state

	'use strict';

	function StateInline(src, parserInline, options, env, outTokens) {
	  this.src = src;
	  this.env = env;
	  this.options = options;
	  this.parser = parserInline;
	  this.tokens = outTokens;
	  this.pos = 0;
	  this.posMax = this.src.length;
	  this.level = 0;
	  this.pending = '';
	  this.pendingLevel = 0;

	  this.cache = [];        // Stores { start: end } pairs. Useful for backtrack
	                          // optimization of pairs parse (emphasis, strikes).

	  // Link parser state vars

	  this.isInLabel = false; // Set true when seek link label - we should disable
	                          // "paired" rules (emphasis, strikes) to not skip
	                          // tailing `]`

	  this.linkLevel = 0;     // Increment for each nesting link. Used to prevent
	                          // nesting in definitions

	  this.linkContent = '';  // Temporary storage for link url

	  this.labelUnmatchedScopes = 0; // Track unpaired `[` for link labels
	                                 // (backtrack optimization)
	}

	// Flush pending text
	//
	StateInline.prototype.pushPending = function () {
	  this.tokens.push({
	    type: 'text',
	    content: this.pending,
	    level: this.pendingLevel
	  });
	  this.pending = '';
	};

	// Push new token to "stream".
	// If pending text exists - flush it as text token
	//
	StateInline.prototype.push = function (token) {
	  if (this.pending) {
	    this.pushPending();
	  }

	  this.tokens.push(token);
	  this.pendingLevel = this.level;
	};

	// Store value to cache.
	// !!! Implementation has parser-specific optimizations
	// !!! keys MUST be integer, >= 0; values MUST be integer, > 0
	//
	StateInline.prototype.cacheSet = function (key, val) {
	  for (var i = this.cache.length; i <= key; i++) {
	    this.cache.push(0);
	  }

	  this.cache[key] = val;
	};

	// Get cache value
	//
	StateInline.prototype.cacheGet = function (key) {
	  return key < this.cache.length ? this.cache[key] : 0;
	};

	module.exports = StateInline;


/***/ }),
/* 253 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Parse link labels
	 *
	 * This function assumes that first character (`[`) already matches;
	 * returns the end of the label.
	 *
	 * @param  {Object} state
	 * @param  {Number} start
	 * @api private
	 */

	module.exports = function parseLinkLabel(state, start) {
	  var level, found, marker,
	      labelEnd = -1,
	      max = state.posMax,
	      oldPos = state.pos,
	      oldFlag = state.isInLabel;

	  if (state.isInLabel) { return -1; }

	  if (state.labelUnmatchedScopes) {
	    state.labelUnmatchedScopes--;
	    return -1;
	  }

	  state.pos = start + 1;
	  state.isInLabel = true;
	  level = 1;

	  while (state.pos < max) {
	    marker = state.src.charCodeAt(state.pos);
	    if (marker === 0x5B /* [ */) {
	      level++;
	    } else if (marker === 0x5D /* ] */) {
	      level--;
	      if (level === 0) {
	        found = true;
	        break;
	      }
	    }

	    state.parser.skipToken(state);
	  }

	  if (found) {
	    labelEnd = state.pos;
	    state.labelUnmatchedScopes = 0;
	  } else {
	    state.labelUnmatchedScopes = level - 1;
	  }

	  // restore old state
	  state.pos = oldPos;
	  state.isInLabel = oldFlag;

	  return labelEnd;
	};


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';


	var StateInline          = __webpack_require__(252);
	var parseLinkLabel       = __webpack_require__(253);
	var parseLinkDestination = __webpack_require__(255);
	var parseLinkTitle       = __webpack_require__(257);
	var normalizeReference   = __webpack_require__(258);


	function parseReference(str, parser, options, env) {
	  var state, labelEnd, pos, max, code, start, href, title, label;

	  if (str.charCodeAt(0) !== 0x5B/* [ */) { return -1; }

	  if (str.indexOf(']:') === -1) { return -1; }

	  state = new StateInline(str, parser, options, env, []);
	  labelEnd = parseLinkLabel(state, 0);

	  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return -1; }

	  max = state.posMax;

	  // [label]:   destination   'title'
	  //         ^^^ skip optional whitespace here
	  for (pos = labelEnd + 2; pos < max; pos++) {
	    code = state.src.charCodeAt(pos);
	    if (code !== 0x20 && code !== 0x0A) { break; }
	  }

	  // [label]:   destination   'title'
	  //            ^^^^^^^^^^^ parse this
	  if (!parseLinkDestination(state, pos)) { return -1; }
	  href = state.linkContent;
	  pos = state.pos;

	  // [label]:   destination   'title'
	  //                       ^^^ skipping those spaces
	  start = pos;
	  for (pos = pos + 1; pos < max; pos++) {
	    code = state.src.charCodeAt(pos);
	    if (code !== 0x20 && code !== 0x0A) { break; }
	  }

	  // [label]:   destination   'title'
	  //                          ^^^^^^^ parse this
	  if (pos < max && start !== pos && parseLinkTitle(state, pos)) {
	    title = state.linkContent;
	    pos = state.pos;
	  } else {
	    title = '';
	    pos = start;
	  }

	  // ensure that the end of the line is empty
	  while (pos < max && state.src.charCodeAt(pos) === 0x20/* space */) { pos++; }
	  if (pos < max && state.src.charCodeAt(pos) !== 0x0A) { return -1; }

	  label = normalizeReference(str.slice(1, labelEnd));
	  if (typeof env.references[label] === 'undefined') {
	    env.references[label] = { title: title, href: href };
	  }

	  return pos;
	}


	module.exports = function references(state) {
	  var tokens = state.tokens, i, l, content, pos;

	  state.env.references = state.env.references || {};

	  if (state.inlineMode) {
	    return;
	  }

	  // Scan definitions in paragraph inlines
	  for (i = 1, l = tokens.length - 1; i < l; i++) {
	    if (tokens[i].type === 'inline' &&
	        tokens[i - 1].type === 'paragraph_open' &&
	        tokens[i + 1].type === 'paragraph_close') {

	      content = tokens[i].content;
	      while (content.length) {
	        pos = parseReference(content, state.inline, state.options, state.env);
	        if (pos < 0) { break; }
	        content = content.slice(pos).trim();
	      }

	      tokens[i].content = content;
	      if (!content.length) {
	        tokens[i - 1].tight = true;
	        tokens[i + 1].tight = true;
	      }
	    }
	  }
	};


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';


	var normalizeLink = __webpack_require__(256);
	var unescapeMd    = __webpack_require__(244).unescapeMd;

	/**
	 * Parse link destination
	 *
	 *   - on success it returns a string and updates state.pos;
	 *   - on failure it returns null
	 *
	 * @param  {Object} state
	 * @param  {Number} pos
	 * @api private
	 */

	module.exports = function parseLinkDestination(state, pos) {
	  var code, level, link,
	      start = pos,
	      max = state.posMax;

	  if (state.src.charCodeAt(pos) === 0x3C /* < */) {
	    pos++;
	    while (pos < max) {
	      code = state.src.charCodeAt(pos);
	      if (code === 0x0A /* \n */) { return false; }
	      if (code === 0x3E /* > */) {
	        link = normalizeLink(unescapeMd(state.src.slice(start + 1, pos)));
	        if (!state.parser.validateLink(link)) { return false; }
	        state.pos = pos + 1;
	        state.linkContent = link;
	        return true;
	      }
	      if (code === 0x5C /* \ */ && pos + 1 < max) {
	        pos += 2;
	        continue;
	      }

	      pos++;
	    }

	    // no closing '>'
	    return false;
	  }

	  // this should be ... } else { ... branch

	  level = 0;
	  while (pos < max) {
	    code = state.src.charCodeAt(pos);

	    if (code === 0x20) { break; }

	    if (code > 0x08 && code < 0x0e) { break; }

	    if (code === 0x5C /* \ */ && pos + 1 < max) {
	      pos += 2;
	      continue;
	    }

	    if (code === 0x28 /* ( */) {
	      level++;
	      if (level > 1) { break; }
	    }

	    if (code === 0x29 /* ) */) {
	      level--;
	      if (level < 0) { break; }
	    }

	    pos++;
	  }

	  if (start === pos) { return false; }

	  link = unescapeMd(state.src.slice(start, pos));
	  if (!state.parser.validateLink(link)) { return false; }

	  state.linkContent = link;
	  state.pos = pos;
	  return true;
	};


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var replaceEntities = __webpack_require__(244).replaceEntities;

	module.exports = function normalizeLink(url) {
	  var normalized = replaceEntities(url);
	  // We shouldn't care about the result of malformed URIs,
	  // and should not throw an exception.
	  try {
	    normalized = decodeURI(normalized);
	  } catch (err) {}
	  return encodeURI(normalized);
	};


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';


	var unescapeMd = __webpack_require__(244).unescapeMd;

	/**
	 * Parse link title
	 *
	 *   - on success it returns a string and updates state.pos;
	 *   - on failure it returns null
	 *
	 * @param  {Object} state
	 * @param  {Number} pos
	 * @api private
	 */

	module.exports = function parseLinkTitle(state, pos) {
	  var code,
	      start = pos,
	      max = state.posMax,
	      marker = state.src.charCodeAt(pos);

	  if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return false; }

	  pos++;

	  // if opening marker is "(", switch it to closing marker ")"
	  if (marker === 0x28) { marker = 0x29; }

	  while (pos < max) {
	    code = state.src.charCodeAt(pos);
	    if (code === marker) {
	      state.pos = pos + 1;
	      state.linkContent = unescapeMd(state.src.slice(start + 1, pos));
	      return true;
	    }
	    if (code === 0x5C /* \ */ && pos + 1 < max) {
	      pos += 2;
	      continue;
	    }

	    pos++;
	  }

	  return false;
	};


/***/ }),
/* 258 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function normalizeReference(str) {
	  // use .toUpperCase() instead of .toLowerCase()
	  // here to avoid a conflict with Object.prototype
	  // members (most notably, `__proto__`)
	  return str.trim().replace(/\s+/g, ' ').toUpperCase();
	};


/***/ }),
/* 259 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function inline(state) {
	  var tokens = state.tokens, tok, i, l;

	  // Parse inlines
	  for (i = 0, l = tokens.length; i < l; i++) {
	    tok = tokens[i];
	    if (tok.type === 'inline') {
	      state.inline.parse(tok.content, state.options, state.env, tok.children);
	    }
	  }
	};


/***/ }),
/* 260 */
/***/ (function(module, exports) {

	'use strict';


	module.exports = function footnote_block(state) {
	  var i, l, j, t, lastParagraph, list, tokens, current, currentLabel,
	      level = 0,
	      insideRef = false,
	      refTokens = {};

	  if (!state.env.footnotes) { return; }

	  state.tokens = state.tokens.filter(function(tok) {
	    if (tok.type === 'footnote_reference_open') {
	      insideRef = true;
	      current = [];
	      currentLabel = tok.label;
	      return false;
	    }
	    if (tok.type === 'footnote_reference_close') {
	      insideRef = false;
	      // prepend ':' to avoid conflict with Object.prototype members
	      refTokens[':' + currentLabel] = current;
	      return false;
	    }
	    if (insideRef) { current.push(tok); }
	    return !insideRef;
	  });

	  if (!state.env.footnotes.list) { return; }
	  list = state.env.footnotes.list;

	  state.tokens.push({
	    type: 'footnote_block_open',
	    level: level++
	  });
	  for (i = 0, l = list.length; i < l; i++) {
	    state.tokens.push({
	      type: 'footnote_open',
	      id: i,
	      level: level++
	    });

	    if (list[i].tokens) {
	      tokens = [];
	      tokens.push({
	        type: 'paragraph_open',
	        tight: false,
	        level: level++
	      });
	      tokens.push({
	        type: 'inline',
	        content: '',
	        level: level,
	        children: list[i].tokens
	      });
	      tokens.push({
	        type: 'paragraph_close',
	        tight: false,
	        level: --level
	      });
	    } else if (list[i].label) {
	      tokens = refTokens[':' + list[i].label];
	    }

	    state.tokens = state.tokens.concat(tokens);
	    if (state.tokens[state.tokens.length - 1].type === 'paragraph_close') {
	      lastParagraph = state.tokens.pop();
	    } else {
	      lastParagraph = null;
	    }

	    t = list[i].count > 0 ? list[i].count : 1;
	    for (j = 0; j < t; j++) {
	      state.tokens.push({
	        type: 'footnote_anchor',
	        id: i,
	        subId: j,
	        level: level
	      });
	    }

	    if (lastParagraph) {
	      state.tokens.push(lastParagraph);
	    }

	    state.tokens.push({
	      type: 'footnote_close',
	      level: --level
	    });
	  }
	  state.tokens.push({
	    type: 'footnote_block_close',
	    level: --level
	  });
	};


/***/ }),
/* 261 */
/***/ (function(module, exports) {

	// Enclose abbreviations in <abbr> tags
	//
	'use strict';


	var PUNCT_CHARS = ' \n()[]\'".,!?-';


	// from Google closure library
	// http://closure-library.googlecode.com/git-history/docs/local_closure_goog_string_string.js.source.html#line1021
	function regEscape(s) {
	  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1');
	}


	module.exports = function abbr2(state) {
	  var i, j, l, tokens, token, text, nodes, pos, level, reg, m, regText,
	      blockTokens = state.tokens;

	  if (!state.env.abbreviations) { return; }
	  if (!state.env.abbrRegExp) {
	    regText = '(^|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])'
	            + '(' + Object.keys(state.env.abbreviations).map(function (x) {
	                      return x.substr(1);
	                    }).sort(function (a, b) {
	                      return b.length - a.length;
	                    }).map(regEscape).join('|') + ')'
	            + '($|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])';
	    state.env.abbrRegExp = new RegExp(regText, 'g');
	  }
	  reg = state.env.abbrRegExp;

	  for (j = 0, l = blockTokens.length; j < l; j++) {
	    if (blockTokens[j].type !== 'inline') { continue; }
	    tokens = blockTokens[j].children;

	    // We scan from the end, to keep position when new tags added.
	    for (i = tokens.length - 1; i >= 0; i--) {
	      token = tokens[i];
	      if (token.type !== 'text') { continue; }

	      pos = 0;
	      text = token.content;
	      reg.lastIndex = 0;
	      level = token.level;
	      nodes = [];

	      while ((m = reg.exec(text))) {
	        if (reg.lastIndex > pos) {
	          nodes.push({
	            type: 'text',
	            content: text.slice(pos, m.index + m[1].length),
	            level: level
	          });
	        }

	        nodes.push({
	          type: 'abbr_open',
	          title: state.env.abbreviations[':' + m[2]],
	          level: level++
	        });
	        nodes.push({
	          type: 'text',
	          content: m[2],
	          level: level
	        });
	        nodes.push({
	          type: 'abbr_close',
	          level: --level
	        });
	        pos = reg.lastIndex - m[3].length;
	      }

	      if (!nodes.length) { continue; }

	      if (pos < text.length) {
	        nodes.push({
	          type: 'text',
	          content: text.slice(pos),
	          level: level
	        });
	      }

	      // replace current node
	      blockTokens[j].children = tokens = [].concat(tokens.slice(0, i), nodes, tokens.slice(i + 1));
	    }
	  }
	};


/***/ }),
/* 262 */
/***/ (function(module, exports) {

	// Simple typographical replacements
	//
	'use strict';

	// TODO:
	// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
	// - miltiplication 2 x 4 -> 2 × 4

	var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;

	var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
	var SCOPED_ABBR = {
	  'c': '©',
	  'r': '®',
	  'p': '§',
	  'tm': '™'
	};

	function replaceScopedAbbr(str) {
	  if (str.indexOf('(') < 0) { return str; }

	  return str.replace(SCOPED_ABBR_RE, function(match, name) {
	    return SCOPED_ABBR[name.toLowerCase()];
	  });
	}


	module.exports = function replace(state) {
	  var i, token, text, inlineTokens, blkIdx;

	  if (!state.options.typographer) { return; }

	  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

	    if (state.tokens[blkIdx].type !== 'inline') { continue; }

	    inlineTokens = state.tokens[blkIdx].children;

	    for (i = inlineTokens.length - 1; i >= 0; i--) {
	      token = inlineTokens[i];
	      if (token.type === 'text') {
	        text = token.content;

	        text = replaceScopedAbbr(text);

	        if (RARE_RE.test(text)) {
	          text = text
	            .replace(/\+-/g, '±')
	            // .., ..., ....... -> …
	            // but ?..... & !..... -> ?.. & !..
	            .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..')
	            .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
	            // em-dash
	            .replace(/(^|[^-])---([^-]|$)/mg, '$1\u2014$2')
	            // en-dash
	            .replace(/(^|\s)--(\s|$)/mg, '$1\u2013$2')
	            .replace(/(^|[^-\s])--([^-\s]|$)/mg, '$1\u2013$2');
	        }

	        token.content = text;
	      }
	    }
	  }
	};


/***/ }),
/* 263 */
/***/ (function(module, exports) {

	// Convert straight quotation marks to typographic ones
	//
	'use strict';


	var QUOTE_TEST_RE = /['"]/;
	var QUOTE_RE = /['"]/g;
	var PUNCT_RE = /[-\s()\[\]]/;
	var APOSTROPHE = '’';

	// This function returns true if the character at `pos`
	// could be inside a word.
	function isLetter(str, pos) {
	  if (pos < 0 || pos >= str.length) { return false; }
	  return !PUNCT_RE.test(str[pos]);
	}


	function replaceAt(str, index, ch) {
	  return str.substr(0, index) + ch + str.substr(index + 1);
	}


	module.exports = function smartquotes(state) {
	  /*eslint max-depth:0*/
	  var i, token, text, t, pos, max, thisLevel, lastSpace, nextSpace, item,
	      canOpen, canClose, j, isSingle, blkIdx, tokens,
	      stack;

	  if (!state.options.typographer) { return; }

	  stack = [];

	  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

	    if (state.tokens[blkIdx].type !== 'inline') { continue; }

	    tokens = state.tokens[blkIdx].children;
	    stack.length = 0;

	    for (i = 0; i < tokens.length; i++) {
	      token = tokens[i];

	      if (token.type !== 'text' || QUOTE_TEST_RE.test(token.text)) { continue; }

	      thisLevel = tokens[i].level;

	      for (j = stack.length - 1; j >= 0; j--) {
	        if (stack[j].level <= thisLevel) { break; }
	      }
	      stack.length = j + 1;

	      text = token.content;
	      pos = 0;
	      max = text.length;

	      /*eslint no-labels:0,block-scoped-var:0*/
	      OUTER:
	      while (pos < max) {
	        QUOTE_RE.lastIndex = pos;
	        t = QUOTE_RE.exec(text);
	        if (!t) { break; }

	        lastSpace = !isLetter(text, t.index - 1);
	        pos = t.index + 1;
	        isSingle = (t[0] === "'");
	        nextSpace = !isLetter(text, pos);

	        if (!nextSpace && !lastSpace) {
	          // middle of word
	          if (isSingle) {
	            token.content = replaceAt(token.content, t.index, APOSTROPHE);
	          }
	          continue;
	        }

	        canOpen = !nextSpace;
	        canClose = !lastSpace;

	        if (canClose) {
	          // this could be a closing quote, rewind the stack to get a match
	          for (j = stack.length - 1; j >= 0; j--) {
	            item = stack[j];
	            if (stack[j].level < thisLevel) { break; }
	            if (item.single === isSingle && stack[j].level === thisLevel) {
	              item = stack[j];
	              if (isSingle) {
	                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[2]);
	                token.content = replaceAt(token.content, t.index, state.options.quotes[3]);
	              } else {
	                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[0]);
	                token.content = replaceAt(token.content, t.index, state.options.quotes[1]);
	              }
	              stack.length = j;
	              continue OUTER;
	            }
	          }
	        }

	        if (canOpen) {
	          stack.push({
	            token: i,
	            pos: t.index,
	            single: isSingle,
	            level: thisLevel
	          });
	        } else if (canClose && isSingle) {
	          token.content = replaceAt(token.content, t.index, APOSTROPHE);
	        }
	      }
	    }
	  }
	};


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	// Replace link-like texts with link nodes.
	//
	// Currently restricted by `inline.validateLink()` to http/https/ftp
	//
	'use strict';


	var Autolinker = __webpack_require__(265);


	var LINK_SCAN_RE = /www|@|\:\/\//;


	function isLinkOpen(str) {
	  return /^<a[>\s]/i.test(str);
	}
	function isLinkClose(str) {
	  return /^<\/a\s*>/i.test(str);
	}

	// Stupid fabric to avoid singletons, for thread safety.
	// Required for engines like Nashorn.
	//
	function createLinkifier() {
	  var links = [];
	  var autolinker = new Autolinker({
	    stripPrefix: false,
	    url: true,
	    email: true,
	    twitter: false,
	    replaceFn: function (linker, match) {
	      // Only collect matched strings but don't change anything.
	      switch (match.getType()) {
	        /*eslint default-case:0*/
	        case 'url':
	          links.push({
	            text: match.matchedText,
	            url: match.getUrl()
	          });
	          break;
	        case 'email':
	          links.push({
	            text: match.matchedText,
	            // normalize email protocol
	            url: 'mailto:' + match.getEmail().replace(/^mailto:/i, '')
	          });
	          break;
	      }
	      return false;
	    }
	  });

	  return {
	    links: links,
	    autolinker: autolinker
	  };
	}


	module.exports = function linkify(state) {
	  var i, j, l, tokens, token, text, nodes, ln, pos, level, htmlLinkLevel,
	      blockTokens = state.tokens,
	      linkifier = null, links, autolinker;

	  if (!state.options.linkify) { return; }

	  for (j = 0, l = blockTokens.length; j < l; j++) {
	    if (blockTokens[j].type !== 'inline') { continue; }
	    tokens = blockTokens[j].children;

	    htmlLinkLevel = 0;

	    // We scan from the end, to keep position when new tags added.
	    // Use reversed logic in links start/end match
	    for (i = tokens.length - 1; i >= 0; i--) {
	      token = tokens[i];

	      // Skip content of markdown links
	      if (token.type === 'link_close') {
	        i--;
	        while (tokens[i].level !== token.level && tokens[i].type !== 'link_open') {
	          i--;
	        }
	        continue;
	      }

	      // Skip content of html tag links
	      if (token.type === 'htmltag') {
	        if (isLinkOpen(token.content) && htmlLinkLevel > 0) {
	          htmlLinkLevel--;
	        }
	        if (isLinkClose(token.content)) {
	          htmlLinkLevel++;
	        }
	      }
	      if (htmlLinkLevel > 0) { continue; }

	      if (token.type === 'text' && LINK_SCAN_RE.test(token.content)) {

	        // Init linkifier in lazy manner, only if required.
	        if (!linkifier) {
	          linkifier = createLinkifier();
	          links = linkifier.links;
	          autolinker = linkifier.autolinker;
	        }

	        text = token.content;
	        links.length = 0;
	        autolinker.link(text);

	        if (!links.length) { continue; }

	        // Now split string to nodes
	        nodes = [];
	        level = token.level;

	        for (ln = 0; ln < links.length; ln++) {

	          if (!state.inline.validateLink(links[ln].url)) { continue; }

	          pos = text.indexOf(links[ln].text);

	          if (pos) {
	            level = level;
	            nodes.push({
	              type: 'text',
	              content: text.slice(0, pos),
	              level: level
	            });
	          }
	          nodes.push({
	            type: 'link_open',
	            href: links[ln].url,
	            title: '',
	            level: level++
	          });
	          nodes.push({
	            type: 'text',
	            content: links[ln].text,
	            level: level
	          });
	          nodes.push({
	            type: 'link_close',
	            level: --level
	          });
	          text = text.slice(pos + links[ln].text.length);
	        }
	        if (text.length) {
	          nodes.push({
	            type: 'text',
	            content: text,
	            level: level
	          });
	        }

	        // replace current node
	        blockTokens[j].children = tokens = [].concat(tokens.slice(0, i), nodes, tokens.slice(i + 1));
	      }
	    }
	  }
	};


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module unless amdModuleId is set
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return (root['Autolinker'] = factory());
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    root['Autolinker'] = factory();
	  }
	}(this, function () {

	/*!
	 * Autolinker.js
	 * 0.15.3
	 *
	 * Copyright(c) 2015 Gregory Jacobs <greg@greg-jacobs.com>
	 * MIT Licensed. http://www.opensource.org/licenses/mit-license.php
	 *
	 * https://github.com/gregjacobs/Autolinker.js
	 */
	/**
	 * @class Autolinker
	 * @extends Object
	 * 
	 * Utility class used to process a given string of text, and wrap the URLs, email addresses, and Twitter handles in 
	 * the appropriate anchor (&lt;a&gt;) tags to turn them into links.
	 * 
	 * Any of the configuration options may be provided in an Object (map) provided to the Autolinker constructor, which
	 * will configure how the {@link #link link()} method will process the links.
	 * 
	 * For example:
	 * 
	 *     var autolinker = new Autolinker( {
	 *         newWindow : false,
	 *         truncate  : 30
	 *     } );
	 *     
	 *     var html = autolinker.link( "Joe went to www.yahoo.com" );
	 *     // produces: 'Joe went to <a href="http://www.yahoo.com">yahoo.com</a>'
	 * 
	 * 
	 * The {@link #static-link static link()} method may also be used to inline options into a single call, which may
	 * be more convenient for one-off uses. For example:
	 * 
	 *     var html = Autolinker.link( "Joe went to www.yahoo.com", {
	 *         newWindow : false,
	 *         truncate  : 30
	 *     } );
	 *     // produces: 'Joe went to <a href="http://www.yahoo.com">yahoo.com</a>'
	 * 
	 * 
	 * ## Custom Replacements of Links
	 * 
	 * If the configuration options do not provide enough flexibility, a {@link #replaceFn} may be provided to fully customize
	 * the output of Autolinker. This function is called once for each URL/Email/Twitter handle match that is encountered.
	 * 
	 * For example:
	 * 
	 *     var input = "...";  // string with URLs, Email Addresses, and Twitter Handles
	 *     
	 *     var linkedText = Autolinker.link( input, {
	 *         replaceFn : function( autolinker, match ) {
	 *             console.log( "href = ", match.getAnchorHref() );
	 *             console.log( "text = ", match.getAnchorText() );
	 *         
	 *             switch( match.getType() ) {
	 *                 case 'url' : 
	 *                     console.log( "url: ", match.getUrl() );
	 *                     
	 *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {
	 *                         var tag = autolinker.getTagBuilder().build( match );  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes
	 *                         tag.setAttr( 'rel', 'nofollow' );
	 *                         tag.addClass( 'external-link' );
	 *                         
	 *                         return tag;
	 *                         
	 *                     } else {
	 *                         return true;  // let Autolinker perform its normal anchor tag replacement
	 *                     }
	 *                     
	 *                 case 'email' :
	 *                     var email = match.getEmail();
	 *                     console.log( "email: ", email );
	 *                     
	 *                     if( email === "my@own.address" ) {
	 *                         return false;  // don't auto-link this particular email address; leave as-is
	 *                     } else {
	 *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)
	 *                     }
	 *                 
	 *                 case 'twitter' :
	 *                     var twitterHandle = match.getTwitterHandle();
	 *                     console.log( twitterHandle );
	 *                     
	 *                     return '<a href="http://newplace.to.link.twitter.handles.to/">' + twitterHandle + '</a>';
	 *             }
	 *         }
	 *     } );
	 * 
	 * 
	 * The function may return the following values:
	 * 
	 * - `true` (Boolean): Allow Autolinker to replace the match as it normally would.
	 * - `false` (Boolean): Do not replace the current match at all - leave as-is.
	 * - Any String: If a string is returned from the function, the string will be used directly as the replacement HTML for
	 *   the match.
	 * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify an HTML tag before writing out its HTML text.
	 * 
	 * @constructor
	 * @param {Object} [config] The configuration options for the Autolinker instance, specified in an Object (map).
	 */
	var Autolinker = function( cfg ) {
		Autolinker.Util.assign( this, cfg );  // assign the properties of `cfg` onto the Autolinker instance. Prototype properties will be used for missing configs.
	};


	Autolinker.prototype = {
		constructor : Autolinker,  // fix constructor property
		
		/**
		 * @cfg {Boolean} urls
		 * 
		 * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.
		 */
		urls : true,
		
		/**
		 * @cfg {Boolean} email
		 * 
		 * `true` if email addresses should be automatically linked, `false` if they should not be.
		 */
		email : true,
		
		/**
		 * @cfg {Boolean} twitter
		 * 
		 * `true` if Twitter handles ("@example") should be automatically linked, `false` if they should not be.
		 */
		twitter : true,
		
		/**
		 * @cfg {Boolean} newWindow
		 * 
		 * `true` if the links should open in a new window, `false` otherwise.
		 */
		newWindow : true,
		
		/**
		 * @cfg {Boolean} stripPrefix
		 * 
		 * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text, 
		 * `false` otherwise.
		 */
		stripPrefix : true,
		
		/**
		 * @cfg {Number} truncate
		 * 
		 * A number for how many characters long URLs/emails/twitter handles should be truncated to inside the text of 
		 * a link. If the URL/email/twitter is over this number of characters, it will be truncated to this length by 
		 * adding a two period ellipsis ('..') to the end of the string.
		 * 
		 * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look
		 * something like this: 'yahoo.com/some/long/pat..'
		 */
		truncate : undefined,
		
		/**
		 * @cfg {String} className
		 * 
		 * A CSS class name to add to the generated links. This class will be added to all links, as well as this class
		 * plus url/email/twitter suffixes for styling url/email/twitter links differently.
		 * 
		 * For example, if this config is provided as "myLink", then:
		 * 
		 * - URL links will have the CSS classes: "myLink myLink-url"
		 * - Email links will have the CSS classes: "myLink myLink-email", and
		 * - Twitter links will have the CSS classes: "myLink myLink-twitter"
		 */
		className : "",
		
		/**
		 * @cfg {Function} replaceFn
		 * 
		 * A function to individually process each URL/Email/Twitter match found in the input string.
		 * 
		 * See the class's description for usage.
		 * 
		 * This function is called with the following parameters:
		 * 
		 * @cfg {Autolinker} replaceFn.autolinker The Autolinker instance, which may be used to retrieve child objects from (such
		 *   as the instance's {@link #getTagBuilder tag builder}).
		 * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which can be used to retrieve information about the
		 *   {@link Autolinker.match.Url URL}/{@link Autolinker.match.Email email}/{@link Autolinker.match.Twitter Twitter}
		 *   match that the `replaceFn` is currently processing.
		 */
		
		
		/**
		 * @private
		 * @property {Autolinker.htmlParser.HtmlParser} htmlParser
		 * 
		 * The HtmlParser instance used to skip over HTML tags, while finding text nodes to process. This is lazily instantiated
		 * in the {@link #getHtmlParser} method.
		 */
		htmlParser : undefined,
		
		/**
		 * @private
		 * @property {Autolinker.matchParser.MatchParser} matchParser
		 * 
		 * The MatchParser instance used to find URL/email/Twitter matches in the text nodes of an input string passed to
		 * {@link #link}. This is lazily instantiated in the {@link #getMatchParser} method.
		 */
		matchParser : undefined,
		
		/**
		 * @private
		 * @property {Autolinker.AnchorTagBuilder} tagBuilder
		 * 
		 * The AnchorTagBuilder instance used to build the URL/email/Twitter replacement anchor tags. This is lazily instantiated
		 * in the {@link #getTagBuilder} method.
		 */
		tagBuilder : undefined,
		
		
		/**
		 * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. 
		 * Does not link URLs found within HTML tags.
		 * 
		 * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result
		 * will be `You should go to &lt;a href="http://www.yahoo.com"&gt;http://www.yahoo.com&lt;/a&gt;`
		 * 
		 * This method finds the text around any HTML elements in the input `textOrHtml`, which will be the text that is processed.
		 * Any original HTML elements will be left as-is, as well as the text that is already wrapped in anchor (&lt;a&gt;) tags.
		 * 
		 * @param {String} textOrHtml The HTML or text to link URLs, email addresses, and Twitter handles within (depending on if
		 *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).
		 * @return {String} The HTML, with URLs/emails/Twitter handles automatically linked.
		 */
		link : function( textOrHtml ) {
			var htmlParser = this.getHtmlParser(),
			    htmlNodes = htmlParser.parse( textOrHtml ),
			    anchorTagStackCount = 0,  // used to only process text around anchor tags, and any inner text/html they may have
			    resultHtml = [];
			
			for( var i = 0, len = htmlNodes.length; i < len; i++ ) {
				var node = htmlNodes[ i ],
				    nodeType = node.getType(),
				    nodeText = node.getText();
				
				if( nodeType === 'element' ) {
					// Process HTML nodes in the input `textOrHtml`
					if( node.getTagName() === 'a' ) {
						if( !node.isClosing() ) {  // it's the start <a> tag
							anchorTagStackCount++;
						} else {   // it's the end </a> tag
							anchorTagStackCount = Math.max( anchorTagStackCount - 1, 0 );  // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0
						}
					}
					resultHtml.push( nodeText );  // now add the text of the tag itself verbatim
					
				} else if( nodeType === 'entity' ) {
					resultHtml.push( nodeText );  // append HTML entity nodes (such as '&nbsp;') verbatim
					
				} else {
					// Process text nodes in the input `textOrHtml`
					if( anchorTagStackCount === 0 ) {
						// If we're not within an <a> tag, process the text node to linkify
						var linkifiedStr = this.linkifyStr( nodeText );
						resultHtml.push( linkifiedStr );
						
					} else {
						// `text` is within an <a> tag, simply append the text - we do not want to autolink anything 
						// already within an <a>...</a> tag
						resultHtml.push( nodeText );
					}
				}
			}
			
			return resultHtml.join( "" );
		},
		
		
		/**
		 * Process the text that lies in between HTML tags, performing the anchor tag replacements for matched 
		 * URLs/emails/Twitter handles, and returns the string with the replacements made. 
		 * 
		 * This method does the actual wrapping of URLs/emails/Twitter handles with anchor tags.
		 * 
		 * @private
		 * @param {String} str The string of text to auto-link.
		 * @return {String} The text with anchor tags auto-filled.
		 */
		linkifyStr : function( str ) {
			return this.getMatchParser().replace( str, this.createMatchReturnVal, this );
		},
		
		
		/**
		 * Creates the return string value for a given match in the input string, for the {@link #processTextNode} method.
		 * 
		 * This method handles the {@link #replaceFn}, if one was provided.
		 * 
		 * @private
		 * @param {Autolinker.match.Match} match The Match object that represents the match.
		 * @return {String} The string that the `match` should be replaced with. This is usually the anchor tag string, but
		 *   may be the `matchStr` itself if the match is not to be replaced.
		 */
		createMatchReturnVal : function( match ) {
			// Handle a custom `replaceFn` being provided
			var replaceFnResult;
			if( this.replaceFn ) {
				replaceFnResult = this.replaceFn.call( this, this, match );  // Autolinker instance is the context, and the first arg
			}
			
			if( typeof replaceFnResult === 'string' ) {
				return replaceFnResult;  // `replaceFn` returned a string, use that
				
			} else if( replaceFnResult === false ) {
				return match.getMatchedText();  // no replacement for the match
				
			} else if( replaceFnResult instanceof Autolinker.HtmlTag ) {
				return replaceFnResult.toString();
			
			} else {  // replaceFnResult === true, or no/unknown return value from function
				// Perform Autolinker's default anchor tag generation
				var tagBuilder = this.getTagBuilder(),
				    anchorTag = tagBuilder.build( match );  // returns an Autolinker.HtmlTag instance
				
				return anchorTag.toString();
			}
		},
		
		
		/**
		 * Lazily instantiates and returns the {@link #htmlParser} instance for this Autolinker instance.
		 * 
		 * @protected
		 * @return {Autolinker.htmlParser.HtmlParser}
		 */
		getHtmlParser : function() {
			var htmlParser = this.htmlParser;
			
			if( !htmlParser ) {
				htmlParser = this.htmlParser = new Autolinker.htmlParser.HtmlParser();
			}
			
			return htmlParser;
		},
		
		
		/**
		 * Lazily instantiates and returns the {@link #matchParser} instance for this Autolinker instance.
		 * 
		 * @protected
		 * @return {Autolinker.matchParser.MatchParser}
		 */
		getMatchParser : function() {
			var matchParser = this.matchParser;
			
			if( !matchParser ) {
				matchParser = this.matchParser = new Autolinker.matchParser.MatchParser( {
					urls : this.urls,
					email : this.email,
					twitter : this.twitter,
					stripPrefix : this.stripPrefix
				} );
			}
			
			return matchParser;
		},
		
		
		/**
		 * Returns the {@link #tagBuilder} instance for this Autolinker instance, lazily instantiating it
		 * if it does not yet exist.
		 * 
		 * This method may be used in a {@link #replaceFn} to generate the {@link Autolinker.HtmlTag HtmlTag} instance that 
		 * Autolinker would normally generate, and then allow for modifications before returning it. For example:
		 * 
		 *     var html = Autolinker.link( "Test google.com", {
		 *         replaceFn : function( autolinker, match ) {
		 *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance
		 *             tag.setAttr( 'rel', 'nofollow' );
		 *             
		 *             return tag;
		 *         }
		 *     } );
		 *     
		 *     // generated html:
		 *     //   Test <a href="http://google.com" target="_blank" rel="nofollow">google.com</a>
		 * 
		 * @return {Autolinker.AnchorTagBuilder}
		 */
		getTagBuilder : function() {
			var tagBuilder = this.tagBuilder;
			
			if( !tagBuilder ) {
				tagBuilder = this.tagBuilder = new Autolinker.AnchorTagBuilder( {
					newWindow   : this.newWindow,
					truncate    : this.truncate,
					className   : this.className
				} );
			}
			
			return tagBuilder;
		}

	};


	/**
	 * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. 
	 * Does not link URLs found within HTML tags.
	 * 
	 * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result
	 * will be `You should go to &lt;a href="http://www.yahoo.com"&gt;http://www.yahoo.com&lt;/a&gt;`
	 * 
	 * Example:
	 * 
	 *     var linkedText = Autolinker.link( "Go to google.com", { newWindow: false } );
	 *     // Produces: "Go to <a href="http://google.com">google.com</a>"
	 * 
	 * @static
	 * @param {String} textOrHtml The HTML or text to find URLs, email addresses, and Twitter handles within (depending on if
	 *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).
	 * @param {Object} [options] Any of the configuration options for the Autolinker class, specified in an Object (map).
	 *   See the class description for an example call.
	 * @return {String} The HTML text, with URLs automatically linked
	 */
	Autolinker.link = function( textOrHtml, options ) {
		var autolinker = new Autolinker( options );
		return autolinker.link( textOrHtml );
	};


	// Autolinker Namespaces
	Autolinker.match = {};
	Autolinker.htmlParser = {};
	Autolinker.matchParser = {};
	/*global Autolinker */
	/*jshint eqnull:true, boss:true */
	/**
	 * @class Autolinker.Util
	 * @singleton
	 * 
	 * A few utility methods for Autolinker.
	 */
	Autolinker.Util = {
		
		/**
		 * @property {Function} abstractMethod
		 * 
		 * A function object which represents an abstract method.
		 */
		abstractMethod : function() { throw "abstract"; },
		
		
		/**
		 * Assigns (shallow copies) the properties of `src` onto `dest`.
		 * 
		 * @param {Object} dest The destination object.
		 * @param {Object} src The source object.
		 * @return {Object} The destination object (`dest`)
		 */
		assign : function( dest, src ) {
			for( var prop in src ) {
				if( src.hasOwnProperty( prop ) ) {
					dest[ prop ] = src[ prop ];
				}
			}
			
			return dest;
		},
		
		
		/**
		 * Extends `superclass` to create a new subclass, adding the `protoProps` to the new subclass's prototype.
		 * 
		 * @param {Function} superclass The constructor function for the superclass.
		 * @param {Object} protoProps The methods/properties to add to the subclass's prototype. This may contain the
		 *   special property `constructor`, which will be used as the new subclass's constructor function.
		 * @return {Function} The new subclass function.
		 */
		extend : function( superclass, protoProps ) {
			var superclassProto = superclass.prototype;
			
			var F = function() {};
			F.prototype = superclassProto;
			
			var subclass;
			if( protoProps.hasOwnProperty( 'constructor' ) ) {
				subclass = protoProps.constructor;
			} else {
				subclass = function() { superclassProto.constructor.apply( this, arguments ); };
			}
			
			var subclassProto = subclass.prototype = new F();  // set up prototype chain
			subclassProto.constructor = subclass;  // fix constructor property
			subclassProto.superclass = superclassProto;
			
			delete protoProps.constructor;  // don't re-assign constructor property to the prototype, since a new function may have been created (`subclass`), which is now already there
			Autolinker.Util.assign( subclassProto, protoProps );
			
			return subclass;
		},
		
		
		/**
		 * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the
		 * end of the string (by default, two periods: '..'). If the `str` length does not exceed 
		 * `len`, the string will be returned unchanged.
		 * 
		 * @param {String} str The string to truncate and add an ellipsis to.
		 * @param {Number} truncateLen The length to truncate the string at.
		 * @param {String} [ellipsisChars=..] The ellipsis character(s) to add to the end of `str`
		 *   when truncated. Defaults to '..'
		 */
		ellipsis : function( str, truncateLen, ellipsisChars ) {
			if( str.length > truncateLen ) {
				ellipsisChars = ( ellipsisChars == null ) ? '..' : ellipsisChars;
				str = str.substring( 0, truncateLen - ellipsisChars.length ) + ellipsisChars;
			}
			return str;
		},
		
		
		/**
		 * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).
		 * 
		 * @param {Array} arr The array to find an element of.
		 * @param {*} element The element to find in the array, and return the index of.
		 * @return {Number} The index of the `element`, or -1 if it was not found.
		 */
		indexOf : function( arr, element ) {
			if( Array.prototype.indexOf ) {
				return arr.indexOf( element );
				
			} else {
				for( var i = 0, len = arr.length; i < len; i++ ) {
					if( arr[ i ] === element ) return i;
				}
				return -1;
			}
		},
		
		
		
		/**
		 * Performs the functionality of what modern browsers do when `String.prototype.split()` is called
		 * with a regular expression that contains capturing parenthesis.
		 * 
		 * For example:
		 * 
		 *     // Modern browsers: 
		 *     "a,b,c".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]
		 *     
		 *     // Old IE (including IE8):
		 *     "a,b,c".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]
		 *     
		 * This method emulates the functionality of modern browsers for the old IE case.
		 * 
		 * @param {String} str The string to split.
		 * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting
		 *   character(s) will be spliced into the array, as in the "modern browsers" example in the 
		 *   description of this method. 
		 *   Note #1: the supplied regular expression **must** have the 'g' flag specified.
		 *   Note #2: for simplicity's sake, the regular expression does not need 
		 *   to contain capturing parenthesis - it will be assumed that any match has them.
		 * @return {String[]} The split array of strings, with the splitting character(s) included.
		 */
		splitAndCapture : function( str, splitRegex ) {
			if( !splitRegex.global ) throw new Error( "`splitRegex` must have the 'g' flag set" );
			
			var result = [],
			    lastIdx = 0,
			    match;
			
			while( match = splitRegex.exec( str ) ) {
				result.push( str.substring( lastIdx, match.index ) );
				result.push( match[ 0 ] );  // push the splitting char(s)
				
				lastIdx = match.index + match[ 0 ].length;
			}
			result.push( str.substring( lastIdx ) );
			
			return result;
		}
		
	};
	/*global Autolinker */
	/*jshint boss:true */
	/**
	 * @class Autolinker.HtmlTag
	 * @extends Object
	 * 
	 * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.
	 * 
	 * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use
	 * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.
	 * 
	 * ## Examples
	 * 
	 * Example instantiation:
	 * 
	 *     var tag = new Autolinker.HtmlTag( {
	 *         tagName : 'a',
	 *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },
	 *         innerHtml : 'Google'
	 *     } );
	 *     
	 *     tag.toString();  // <a href="http://google.com" class="external-link">Google</a>
	 *     
	 *     // Individual accessor methods
	 *     tag.getTagName();                 // 'a'
	 *     tag.getAttr( 'href' );            // 'http://google.com'
	 *     tag.hasClass( 'external-link' );  // true
	 * 
	 * 
	 * Using mutator methods (which may be used in combination with instantiation config properties):
	 * 
	 *     var tag = new Autolinker.HtmlTag();
	 *     tag.setTagName( 'a' );
	 *     tag.setAttr( 'href', 'http://google.com' );
	 *     tag.addClass( 'external-link' );
	 *     tag.setInnerHtml( 'Google' );
	 *     
	 *     tag.getTagName();                 // 'a'
	 *     tag.getAttr( 'href' );            // 'http://google.com'
	 *     tag.hasClass( 'external-link' );  // true
	 *     
	 *     tag.toString();  // <a href="http://google.com" class="external-link">Google</a>
	 *     
	 * 
	 * ## Example use within a {@link Autolinker#replaceFn replaceFn}
	 * 
	 *     var html = Autolinker.link( "Test google.com", {
	 *         replaceFn : function( autolinker, match ) {
	 *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text
	 *             tag.setAttr( 'rel', 'nofollow' );
	 *             
	 *             return tag;
	 *         }
	 *     } );
	 *     
	 *     // generated html:
	 *     //   Test <a href="http://google.com" target="_blank" rel="nofollow">google.com</a>
	 *     
	 *     
	 * ## Example use with a new tag for the replacement
	 * 
	 *     var html = Autolinker.link( "Test google.com", {
	 *         replaceFn : function( autolinker, match ) {
	 *             var tag = new Autolinker.HtmlTag( {
	 *                 tagName : 'button',
	 *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },
	 *                 innerHtml : 'Load URL: ' + match.getAnchorText()
	 *             } );
	 *             
	 *             return tag;
	 *         }
	 *     } );
	 *     
	 *     // generated html:
	 *     //   Test <button title="Load URL: http://google.com">Load URL: google.com</button>
	 */
	Autolinker.HtmlTag = Autolinker.Util.extend( Object, {
		
		/**
		 * @cfg {String} tagName
		 * 
		 * The tag name. Ex: 'a', 'button', etc.
		 * 
		 * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toString}
		 * is executed.
		 */
		
		/**
		 * @cfg {Object.<String, String>} attrs
		 * 
		 * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the
		 * values are the attribute values.
		 */
		
		/**
		 * @cfg {String} innerHtml
		 * 
		 * The inner HTML for the tag. 
		 * 
		 * Note the camel case name on `innerHtml`. Acronyms are camelCased in this utility (such as not to run into the acronym 
		 * naming inconsistency that the DOM developers created with `XMLHttpRequest`). You may alternatively use {@link #innerHTML}
		 * if you prefer, but this one is recommended.
		 */
		
		/**
		 * @cfg {String} innerHTML
		 * 
		 * Alias of {@link #innerHtml}, accepted for consistency with the browser DOM api, but prefer the camelCased version
		 * for acronym names.
		 */
		
		
		/**
		 * @protected
		 * @property {RegExp} whitespaceRegex
		 * 
		 * Regular expression used to match whitespace in a string of CSS classes.
		 */
		whitespaceRegex : /\s+/,
		
		
		/**
		 * @constructor
		 * @param {Object} [cfg] The configuration properties for this class, in an Object (map)
		 */
		constructor : function( cfg ) {
			Autolinker.Util.assign( this, cfg );
			
			this.innerHtml = this.innerHtml || this.innerHTML;  // accept either the camelCased form or the fully capitalized acronym
		},
		
		
		/**
		 * Sets the tag name that will be used to generate the tag with.
		 * 
		 * @param {String} tagName
		 * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.
		 */
		setTagName : function( tagName ) {
			this.tagName = tagName;
			return this;
		},
		
		
		/**
		 * Retrieves the tag name.
		 * 
		 * @return {String}
		 */
		getTagName : function() {
			return this.tagName || "";
		},
		
		
		/**
		 * Sets an attribute on the HtmlTag.
		 * 
		 * @param {String} attrName The attribute name to set.
		 * @param {String} attrValue The attribute value to set.
		 * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.
		 */
		setAttr : function( attrName, attrValue ) {
			var tagAttrs = this.getAttrs();
			tagAttrs[ attrName ] = attrValue;
			
			return this;
		},
		
		
		/**
		 * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.
		 * 
		 * @param {String} name The attribute name to retrieve.
		 * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.
		 */
		getAttr : function( attrName ) {
			return this.getAttrs()[ attrName ];
		},
		
		
		/**
		 * Sets one or more attributes on the HtmlTag.
		 * 
		 * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.
		 * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.
		 */
		setAttrs : function( attrs ) {
			var tagAttrs = this.getAttrs();
			Autolinker.Util.assign( tagAttrs, attrs );
			
			return this;
		},
		
		
		/**
		 * Retrieves the attributes Object (map) for the HtmlTag.
		 * 
		 * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.
		 */
		getAttrs : function() {
			return this.attrs || ( this.attrs = {} );
		},
		
		
		/**
		 * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.
		 * 
		 * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).
		 * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.
		 */
		setClass : function( cssClass ) {
			return this.setAttr( 'class', cssClass );
		},
		
		
		/**
		 * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.
		 * 
		 * @param {String} cssClass One or more space-separated CSS classes to add.
		 * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.
		 */
		addClass : function( cssClass ) {
			var classAttr = this.getClass(),
			    whitespaceRegex = this.whitespaceRegex,
			    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below
			    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),
			    newClasses = cssClass.split( whitespaceRegex ),
			    newClass;
			
			while( newClass = newClasses.shift() ) {
				if( indexOf( classes, newClass ) === -1 ) {
					classes.push( newClass );
				}
			}
			
			this.getAttrs()[ 'class' ] = classes.join( " " );
			return this;
		},
		
		
		/**
		 * Convenience method to remove one or more CSS classes from the HtmlTag.
		 * 
		 * @param {String} cssClass One or more space-separated CSS classes to remove.
		 * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.
		 */
		removeClass : function( cssClass ) {
			var classAttr = this.getClass(),
			    whitespaceRegex = this.whitespaceRegex,
			    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below
			    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),
			    removeClasses = cssClass.split( whitespaceRegex ),
			    removeClass;
			
			while( classes.length && ( removeClass = removeClasses.shift() ) ) {
				var idx = indexOf( classes, removeClass );
				if( idx !== -1 ) {
					classes.splice( idx, 1 );
				}
			}
			
			this.getAttrs()[ 'class' ] = classes.join( " " );
			return this;
		},
		
		
		/**
		 * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when
		 * there are multiple.
		 * 
		 * @return {String}
		 */
		getClass : function() {
			return this.getAttrs()[ 'class' ] || "";
		},
		
		
		/**
		 * Convenience method to check if the tag has a CSS class or not.
		 * 
		 * @param {String} cssClass The CSS class to check for.
		 * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.
		 */
		hasClass : function( cssClass ) {
			return ( ' ' + this.getClass() + ' ' ).indexOf( ' ' + cssClass + ' ' ) !== -1;
		},
		
		
		/**
		 * Sets the inner HTML for the tag.
		 * 
		 * @param {String} html The inner HTML to set.
		 * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.
		 */
		setInnerHtml : function( html ) {
			this.innerHtml = html;
			
			return this;
		},
		
		
		/**
		 * Retrieves the inner HTML for the tag.
		 * 
		 * @return {String}
		 */
		getInnerHtml : function() {
			return this.innerHtml || "";
		},
		
		
		/**
		 * Override of superclass method used to generate the HTML string for the tag.
		 * 
		 * @return {String}
		 */
		toString : function() {
			var tagName = this.getTagName(),
			    attrsStr = this.buildAttrsStr();
			
			attrsStr = ( attrsStr ) ? ' ' + attrsStr : '';  // prepend a space if there are actually attributes
			
			return [ '<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>' ].join( "" );
		},
		
		
		/**
		 * Support method for {@link #toString}, returns the string space-separated key="value" pairs, used to populate 
		 * the stringified HtmlTag.
		 * 
		 * @protected
		 * @return {String} Example return: `attr1="value1" attr2="value2"`
		 */
		buildAttrsStr : function() {
			if( !this.attrs ) return "";  // no `attrs` Object (map) has been set, return empty string
			
			var attrs = this.getAttrs(),
			    attrsArr = [];
			
			for( var prop in attrs ) {
				if( attrs.hasOwnProperty( prop ) ) {
					attrsArr.push( prop + '="' + attrs[ prop ] + '"' );
				}
			}
			return attrsArr.join( " " );
		}
		
	} );
	/*global Autolinker */
	/*jshint sub:true */
	/**
	 * @protected
	 * @class Autolinker.AnchorTagBuilder
	 * @extends Object
	 * 
	 * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is found.
	 * 
	 * Normally this class is instantiated, configured, and used internally by an {@link Autolinker} instance, but may 
	 * actually be retrieved in a {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag} instances
	 * which may be modified before returning from the {@link Autolinker#replaceFn replaceFn}. For example:
	 * 
	 *     var html = Autolinker.link( "Test google.com", {
	 *         replaceFn : function( autolinker, match ) {
	 *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance
	 *             tag.setAttr( 'rel', 'nofollow' );
	 *             
	 *             return tag;
	 *         }
	 *     } );
	 *     
	 *     // generated html:
	 *     //   Test <a href="http://google.com" target="_blank" rel="nofollow">google.com</a>
	 */
	Autolinker.AnchorTagBuilder = Autolinker.Util.extend( Object, {
		
		/**
		 * @cfg {Boolean} newWindow
		 * @inheritdoc Autolinker#newWindow
		 */
		
		/**
		 * @cfg {Number} truncate
		 * @inheritdoc Autolinker#truncate
		 */
		
		/**
		 * @cfg {String} className
		 * @inheritdoc Autolinker#className
		 */
		
		
		/**
		 * @constructor
		 * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).
		 */
		constructor : function( cfg ) {
			Autolinker.Util.assign( this, cfg );
		},
		
		
		/**
		 * Generates the actual anchor (&lt;a&gt;) tag to use in place of the matched URL/email/Twitter text,
		 * via its `match` object.
		 * 
		 * @param {Autolinker.match.Match} match The Match instance to generate an anchor tag from.
		 * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.
		 */
		build : function( match ) {
			var tag = new Autolinker.HtmlTag( {
				tagName   : 'a',
				attrs     : this.createAttrs( match.getType(), match.getAnchorHref() ),
				innerHtml : this.processAnchorText( match.getAnchorText() )
			} );
			
			return tag;
		},
		
		
		/**
		 * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;) tag being generated.
		 * 
		 * @protected
		 * @param {"url"/"email"/"twitter"} matchType The type of match that an anchor tag is being generated for.
		 * @param {String} href The href for the anchor tag.
		 * @return {Object} A key/value Object (map) of the anchor tag's attributes. 
		 */
		createAttrs : function( matchType, anchorHref ) {
			var attrs = {
				'href' : anchorHref  // we'll always have the `href` attribute
			};
			
			var cssClass = this.createCssClass( matchType );
			if( cssClass ) {
				attrs[ 'class' ] = cssClass;
			}
			if( this.newWindow ) {
				attrs[ 'target' ] = "_blank";
			}
			
			return attrs;
		},
		
		
		/**
		 * Creates the CSS class that will be used for a given anchor tag, based on the `matchType` and the {@link #className}
		 * config.
		 * 
		 * @private
		 * @param {"url"/"email"/"twitter"} matchType The type of match that an anchor tag is being generated for.
		 * @return {String} The CSS class string for the link. Example return: "myLink myLink-url". If no {@link #className}
		 *   was configured, returns an empty string.
		 */
		createCssClass : function( matchType ) {
			var className = this.className;
			
			if( !className ) 
				return "";
			else
				return className + " " + className + "-" + matchType;  // ex: "myLink myLink-url", "myLink myLink-email", or "myLink myLink-twitter"
		},
		
		
		/**
		 * Processes the `anchorText` by truncating the text according to the {@link #truncate} config.
		 * 
		 * @private
		 * @param {String} anchorText The anchor tag's text (i.e. what will be displayed).
		 * @return {String} The processed `anchorText`.
		 */
		processAnchorText : function( anchorText ) {
			anchorText = this.doTruncate( anchorText );
			
			return anchorText;
		},
		
		
		/**
		 * Performs the truncation of the `anchorText`, if the `anchorText` is longer than the {@link #truncate} option.
		 * Truncates the text to 2 characters fewer than the {@link #truncate} option, and adds ".." to the end.
		 * 
		 * @private
		 * @param {String} text The anchor tag's text (i.e. what will be displayed).
		 * @return {String} The truncated anchor text.
		 */
		doTruncate : function( anchorText ) {
			return Autolinker.Util.ellipsis( anchorText, this.truncate || Number.POSITIVE_INFINITY );
		}
		
	} );
	/*global Autolinker */
	/**
	 * @private
	 * @class Autolinker.htmlParser.HtmlParser
	 * @extends Object
	 * 
	 * An HTML parser implementation which simply walks an HTML string and returns an array of 
	 * {@link Autolinker.htmlParser.HtmlNode HtmlNodes} that represent the basic HTML structure of the input string.
	 * 
	 * Autolinker uses this to only link URLs/emails/Twitter handles within text nodes, effectively ignoring / "walking
	 * around" HTML tags.
	 */
	Autolinker.htmlParser.HtmlParser = Autolinker.Util.extend( Object, {
		
		/**
		 * @private
		 * @property {RegExp} htmlRegex
		 * 
		 * The regular expression used to pull out HTML tags from a string. Handles namespaced HTML tags and
		 * attribute names, as specified by http://www.w3.org/TR/html-markup/syntax.html.
		 * 
		 * Capturing groups:
		 * 
		 * 1. The "!DOCTYPE" tag name, if a tag is a &lt;!DOCTYPE&gt; tag.
		 * 2. If it is an end tag, this group will have the '/'.
		 * 3. The tag name for all tags (other than the &lt;!DOCTYPE&gt; tag)
		 */
		htmlRegex : (function() {
			var tagNameRegex = /[0-9a-zA-Z][0-9a-zA-Z:]*/,
			    attrNameRegex = /[^\s\0"'>\/=\x01-\x1F\x7F]+/,   // the unicode range accounts for excluding control chars, and the delete char
			    attrValueRegex = /(?:"[^"]*?"|'[^']*?'|[^'"=<>`\s]+)/, // double quoted, single quoted, or unquoted attribute values
			    nameEqualsValueRegex = attrNameRegex.source + '(?:\\s*=\\s*' + attrValueRegex.source + ')?';  // optional '=[value]'
			
			return new RegExp( [
				// for <!DOCTYPE> tag. Ex: <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">) 
				'(?:',
					'<(!DOCTYPE)',  // *** Capturing Group 1 - If it's a doctype tag
						
						// Zero or more attributes following the tag name
						'(?:',
							'\\s+',  // one or more whitespace chars before an attribute
							
							// Either:
							// A. attr="value", or 
							// B. "value" alone (To cover example doctype tag: <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">) 
							'(?:', nameEqualsValueRegex, '|', attrValueRegex.source + ')',
						')*',
					'>',
				')',
				
				'|',
				
				// All other HTML tags (i.e. tags that are not <!DOCTYPE>)
				'(?:',
					'<(/)?',  // Beginning of a tag. Either '<' for a start tag, or '</' for an end tag. 
					          // *** Capturing Group 2: The slash or an empty string. Slash ('/') for end tag, empty string for start or self-closing tag.
				
						// *** Capturing Group 3 - The tag name
						'(' + tagNameRegex.source + ')',
						
						// Zero or more attributes following the tag name
						'(?:',
							'\\s+',                // one or more whitespace chars before an attribute
							nameEqualsValueRegex,  // attr="value" (with optional ="value" part)
						')*',
						
						'\\s*/?',  // any trailing spaces and optional '/' before the closing '>'
					'>',
				')'
			].join( "" ), 'gi' );
		} )(),
		
		/**
		 * @private
		 * @property {RegExp} htmlCharacterEntitiesRegex
		 *
		 * The regular expression that matches common HTML character entities.
		 * 
		 * Ignoring &amp; as it could be part of a query string -- handling it separately.
		 */
		htmlCharacterEntitiesRegex: /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi,
		
		
		/**
		 * Parses an HTML string and returns a simple array of {@link Autolinker.htmlParser.HtmlNode HtmlNodes} to represent
		 * the HTML structure of the input string. 
		 * 
		 * @param {String} html The HTML to parse.
		 * @return {Autolinker.htmlParser.HtmlNode[]}
		 */
		parse : function( html ) {
			var htmlRegex = this.htmlRegex,
			    currentResult,
			    lastIndex = 0,
			    textAndEntityNodes,
			    nodes = [];  // will be the result of the method
			
			while( ( currentResult = htmlRegex.exec( html ) ) !== null ) {
				var tagText = currentResult[ 0 ],
				    tagName = currentResult[ 1 ] || currentResult[ 3 ],  // The <!DOCTYPE> tag (ex: "!DOCTYPE"), or another tag (ex: "a" or "img") 
				    isClosingTag = !!currentResult[ 2 ],
				    inBetweenTagsText = html.substring( lastIndex, currentResult.index );
				
				// Push TextNodes and EntityNodes for any text found between tags
				if( inBetweenTagsText ) {
					textAndEntityNodes = this.parseTextAndEntityNodes( inBetweenTagsText );
					nodes.push.apply( nodes, textAndEntityNodes );
				}
				
				// Push the ElementNode
				nodes.push( this.createElementNode( tagText, tagName, isClosingTag ) );
				
				lastIndex = currentResult.index + tagText.length;
			}
			
			// Process any remaining text after the last HTML element. Will process all of the text if there were no HTML elements.
			if( lastIndex < html.length ) {
				var text = html.substring( lastIndex );
				
				// Push TextNodes and EntityNodes for any text found between tags
				if( text ) {
					textAndEntityNodes = this.parseTextAndEntityNodes( text );
					nodes.push.apply( nodes, textAndEntityNodes );
				}
			}
			
			return nodes;
		},
		
		
		/**
		 * Parses text and HTML entity nodes from a given string. The input string should not have any HTML tags (elements)
		 * within it.
		 * 
		 * @private
		 * @param {String} text The text to parse.
		 * @return {Autolinker.htmlParser.HtmlNode[]} An array of HtmlNodes to represent the 
		 *   {@link Autolinker.htmlParser.TextNode TextNodes} and {@link Autolinker.htmlParser.EntityNode EntityNodes} found.
		 */
		parseTextAndEntityNodes : function( text ) {
			var nodes = [],
			    textAndEntityTokens = Autolinker.Util.splitAndCapture( text, this.htmlCharacterEntitiesRegex );  // split at HTML entities, but include the HTML entities in the results array
			
			// Every even numbered token is a TextNode, and every odd numbered token is an EntityNode
			// For example: an input `text` of "Test &quot;this&quot; today" would turn into the 
			//   `textAndEntityTokens`: [ 'Test ', '&quot;', 'this', '&quot;', ' today' ]
			for( var i = 0, len = textAndEntityTokens.length; i < len; i += 2 ) {
				var textToken = textAndEntityTokens[ i ],
				    entityToken = textAndEntityTokens[ i + 1 ];
				
				if( textToken ) nodes.push( this.createTextNode( textToken ) );
				if( entityToken ) nodes.push( this.createEntityNode( entityToken ) );
			}
			return nodes;
		},
		
		
		/**
		 * Factory method to create an {@link Autolinker.htmlParser.ElementNode ElementNode}.
		 * 
		 * @private
		 * @param {String} tagText The full text of the tag (element) that was matched, including its attributes.
		 * @param {String} tagName The name of the tag. Ex: An &lt;img&gt; tag would be passed to this method as "img".
		 * @param {Boolean} isClosingTag `true` if it's a closing tag, false otherwise.
		 * @return {Autolinker.htmlParser.ElementNode}
		 */
		createElementNode : function( tagText, tagName, isClosingTag ) {
			return new Autolinker.htmlParser.ElementNode( {
				text    : tagText,
				tagName : tagName.toLowerCase(),
				closing : isClosingTag
			} );
		},
		
		
		/**
		 * Factory method to create a {@link Autolinker.htmlParser.EntityNode EntityNode}.
		 * 
		 * @private
		 * @param {String} text The text that was matched for the HTML entity (such as '&amp;nbsp;').
		 * @return {Autolinker.htmlParser.EntityNode}
		 */
		createEntityNode : function( text ) {
			return new Autolinker.htmlParser.EntityNode( { text: text } );
		},
		
		
		/**
		 * Factory method to create a {@link Autolinker.htmlParser.TextNode TextNode}.
		 * 
		 * @private
		 * @param {String} text The text that was matched.
		 * @return {Autolinker.htmlParser.TextNode}
		 */
		createTextNode : function( text ) {
			return new Autolinker.htmlParser.TextNode( { text: text } );
		}
		
	} );
	/*global Autolinker */
	/**
	 * @abstract
	 * @class Autolinker.htmlParser.HtmlNode
	 * 
	 * Represents an HTML node found in an input string. An HTML node is one of the following:
	 * 
	 * 1. An {@link Autolinker.htmlParser.ElementNode ElementNode}, which represents HTML tags.
	 * 2. A {@link Autolinker.htmlParser.TextNode TextNode}, which represents text outside or within HTML tags.
	 * 3. A {@link Autolinker.htmlParser.EntityNode EntityNode}, which represents one of the known HTML
	 *    entities that Autolinker looks for. This includes common ones such as &amp;quot; and &amp;nbsp;
	 */
	Autolinker.htmlParser.HtmlNode = Autolinker.Util.extend( Object, {
		
		/**
		 * @cfg {String} text (required)
		 * 
		 * The original text that was matched for the HtmlNode. 
		 * 
		 * - In the case of an {@link Autolinker.htmlParser.ElementNode ElementNode}, this will be the tag's
		 *   text.
		 * - In the case of a {@link Autolinker.htmlParser.TextNode TextNode}, this will be the text itself.
		 * - In the case of a {@link Autolinker.htmlParser.EntityNode EntityNode}, this will be the text of
		 *   the HTML entity.
		 */
		text : "",
		
		
		/**
		 * @constructor
		 * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).
		 */
		constructor : function( cfg ) {
			Autolinker.Util.assign( this, cfg );
		},

		
		/**
		 * Returns a string name for the type of node that this class represents.
		 * 
		 * @abstract
		 * @return {String}
		 */
		getType : Autolinker.Util.abstractMethod,
		
		
		/**
		 * Retrieves the {@link #text} for the HtmlNode.
		 * 
		 * @return {String}
		 */
		getText : function() {
			return this.text;
		}

	} );
	/*global Autolinker */
	/**
	 * @class Autolinker.htmlParser.ElementNode
	 * @extends Autolinker.htmlParser.HtmlNode
	 * 
	 * Represents an HTML element node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.
	 * 
	 * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.
	 */
	Autolinker.htmlParser.ElementNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {
		
		/**
		 * @cfg {String} tagName (required)
		 * 
		 * The name of the tag that was matched.
		 */
		tagName : '',
		
		/**
		 * @cfg {Boolean} closing (required)
		 * 
		 * `true` if the element (tag) is a closing tag, `false` if its an opening tag.
		 */
		closing : false,

		
		/**
		 * Returns a string name for the type of node that this class represents.
		 * 
		 * @return {String}
		 */
		getType : function() {
			return 'element';
		},
		

		/**
		 * Returns the HTML element's (tag's) name. Ex: for an &lt;img&gt; tag, returns "img".
		 * 
		 * @return {String}
		 */
		getTagName : function() {
			return this.tagName;
		},
		
		
		/**
		 * Determines if the HTML element (tag) is a closing tag. Ex: &lt;div&gt; returns
		 * `false`, while &lt;/div&gt; returns `true`.
		 * 
		 * @return {Boolean}
		 */
		isClosing : function() {
			return this.closing;
		}
		
	} );
	/*global Autolinker */
	/**
	 * @class Autolinker.htmlParser.EntityNode
	 * @extends Autolinker.htmlParser.HtmlNode
	 * 
	 * Represents a known HTML entity node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.
	 * Ex: '&amp;nbsp;', or '&amp#160;' (which will be retrievable from the {@link #getText} method.
	 * 
	 * Note that this class will only be returned from the HtmlParser for the set of checked HTML entity nodes 
	 * defined by the {@link Autolinker.htmlParser.HtmlParser#htmlCharacterEntitiesRegex}.
	 * 
	 * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.
	 */
	Autolinker.htmlParser.EntityNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {
		
		/**
		 * Returns a string name for the type of node that this class represents.
		 * 
		 * @return {String}
		 */
		getType : function() {
			return 'entity';
		}
		
	} );
	/*global Autolinker */
	/**
	 * @class Autolinker.htmlParser.TextNode
	 * @extends Autolinker.htmlParser.HtmlNode
	 * 
	 * Represents a text node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.
	 * 
	 * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.
	 */
	Autolinker.htmlParser.TextNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {
		
		/**
		 * Returns a string name for the type of node that this class represents.
		 * 
		 * @return {String}
		 */
		getType : function() {
			return 'text';
		}
		
	} );
	/*global Autolinker */
	/**
	 * @private
	 * @class Autolinker.matchParser.MatchParser
	 * @extends Object
	 * 
	 * Used by Autolinker to parse {@link #urls URLs}, {@link #emails email addresses}, and {@link #twitter Twitter handles}, 
	 * given an input string of text.
	 * 
	 * The MatchParser is fed a non-HTML string in order to search out URLs, email addresses and Twitter handles. Autolinker
	 * first uses the {@link HtmlParser} to "walk around" HTML tags, and then the text around the HTML tags is passed into
	 * the MatchParser in order to find the actual matches.
	 */
	Autolinker.matchParser.MatchParser = Autolinker.Util.extend( Object, {
		
		/**
		 * @cfg {Boolean} urls
		 * 
		 * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.
		 */
		urls : true,
		
		/**
		 * @cfg {Boolean} email
		 * 
		 * `true` if email addresses should be automatically linked, `false` if they should not be.
		 */
		email : true,
		
		/**
		 * @cfg {Boolean} twitter
		 * 
		 * `true` if Twitter handles ("@example") should be automatically linked, `false` if they should not be.
		 */
		twitter : true,
		
		/**
		 * @cfg {Boolean} stripPrefix
		 * 
		 * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text
		 * in {@link Autolinker.match.Url URL matches}, `false` otherwise.
		 * 
		 * TODO: Handle this before a URL Match object is instantiated.
		 */
		stripPrefix : true,
		
		
		/**
		 * @private
		 * @property {RegExp} matcherRegex
		 * 
		 * The regular expression that matches URLs, email addresses, and Twitter handles.
		 * 
		 * This regular expression has the following capturing groups:
		 * 
		 * 1. Group that is used to determine if there is a Twitter handle match (i.e. \@someTwitterUser). Simply check for its 
		 *    existence to determine if there is a Twitter handle match. The next couple of capturing groups give information 
		 *    about the Twitter handle match.
		 * 2. The whitespace character before the \@sign in a Twitter handle. This is needed because there are no lookbehinds in
		 *    JS regular expressions, and can be used to reconstruct the original string in a replace().
		 * 3. The Twitter handle itself in a Twitter match. If the match is '@someTwitterUser', the handle is 'someTwitterUser'.
		 * 4. Group that matches an email address. Used to determine if the match is an email address, as well as holding the full 
		 *    address. Ex: 'me@my.com'
		 * 5. Group that matches a URL in the input text. Ex: 'http://google.com', 'www.google.com', or just 'google.com'.
		 *    This also includes a path, url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&q2=2#myAnchor
		 * 6. Group that matches a protocol URL (i.e. 'http://google.com'). This is used to match protocol URLs with just a single
		 *    word, like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.
		 * 7. A protocol-relative ('//') match for the case of a 'www.' prefixed URL. Will be an empty string if it is not a 
		 *    protocol-relative match. We need to know the character before the '//' in order to determine if it is a valid match
		 *    or the // was in a string we don't want to auto-link.
		 * 8. A protocol-relative ('//') match for the case of a known TLD prefixed URL. Will be an empty string if it is not a 
		 *    protocol-relative match. See #6 for more info. 
		 */
		matcherRegex : (function() {
			var twitterRegex = /(^|[^\w])@(\w{1,15})/,              // For matching a twitter handle. Ex: @gregory_jacobs
			    
			    emailRegex = /(?:[\-;:&=\+\$,\w\.]+@)/,             // something@ for email addresses (a.k.a. local-part)
			    
			    protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\/\/)(?!\d+\/?)(?:\/\/)?)/,  // match protocol, allow in format "http://" or "mailto:". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match "link:"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)
			    wwwRegex = /(?:www\.)/,                             // starting with 'www.'
			    domainNameRegex = /[A-Za-z0-9\.\-]*[A-Za-z0-9\-]/,  // anything looking at all like a domain, non-unicode domains, not ending in a period
			    tldRegex = /\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\b/,   // match our known top level domains (TLDs)
			    
			    // Allow optional path, query string, and hash anchor, not ending in the following characters: "?!:,.;"
			    // http://blog.codinghorror.com/the-problem-with-urls/
			    urlSuffixRegex = /[\-A-Za-z0-9+&@#\/%=~_()|'$*\[\]?!:,.;]*[\-A-Za-z0-9+&@#\/%=~_()|'$*\[\]]/;
			
			return new RegExp( [
				'(',  // *** Capturing group $1, which can be used to check for a twitter handle match. Use group $3 for the actual twitter handle though. $2 may be used to reconstruct the original string in a replace() 
					// *** Capturing group $2, which matches the whitespace character before the '@' sign (needed because of no lookbehinds), and 
					// *** Capturing group $3, which matches the actual twitter handle
					twitterRegex.source,
				')',
				
				'|',
				
				'(',  // *** Capturing group $4, which is used to determine an email match
					emailRegex.source,
					domainNameRegex.source,
					tldRegex.source,
				')',
				
				'|',
				
				'(',  // *** Capturing group $5, which is used to match a URL
					'(?:', // parens to cover match for protocol (optional), and domain
						'(',  // *** Capturing group $6, for a protocol-prefixed url (ex: http://google.com)
							protocolRegex.source,
							domainNameRegex.source,
						')',
						
						'|',
						
						'(?:',  // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)
							'(.?//)?',  // *** Capturing group $7 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character
							wwwRegex.source,
							domainNameRegex.source,
						')',
						
						'|',
						
						'(?:',  // non-capturing paren for known a TLD url (ex: google.com)
							'(.?//)?',  // *** Capturing group $8 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character
							domainNameRegex.source,
							tldRegex.source,
						')',
					')',
					
					'(?:' + urlSuffixRegex.source + ')?',  // match for path, query string, and/or hash anchor - optional
				')'
			].join( "" ), 'gi' );
		} )(),
		
		/**
		 * @private
		 * @property {RegExp} charBeforeProtocolRelMatchRegex
		 * 
		 * The regular expression used to retrieve the character before a protocol-relative URL match.
		 * 
		 * This is used in conjunction with the {@link #matcherRegex}, which needs to grab the character before a protocol-relative
		 * '//' due to the lack of a negative look-behind in JavaScript regular expressions. The character before the match is stripped
		 * from the URL.
		 */
		charBeforeProtocolRelMatchRegex : /^(.)?\/\//,
		
		/**
		 * @private
		 * @property {Autolinker.MatchValidator} matchValidator
		 * 
		 * The MatchValidator object, used to filter out any false positives from the {@link #matcherRegex}. See
		 * {@link Autolinker.MatchValidator} for details.
		 */
		
		
		/**
		 * @constructor
		 * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).
		 */
		constructor : function( cfg ) {
			Autolinker.Util.assign( this, cfg );
		
			this.matchValidator = new Autolinker.MatchValidator();
		},
		
		
		/**
		 * Parses the input `text` to search for URLs/emails/Twitter handles, and calls the `replaceFn`
		 * to allow replacements of the matches. Returns the `text` with matches replaced.
		 * 
		 * @param {String} text The text to search and repace matches in.
		 * @param {Function} replaceFn The iterator function to handle the replacements. The function takes a
		 *   single argument, a {@link Autolinker.match.Match} object, and should return the text that should
		 *   make the replacement.
		 * @param {Object} [contextObj=window] The context object ("scope") to run the `replaceFn` in.
		 * @return {String}
		 */
		replace : function( text, replaceFn, contextObj ) {
			var me = this;  // for closure
			
			return text.replace( this.matcherRegex, function( matchStr, $1, $2, $3, $4, $5, $6, $7, $8 ) {
				var matchDescObj = me.processCandidateMatch( matchStr, $1, $2, $3, $4, $5, $6, $7, $8 );  // "match description" object
				
				// Return out with no changes for match types that are disabled (url, email, twitter), or for matches that are 
				// invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).
				if( !matchDescObj ) {
					return matchStr;
					
				} else {
					// Generate replacement text for the match from the `replaceFn`
					var replaceStr = replaceFn.call( contextObj, matchDescObj.match );
					return matchDescObj.prefixStr + replaceStr + matchDescObj.suffixStr;
				}
			} );
		},
		
		
		/**
		 * Processes a candidate match from the {@link #matcherRegex}. 
		 * 
		 * Not all matches found by the regex are actual URL/email/Twitter matches, as determined by the {@link #matchValidator}. In
		 * this case, the method returns `null`. Otherwise, a valid Object with `prefixStr`, `match`, and `suffixStr` is returned.
		 * 
		 * @private
		 * @param {String} matchStr The full match that was found by the {@link #matcherRegex}.
		 * @param {String} twitterMatch The matched text of a Twitter handle, if the match is a Twitter match.
		 * @param {String} twitterHandlePrefixWhitespaceChar The whitespace char before the @ sign in a Twitter handle match. This 
		 *   is needed because of no lookbehinds in JS regexes, and is need to re-include the character for the anchor tag replacement.
		 * @param {String} twitterHandle The actual Twitter user (i.e the word after the @ sign in a Twitter match).
		 * @param {String} emailAddressMatch The matched email address for an email address match.
		 * @param {String} urlMatch The matched URL string for a URL match.
		 * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match
		 *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.
		 * @param {String} wwwProtocolRelativeMatch The '//' for a protocol-relative match from a 'www' url, with the character that 
		 *   comes before the '//'.
		 * @param {String} tldProtocolRelativeMatch The '//' for a protocol-relative match from a TLD (top level domain) match, with 
		 *   the character that comes before the '//'.
		 *   
		 * @return {Object} A "match description object". This will be `null` if the match was invalid, or if a match type is disabled.
		 *   Otherwise, this will be an Object (map) with the following properties:
		 * @return {String} return.prefixStr The char(s) that should be prepended to the replacement string. These are char(s) that
		 *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into 
		 *   the replacement stream.
		 * @return {String} return.suffixStr The char(s) that should be appended to the replacement string. These are char(s) that
		 *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into 
		 *   the replacement stream.
		 * @return {Autolinker.match.Match} return.match The Match object that represents the match that was found.
		 */
		processCandidateMatch : function( 
			matchStr, twitterMatch, twitterHandlePrefixWhitespaceChar, twitterHandle, 
			emailAddressMatch, urlMatch, protocolUrlMatch, wwwProtocolRelativeMatch, tldProtocolRelativeMatch
		) {
			// Note: The `matchStr` variable wil be fixed up to remove characters that are no longer needed (which will 
			// be added to `prefixStr` and `suffixStr`).
			
			var protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,
			    match,  // Will be an Autolinker.match.Match object
			    
			    prefixStr = "",       // A string to use to prefix the anchor tag that is created. This is needed for the Twitter handle match
			    suffixStr = "";       // A string to suffix the anchor tag that is created. This is used if there is a trailing parenthesis that should not be auto-linked.
			    
			
			// Return out with `null` for match types that are disabled (url, email, twitter), or for matches that are 
			// invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).
			if(
				( twitterMatch && !this.twitter ) || ( emailAddressMatch && !this.email ) || ( urlMatch && !this.urls ) ||
				!this.matchValidator.isValidMatch( urlMatch, protocolUrlMatch, protocolRelativeMatch ) 
			) {
				return null;
			}
			
			// Handle a closing parenthesis at the end of the match, and exclude it if there is not a matching open parenthesis
			// in the match itself. 
			if( this.matchHasUnbalancedClosingParen( matchStr ) ) {
				matchStr = matchStr.substr( 0, matchStr.length - 1 );  // remove the trailing ")"
				suffixStr = ")";  // this will be added after the generated <a> tag
			}
			
			
			if( emailAddressMatch ) {
				match = new Autolinker.match.Email( { matchedText: matchStr, email: emailAddressMatch } );
				
			} else if( twitterMatch ) {
				// fix up the `matchStr` if there was a preceding whitespace char, which was needed to determine the match 
				// itself (since there are no look-behinds in JS regexes)
				if( twitterHandlePrefixWhitespaceChar ) {
					prefixStr = twitterHandlePrefixWhitespaceChar;
					matchStr = matchStr.slice( 1 );  // remove the prefixed whitespace char from the match
				}
				match = new Autolinker.match.Twitter( { matchedText: matchStr, twitterHandle: twitterHandle } );
				
			} else {  // url match
				// If it's a protocol-relative '//' match, remove the character before the '//' (which the matcherRegex needed
				// to match due to the lack of a negative look-behind in JavaScript regular expressions)
				if( protocolRelativeMatch ) {
					var charBeforeMatch = protocolRelativeMatch.match( this.charBeforeProtocolRelMatchRegex )[ 1 ] || "";
					
					if( charBeforeMatch ) {  // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)
						prefixStr = charBeforeMatch;
						matchStr = matchStr.slice( 1 );  // remove the prefixed char from the match
					}
				}
				
				match = new Autolinker.match.Url( {
					matchedText : matchStr,
					url : matchStr,
					protocolUrlMatch : !!protocolUrlMatch,
					protocolRelativeMatch : !!protocolRelativeMatch,
					stripPrefix : this.stripPrefix
				} );
			}
			
			return {
				prefixStr : prefixStr,
				suffixStr : suffixStr,
				match     : match
			};
		},
		
		
		/**
		 * Determines if a match found has an unmatched closing parenthesis. If so, this parenthesis will be removed
		 * from the match itself, and appended after the generated anchor tag in {@link #processTextNode}.
		 * 
		 * A match may have an extra closing parenthesis at the end of the match because the regular expression must include parenthesis
		 * for URLs such as "wikipedia.com/something_(disambiguation)", which should be auto-linked. 
		 * 
		 * However, an extra parenthesis *will* be included when the URL itself is wrapped in parenthesis, such as in the case of
		 * "(wikipedia.com/something_(disambiguation))". In this case, the last closing parenthesis should *not* be part of the URL 
		 * itself, and this method will return `true`.
		 * 
		 * @private
		 * @param {String} matchStr The full match string from the {@link #matcherRegex}.
		 * @return {Boolean} `true` if there is an unbalanced closing parenthesis at the end of the `matchStr`, `false` otherwise.
		 */
		matchHasUnbalancedClosingParen : function( matchStr ) {
			var lastChar = matchStr.charAt( matchStr.length - 1 );
			
			if( lastChar === ')' ) {
				var openParensMatch = matchStr.match( /\(/g ),
				    closeParensMatch = matchStr.match( /\)/g ),
				    numOpenParens = ( openParensMatch && openParensMatch.length ) || 0,
				    numCloseParens = ( closeParensMatch && closeParensMatch.length ) || 0;
				
				if( numOpenParens < numCloseParens ) {
					return true;
				}
			}
			
			return false;
		}
		
	} );
	/*global Autolinker */
	/*jshint scripturl:true */
	/**
	 * @private
	 * @class Autolinker.MatchValidator
	 * @extends Object
	 * 
	 * Used by Autolinker to filter out false positives from the {@link Autolinker#matcherRegex}.
	 * 
	 * Due to the limitations of regular expressions (including the missing feature of look-behinds in JS regular expressions),
	 * we cannot always determine the validity of a given match. This class applies a bit of additional logic to filter out any
	 * false positives that have been matched by the {@link Autolinker#matcherRegex}.
	 */
	Autolinker.MatchValidator = Autolinker.Util.extend( Object, {
		
		/**
		 * @private
		 * @property {RegExp} invalidProtocolRelMatchRegex
		 * 
		 * The regular expression used to check a potential protocol-relative URL match, coming from the 
		 * {@link Autolinker#matcherRegex}. A protocol-relative URL is, for example, "//yahoo.com"
		 * 
		 * This regular expression checks to see if there is a word character before the '//' match in order to determine if 
		 * we should actually autolink a protocol-relative URL. This is needed because there is no negative look-behind in 
		 * JavaScript regular expressions. 
		 * 
		 * For instance, we want to autolink something like "Go to: //google.com", but we don't want to autolink something 
		 * like "abc//google.com"
		 */
		invalidProtocolRelMatchRegex : /^[\w]\/\//,
		
		/**
		 * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'
		 * 
		 * @private
		 * @property {RegExp} hasFullProtocolRegex
		 */
		hasFullProtocolRegex : /^[A-Za-z][-.+A-Za-z0-9]+:\/\//,
		
		/**
		 * Regex to find the URI scheme, such as 'mailto:'.
		 * 
		 * This is used to filter out 'javascript:' and 'vbscript:' schemes.
		 * 
		 * @private
		 * @property {RegExp} uriSchemeRegex
		 */
		uriSchemeRegex : /^[A-Za-z][-.+A-Za-z0-9]+:/,
		
		/**
		 * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')
		 * 
		 * @private
		 * @property {RegExp} hasWordCharAfterProtocolRegex
		 */
		hasWordCharAfterProtocolRegex : /:[^\s]*?[A-Za-z]/,
		
		
		/**
		 * Determines if a given match found by {@link Autolinker#processTextNode} is valid. Will return `false` for:
		 * 
		 * 1) URL matches which do not have at least have one period ('.') in the domain name (effectively skipping over 
		 *    matches like "abc:def"). However, URL matches with a protocol will be allowed (ex: 'http://localhost')
		 * 2) URL matches which do not have at least one word character in the domain name (effectively skipping over
		 *    matches like "git:1.0").
		 * 3) A protocol-relative url match (a URL beginning with '//') whose previous character is a word character 
		 *    (effectively skipping over strings like "abc//google.com")
		 * 
		 * Otherwise, returns `true`.
		 * 
		 * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.
		 * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match
		 *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.
		 * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding
		 *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character
		 *   preceding the '//'.
		 * @return {Boolean} `true` if the match given is valid and should be processed, or `false` if the match is invalid and/or 
		 *   should just not be processed.
		 */
		isValidMatch : function( urlMatch, protocolUrlMatch, protocolRelativeMatch ) {
			if(
				( protocolUrlMatch && !this.isValidUriScheme( protocolUrlMatch ) ) ||
				this.urlMatchDoesNotHaveProtocolOrDot( urlMatch, protocolUrlMatch ) ||       // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')
				this.urlMatchDoesNotHaveAtLeastOneWordChar( urlMatch, protocolUrlMatch ) ||  // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like "git:1.0"
				this.isInvalidProtocolRelativeMatch( protocolRelativeMatch )                 // A protocol-relative match which has a word character in front of it (so we can skip something like "abc//google.com")
			) {
				return false;
			}
			
			return true;
		},
		
		
		/**
		 * Determines if the URI scheme is a valid scheme to be autolinked. Returns `false` if the scheme is 
		 * 'javascript:' or 'vbscript:'
		 * 
		 * @private
		 * @param {String} uriSchemeMatch The match URL string for a full URI scheme match. Ex: 'http://yahoo.com' 
		 *   or 'mailto:a@a.com'.
		 * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.
		 */
		isValidUriScheme : function( uriSchemeMatch ) {
			var uriScheme = uriSchemeMatch.match( this.uriSchemeRegex )[ 0 ].toLowerCase();
			
			return ( uriScheme !== 'javascript:' && uriScheme !== 'vbscript:' );
		},
		
		
		/**
		 * Determines if a URL match does not have either:
		 * 
		 * a) a full protocol (i.e. 'http://'), or
		 * b) at least one dot ('.') in the domain name (for a non-full-protocol match).
		 * 
		 * Either situation is considered an invalid URL (ex: 'git:d' does not have either the '://' part, or at least one dot
		 * in the domain name. If the match was 'git:abc.com', we would consider this valid.)
		 * 
		 * @private
		 * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.
		 * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match
		 *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.
		 * @return {Boolean} `true` if the URL match does not have a full protocol, or at least one dot ('.') in a non-full-protocol
		 *   match.
		 */
		urlMatchDoesNotHaveProtocolOrDot : function( urlMatch, protocolUrlMatch ) {
			return ( !!urlMatch && ( !protocolUrlMatch || !this.hasFullProtocolRegex.test( protocolUrlMatch ) ) && urlMatch.indexOf( '.' ) === -1 );
		},
		
		
		/**
		 * Determines if a URL match does not have at least one word character after the protocol (i.e. in the domain name).
		 * 
		 * At least one letter character must exist in the domain name after a protocol match. Ex: skip over something 
		 * like "git:1.0"
		 * 
		 * @private
		 * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.
		 * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to
		 *   know whether or not we have a protocol in the URL string, in order to check for a word character after the protocol
		 *   separator (':').
		 * @return {Boolean} `true` if the URL match does not have at least one word character in it after the protocol, `false`
		 *   otherwise.
		 */
		urlMatchDoesNotHaveAtLeastOneWordChar : function( urlMatch, protocolUrlMatch ) {
			if( urlMatch && protocolUrlMatch ) {
				return !this.hasWordCharAfterProtocolRegex.test( urlMatch );
			} else {
				return false;
			}
		},
		
		
		/**
		 * Determines if a protocol-relative match is an invalid one. This method returns `true` if there is a `protocolRelativeMatch`,
		 * and that match contains a word character before the '//' (i.e. it must contain whitespace or nothing before the '//' in
		 * order to be considered valid).
		 * 
		 * @private
		 * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding
		 *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character
		 *   preceding the '//'.
		 * @return {Boolean} `true` if it is an invalid protocol-relative match, `false` otherwise.
		 */
		isInvalidProtocolRelativeMatch : function( protocolRelativeMatch ) {
			return ( !!protocolRelativeMatch && this.invalidProtocolRelMatchRegex.test( protocolRelativeMatch ) );
		}

	} );
	/*global Autolinker */
	/**
	 * @abstract
	 * @class Autolinker.match.Match
	 * 
	 * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a 
	 * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.
	 * 
	 * For example:
	 * 
	 *     var input = "...";  // string with URLs, Email Addresses, and Twitter Handles
	 *     
	 *     var linkedText = Autolinker.link( input, {
	 *         replaceFn : function( autolinker, match ) {
	 *             console.log( "href = ", match.getAnchorHref() );
	 *             console.log( "text = ", match.getAnchorText() );
	 *         
	 *             switch( match.getType() ) {
	 *                 case 'url' : 
	 *                     console.log( "url: ", match.getUrl() );
	 *                     
	 *                 case 'email' :
	 *                     console.log( "email: ", match.getEmail() );
	 *                     
	 *                 case 'twitter' :
	 *                     console.log( "twitter: ", match.getTwitterHandle() );
	 *             }
	 *         }
	 *     } );
	 *     
	 * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.
	 */
	Autolinker.match.Match = Autolinker.Util.extend( Object, {
		
		/**
		 * @cfg {String} matchedText (required)
		 * 
		 * The original text that was matched.
		 */
		
		
		/**
		 * @constructor
		 * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).
		 */
		constructor : function( cfg ) {
			Autolinker.Util.assign( this, cfg );
		},

		
		/**
		 * Returns a string name for the type of match that this class represents.
		 * 
		 * @abstract
		 * @return {String}
		 */
		getType : Autolinker.Util.abstractMethod,
		
		
		/**
		 * Returns the original text that was matched.
		 * 
		 * @return {String}
		 */
		getMatchedText : function() {
			return this.matchedText;
		},
		

		/**
		 * Returns the anchor href that should be generated for the match.
		 * 
		 * @abstract
		 * @return {String}
		 */
		getAnchorHref : Autolinker.Util.abstractMethod,
		
		
		/**
		 * Returns the anchor text that should be generated for the match.
		 * 
		 * @abstract
		 * @return {String}
		 */
		getAnchorText : Autolinker.Util.abstractMethod

	} );
	/*global Autolinker */
	/**
	 * @class Autolinker.match.Email
	 * @extends Autolinker.match.Match
	 * 
	 * Represents a Email match found in an input string which should be Autolinked.
	 * 
	 * See this class's superclass ({@link Autolinker.match.Match}) for more details.
	 */
	Autolinker.match.Email = Autolinker.Util.extend( Autolinker.match.Match, {
		
		/**
		 * @cfg {String} email (required)
		 * 
		 * The email address that was matched.
		 */
		

		/**
		 * Returns a string name for the type of match that this class represents.
		 * 
		 * @return {String}
		 */
		getType : function() {
			return 'email';
		},
		
		
		/**
		 * Returns the email address that was matched.
		 * 
		 * @return {String}
		 */
		getEmail : function() {
			return this.email;
		},
		

		/**
		 * Returns the anchor href that should be generated for the match.
		 * 
		 * @return {String}
		 */
		getAnchorHref : function() {
			return 'mailto:' + this.email;
		},
		
		
		/**
		 * Returns the anchor text that should be generated for the match.
		 * 
		 * @return {String}
		 */
		getAnchorText : function() {
			return this.email;
		}
		
	} );
	/*global Autolinker */
	/**
	 * @class Autolinker.match.Twitter
	 * @extends Autolinker.match.Match
	 * 
	 * Represents a Twitter match found in an input string which should be Autolinked.
	 * 
	 * See this class's superclass ({@link Autolinker.match.Match}) for more details.
	 */
	Autolinker.match.Twitter = Autolinker.Util.extend( Autolinker.match.Match, {
		
		/**
		 * @cfg {String} twitterHandle (required)
		 * 
		 * The Twitter handle that was matched.
		 */
		

		/**
		 * Returns the type of match that this class represents.
		 * 
		 * @return {String}
		 */
		getType : function() {
			return 'twitter';
		},
		
		
		/**
		 * Returns a string name for the type of match that this class represents.
		 * 
		 * @return {String}
		 */
		getTwitterHandle : function() {
			return this.twitterHandle;
		},
		

		/**
		 * Returns the anchor href that should be generated for the match.
		 * 
		 * @return {String}
		 */
		getAnchorHref : function() {
			return 'https://twitter.com/' + this.twitterHandle;
		},
		
		
		/**
		 * Returns the anchor text that should be generated for the match.
		 * 
		 * @return {String}
		 */
		getAnchorText : function() {
			return '@' + this.twitterHandle;
		}
		
	} );
	/*global Autolinker */
	/**
	 * @class Autolinker.match.Url
	 * @extends Autolinker.match.Match
	 * 
	 * Represents a Url match found in an input string which should be Autolinked.
	 * 
	 * See this class's superclass ({@link Autolinker.match.Match}) for more details.
	 */
	Autolinker.match.Url = Autolinker.Util.extend( Autolinker.match.Match, {
		
		/**
		 * @cfg {String} url (required)
		 * 
		 * The url that was matched.
		 */
		
		/**
		 * @cfg {Boolean} protocolUrlMatch (required)
		 * 
		 * `true` if the URL is a match which already has a protocol (i.e. 'http://'), `false` if the match was from a 'www' or
		 * known TLD match.
		 */
		
		/**
		 * @cfg {Boolean} protocolRelativeMatch (required)
		 * 
		 * `true` if the URL is a protocol-relative match. A protocol-relative match is a URL that starts with '//',
		 * and will be either http:// or https:// based on the protocol that the site is loaded under.
		 */
		
		/**
		 * @cfg {Boolean} stripPrefix (required)
		 * @inheritdoc Autolinker#stripPrefix
		 */
		

		/**
		 * @private
		 * @property {RegExp} urlPrefixRegex
		 * 
		 * A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.
		 */
		urlPrefixRegex: /^(https?:\/\/)?(www\.)?/i,
		
		/**
		 * @private
		 * @property {RegExp} protocolRelativeRegex
		 * 
		 * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes
		 * of {@link #getAnchorText}. A protocol-relative URL is, for example, "//yahoo.com"
		 */
		protocolRelativeRegex : /^\/\//,
		
		/**
		 * @private
		 * @property {Boolean} protocolPrepended
		 * 
		 * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the
		 * {@link #url} did not have a protocol)
		 */
		protocolPrepended : false,
		

		/**
		 * Returns a string name for the type of match that this class represents.
		 * 
		 * @return {String}
		 */
		getType : function() {
			return 'url';
		},
		
		
		/**
		 * Returns the url that was matched, assuming the protocol to be 'http://' if the original
		 * match was missing a protocol.
		 * 
		 * @return {String}
		 */
		getUrl : function() {
			var url = this.url;
			
			// if the url string doesn't begin with a protocol, assume 'http://'
			if( !this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended ) {
				url = this.url = 'http://' + url;
				
				this.protocolPrepended = true;
			}
			
			return url;
		},
		

		/**
		 * Returns the anchor href that should be generated for the match.
		 * 
		 * @return {String}
		 */
		getAnchorHref : function() {
			var url = this.getUrl();
			
			return url.replace( /&amp;/g, '&' );  // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html 
		},
		
		
		/**
		 * Returns the anchor text that should be generated for the match.
		 * 
		 * @return {String}
		 */
		getAnchorText : function() {
			var anchorText = this.getUrl();
			
			if( this.protocolRelativeMatch ) {
				// Strip off any protocol-relative '//' from the anchor text
				anchorText = this.stripProtocolRelativePrefix( anchorText );
			}
			if( this.stripPrefix ) {
				anchorText = this.stripUrlPrefix( anchorText );
			}
			anchorText = this.removeTrailingSlash( anchorText );  // remove trailing slash, if there is one
			
			return anchorText;
		},
		
		
		// ---------------------------------------
		
		// Utility Functionality
		
		/**
		 * Strips the URL prefix (such as "http://" or "https://") from the given text.
		 * 
		 * @private
		 * @param {String} text The text of the anchor that is being generated, for which to strip off the
		 *   url prefix (such as stripping off "http://")
		 * @return {String} The `anchorText`, with the prefix stripped.
		 */
		stripUrlPrefix : function( text ) {
			return text.replace( this.urlPrefixRegex, '' );
		},
		
		
		/**
		 * Strips any protocol-relative '//' from the anchor text.
		 * 
		 * @private
		 * @param {String} text The text of the anchor that is being generated, for which to strip off the
		 *   protocol-relative prefix (such as stripping off "//")
		 * @return {String} The `anchorText`, with the protocol-relative prefix stripped.
		 */
		stripProtocolRelativePrefix : function( text ) {
			return text.replace( this.protocolRelativeRegex, '' );
		},
		
		
		/**
		 * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.
		 * 
		 * @private
		 * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing
		 *   slash ('/') that may exist.
		 * @return {String} The `anchorText`, with the trailing slash removed.
		 */
		removeTrailingSlash : function( anchorText ) {
			if( anchorText.charAt( anchorText.length - 1 ) === '/' ) {
				anchorText = anchorText.slice( 0, -1 );
			}
			return anchorText;
		}
		
	} );
	return Autolinker;

	}));


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Local dependencies
	 */

	var Ruler      = __webpack_require__(249);
	var StateBlock = __webpack_require__(267);

	/**
	 * Parser rules
	 */

	var _rules = [
	  [ 'code',       __webpack_require__(268) ],
	  [ 'fences',     __webpack_require__(269),     [ 'paragraph', 'blockquote', 'list' ] ],
	  [ 'blockquote', __webpack_require__(270), [ 'paragraph', 'blockquote', 'list' ] ],
	  [ 'hr',         __webpack_require__(271),         [ 'paragraph', 'blockquote', 'list' ] ],
	  [ 'list',       __webpack_require__(272),       [ 'paragraph', 'blockquote' ] ],
	  [ 'footnote',   __webpack_require__(273),   [ 'paragraph' ] ],
	  [ 'heading',    __webpack_require__(274),    [ 'paragraph', 'blockquote' ] ],
	  [ 'lheading',   __webpack_require__(275) ],
	  [ 'htmlblock',  __webpack_require__(276),  [ 'paragraph', 'blockquote' ] ],
	  [ 'table',      __webpack_require__(278),      [ 'paragraph' ] ],
	  [ 'deflist',    __webpack_require__(279),    [ 'paragraph' ] ],
	  [ 'paragraph',  __webpack_require__(280) ]
	];

	/**
	 * Block Parser class
	 *
	 * @api private
	 */

	function ParserBlock() {
	  this.ruler = new Ruler();
	  for (var i = 0; i < _rules.length; i++) {
	    this.ruler.push(_rules[i][0], _rules[i][1], {
	      alt: (_rules[i][2] || []).slice()
	    });
	  }
	}

	/**
	 * Generate tokens for the given input range.
	 *
	 * @param  {Object} `state` Has properties like `src`, `parser`, `options` etc
	 * @param  {Number} `startLine`
	 * @param  {Number} `endLine`
	 * @api private
	 */

	ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
	  var rules = this.ruler.getRules('');
	  var len = rules.length;
	  var line = startLine;
	  var hasEmptyLines = false;
	  var ok, i;

	  while (line < endLine) {
	    state.line = line = state.skipEmptyLines(line);
	    if (line >= endLine) {
	      break;
	    }

	    // Termination condition for nested calls.
	    // Nested calls currently used for blockquotes & lists
	    if (state.tShift[line] < state.blkIndent) {
	      break;
	    }

	    // Try all possible rules.
	    // On success, rule should:
	    //
	    // - update `state.line`
	    // - update `state.tokens`
	    // - return true

	    for (i = 0; i < len; i++) {
	      ok = rules[i](state, line, endLine, false);
	      if (ok) {
	        break;
	      }
	    }

	    // set state.tight iff we had an empty line before current tag
	    // i.e. latest empty line should not count
	    state.tight = !hasEmptyLines;

	    // paragraph might "eat" one newline after it in nested lists
	    if (state.isEmpty(state.line - 1)) {
	      hasEmptyLines = true;
	    }

	    line = state.line;

	    if (line < endLine && state.isEmpty(line)) {
	      hasEmptyLines = true;
	      line++;

	      // two empty lines should stop the parser in list mode
	      if (line < endLine && state.parentType === 'list' && state.isEmpty(line)) { break; }
	      state.line = line;
	    }
	  }
	};

	var TABS_SCAN_RE = /[\n\t]/g;
	var NEWLINES_RE  = /\r[\n\u0085]|[\u2424\u2028\u0085]/g;
	var SPACES_RE    = /\u00a0/g;

	/**
	 * Tokenize the given `str`.
	 *
	 * @param  {String} `str` Source string
	 * @param  {Object} `options`
	 * @param  {Object} `env`
	 * @param  {Array} `outTokens`
	 * @api private
	 */

	ParserBlock.prototype.parse = function (str, options, env, outTokens) {
	  var state, lineStart = 0, lastTabPos = 0;
	  if (!str) { return []; }

	  // Normalize spaces
	  str = str.replace(SPACES_RE, ' ');

	  // Normalize newlines
	  str = str.replace(NEWLINES_RE, '\n');

	  // Replace tabs with proper number of spaces (1..4)
	  if (str.indexOf('\t') >= 0) {
	    str = str.replace(TABS_SCAN_RE, function (match, offset) {
	      var result;
	      if (str.charCodeAt(offset) === 0x0A) {
	        lineStart = offset + 1;
	        lastTabPos = 0;
	        return match;
	      }
	      result = '    '.slice((offset - lineStart - lastTabPos) % 4);
	      lastTabPos = offset - lineStart + 1;
	      return result;
	    });
	  }

	  state = new StateBlock(str, this, options, env, outTokens);
	  this.tokenize(state, state.line, state.lineMax);
	};

	/**
	 * Expose `ParserBlock`
	 */

	module.exports = ParserBlock;


/***/ }),
/* 267 */
/***/ (function(module, exports) {

	// Parser state class

	'use strict';


	function StateBlock(src, parser, options, env, tokens) {
	  var ch, s, start, pos, len, indent, indent_found;

	  this.src = src;

	  // Shortcuts to simplify nested calls
	  this.parser = parser;

	  this.options = options;

	  this.env = env;

	  //
	  // Internal state vartiables
	  //

	  this.tokens = tokens;

	  this.bMarks = [];  // line begin offsets for fast jumps
	  this.eMarks = [];  // line end offsets for fast jumps
	  this.tShift = [];  // indent for each line

	  // block parser variables
	  this.blkIndent  = 0; // required block content indent
	                       // (for example, if we are in list)
	  this.line       = 0; // line index in src
	  this.lineMax    = 0; // lines count
	  this.tight      = false;  // loose/tight mode for lists
	  this.parentType = 'root'; // if `list`, block parser stops on two newlines
	  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)

	  this.level = 0;

	  // renderer
	  this.result = '';

	  // Create caches
	  // Generate markers.
	  s = this.src;
	  indent = 0;
	  indent_found = false;

	  for (start = pos = indent = 0, len = s.length; pos < len; pos++) {
	    ch = s.charCodeAt(pos);

	    if (!indent_found) {
	      if (ch === 0x20/* space */) {
	        indent++;
	        continue;
	      } else {
	        indent_found = true;
	      }
	    }

	    if (ch === 0x0A || pos === len - 1) {
	      if (ch !== 0x0A) { pos++; }
	      this.bMarks.push(start);
	      this.eMarks.push(pos);
	      this.tShift.push(indent);

	      indent_found = false;
	      indent = 0;
	      start = pos + 1;
	    }
	  }

	  // Push fake entry to simplify cache bounds checks
	  this.bMarks.push(s.length);
	  this.eMarks.push(s.length);
	  this.tShift.push(0);

	  this.lineMax = this.bMarks.length - 1; // don't count last fake line
	}

	StateBlock.prototype.isEmpty = function isEmpty(line) {
	  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
	};

	StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
	  for (var max = this.lineMax; from < max; from++) {
	    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
	      break;
	    }
	  }
	  return from;
	};

	// Skip spaces from given position.
	StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
	  for (var max = this.src.length; pos < max; pos++) {
	    if (this.src.charCodeAt(pos) !== 0x20/* space */) { break; }
	  }
	  return pos;
	};

	// Skip char codes from given position
	StateBlock.prototype.skipChars = function skipChars(pos, code) {
	  for (var max = this.src.length; pos < max; pos++) {
	    if (this.src.charCodeAt(pos) !== code) { break; }
	  }
	  return pos;
	};

	// Skip char codes reverse from given position - 1
	StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
	  if (pos <= min) { return pos; }

	  while (pos > min) {
	    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }
	  }
	  return pos;
	};

	// cut lines range from source.
	StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
	  var i, first, last, queue, shift,
	      line = begin;

	  if (begin >= end) {
	    return '';
	  }

	  // Opt: don't use push queue for single line;
	  if (line + 1 === end) {
	    first = this.bMarks[line] + Math.min(this.tShift[line], indent);
	    last = keepLastLF ? this.eMarks[line] + 1 : this.eMarks[line];
	    return this.src.slice(first, last);
	  }

	  queue = new Array(end - begin);

	  for (i = 0; line < end; line++, i++) {
	    shift = this.tShift[line];
	    if (shift > indent) { shift = indent; }
	    if (shift < 0) { shift = 0; }

	    first = this.bMarks[line] + shift;

	    if (line + 1 < end || keepLastLF) {
	      // No need for bounds check because we have fake entry on tail.
	      last = this.eMarks[line] + 1;
	    } else {
	      last = this.eMarks[line];
	    }

	    queue[i] = this.src.slice(first, last);
	  }

	  return queue.join('');
	};


	module.exports = StateBlock;


/***/ }),
/* 268 */
/***/ (function(module, exports) {

	// Code block (4 spaces padded)

	'use strict';


	module.exports = function code(state, startLine, endLine/*, silent*/) {
	  var nextLine, last;

	  if (state.tShift[startLine] - state.blkIndent < 4) { return false; }

	  last = nextLine = startLine + 1;

	  while (nextLine < endLine) {
	    if (state.isEmpty(nextLine)) {
	      nextLine++;
	      continue;
	    }
	    if (state.tShift[nextLine] - state.blkIndent >= 4) {
	      nextLine++;
	      last = nextLine;
	      continue;
	    }
	    break;
	  }

	  state.line = nextLine;
	  state.tokens.push({
	    type: 'code',
	    content: state.getLines(startLine, last, 4 + state.blkIndent, true),
	    block: true,
	    lines: [ startLine, state.line ],
	    level: state.level
	  });

	  return true;
	};


/***/ }),
/* 269 */
/***/ (function(module, exports) {

	// fences (``` lang, ~~~ lang)

	'use strict';


	module.exports = function fences(state, startLine, endLine, silent) {
	  var marker, len, params, nextLine, mem,
	      haveEndMarker = false,
	      pos = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  if (pos + 3 > max) { return false; }

	  marker = state.src.charCodeAt(pos);

	  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {
	    return false;
	  }

	  // scan marker length
	  mem = pos;
	  pos = state.skipChars(pos, marker);

	  len = pos - mem;

	  if (len < 3) { return false; }

	  params = state.src.slice(pos, max).trim();

	  if (params.indexOf('`') >= 0) { return false; }

	  // Since start is found, we can report success here in validation mode
	  if (silent) { return true; }

	  // search end of block
	  nextLine = startLine;

	  for (;;) {
	    nextLine++;
	    if (nextLine >= endLine) {
	      // unclosed block should be autoclosed by end of document.
	      // also block seems to be autoclosed by end of parent
	      break;
	    }

	    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
	    max = state.eMarks[nextLine];

	    if (pos < max && state.tShift[nextLine] < state.blkIndent) {
	      // non-empty line with negative indent should stop the list:
	      // - ```
	      //  test
	      break;
	    }

	    if (state.src.charCodeAt(pos) !== marker) { continue; }

	    if (state.tShift[nextLine] - state.blkIndent >= 4) {
	      // closing fence should be indented less than 4 spaces
	      continue;
	    }

	    pos = state.skipChars(pos, marker);

	    // closing code fence must be at least as long as the opening one
	    if (pos - mem < len) { continue; }

	    // make sure tail has spaces only
	    pos = state.skipSpaces(pos);

	    if (pos < max) { continue; }

	    haveEndMarker = true;
	    // found!
	    break;
	  }

	  // If a fence has heading spaces, they should be removed from its inner block
	  len = state.tShift[startLine];

	  state.line = nextLine + (haveEndMarker ? 1 : 0);
	  state.tokens.push({
	    type: 'fence',
	    params: params,
	    content: state.getLines(startLine + 1, nextLine, len, true),
	    lines: [ startLine, state.line ],
	    level: state.level
	  });

	  return true;
	};


/***/ }),
/* 270 */
/***/ (function(module, exports) {

	// Block quotes

	'use strict';


	module.exports = function blockquote(state, startLine, endLine, silent) {
	  var nextLine, lastLineEmpty, oldTShift, oldBMarks, oldIndent, oldParentType, lines,
	      terminatorRules,
	      i, l, terminate,
	      pos = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  if (pos > max) { return false; }

	  // check the block quote marker
	  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }

	  if (state.level >= state.options.maxNesting) { return false; }

	  // we know that it's going to be a valid blockquote,
	  // so no point trying to find the end of it in silent mode
	  if (silent) { return true; }

	  // skip one optional space after '>'
	  if (state.src.charCodeAt(pos) === 0x20) { pos++; }

	  oldIndent = state.blkIndent;
	  state.blkIndent = 0;

	  oldBMarks = [ state.bMarks[startLine] ];
	  state.bMarks[startLine] = pos;

	  // check if we have an empty blockquote
	  pos = pos < max ? state.skipSpaces(pos) : pos;
	  lastLineEmpty = pos >= max;

	  oldTShift = [ state.tShift[startLine] ];
	  state.tShift[startLine] = pos - state.bMarks[startLine];

	  terminatorRules = state.parser.ruler.getRules('blockquote');

	  // Search the end of the block
	  //
	  // Block ends with either:
	  //  1. an empty line outside:
	  //     ```
	  //     > test
	  //
	  //     ```
	  //  2. an empty line inside:
	  //     ```
	  //     >
	  //     test
	  //     ```
	  //  3. another tag
	  //     ```
	  //     > test
	  //      - - -
	  //     ```
	  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
	    pos = state.bMarks[nextLine] + state.tShift[nextLine];
	    max = state.eMarks[nextLine];

	    if (pos >= max) {
	      // Case 1: line is not inside the blockquote, and this line is empty.
	      break;
	    }

	    if (state.src.charCodeAt(pos++) === 0x3E/* > */) {
	      // This line is inside the blockquote.

	      // skip one optional space after '>'
	      if (state.src.charCodeAt(pos) === 0x20) { pos++; }

	      oldBMarks.push(state.bMarks[nextLine]);
	      state.bMarks[nextLine] = pos;

	      pos = pos < max ? state.skipSpaces(pos) : pos;
	      lastLineEmpty = pos >= max;

	      oldTShift.push(state.tShift[nextLine]);
	      state.tShift[nextLine] = pos - state.bMarks[nextLine];
	      continue;
	    }

	    // Case 2: line is not inside the blockquote, and the last line was empty.
	    if (lastLineEmpty) { break; }

	    // Case 3: another tag found.
	    terminate = false;
	    for (i = 0, l = terminatorRules.length; i < l; i++) {
	      if (terminatorRules[i](state, nextLine, endLine, true)) {
	        terminate = true;
	        break;
	      }
	    }
	    if (terminate) { break; }

	    oldBMarks.push(state.bMarks[nextLine]);
	    oldTShift.push(state.tShift[nextLine]);

	    // A negative number means that this is a paragraph continuation;
	    //
	    // Any negative number will do the job here, but it's better for it
	    // to be large enough to make any bugs obvious.
	    state.tShift[nextLine] = -1337;
	  }

	  oldParentType = state.parentType;
	  state.parentType = 'blockquote';
	  state.tokens.push({
	    type: 'blockquote_open',
	    lines: lines = [ startLine, 0 ],
	    level: state.level++
	  });
	  state.parser.tokenize(state, startLine, nextLine);
	  state.tokens.push({
	    type: 'blockquote_close',
	    level: --state.level
	  });
	  state.parentType = oldParentType;
	  lines[1] = state.line;

	  // Restore original tShift; this might not be necessary since the parser
	  // has already been here, but just to make sure we can do that.
	  for (i = 0; i < oldTShift.length; i++) {
	    state.bMarks[i + startLine] = oldBMarks[i];
	    state.tShift[i + startLine] = oldTShift[i];
	  }
	  state.blkIndent = oldIndent;

	  return true;
	};


/***/ }),
/* 271 */
/***/ (function(module, exports) {

	// Horizontal rule

	'use strict';


	module.exports = function hr(state, startLine, endLine, silent) {
	  var marker, cnt, ch,
	      pos = state.bMarks[startLine],
	      max = state.eMarks[startLine];

	  pos += state.tShift[startLine];

	  if (pos > max) { return false; }

	  marker = state.src.charCodeAt(pos++);

	  // Check hr marker
	  if (marker !== 0x2A/* * */ &&
	      marker !== 0x2D/* - */ &&
	      marker !== 0x5F/* _ */) {
	    return false;
	  }

	  // markers can be mixed with spaces, but there should be at least 3 one

	  cnt = 1;
	  while (pos < max) {
	    ch = state.src.charCodeAt(pos++);
	    if (ch !== marker && ch !== 0x20/* space */) { return false; }
	    if (ch === marker) { cnt++; }
	  }

	  if (cnt < 3) { return false; }

	  if (silent) { return true; }

	  state.line = startLine + 1;
	  state.tokens.push({
	    type: 'hr',
	    lines: [ startLine, state.line ],
	    level: state.level
	  });

	  return true;
	};


/***/ }),
/* 272 */
/***/ (function(module, exports) {

	// Lists

	'use strict';


	// Search `[-+*][\n ]`, returns next pos arter marker on success
	// or -1 on fail.
	function skipBulletListMarker(state, startLine) {
	  var marker, pos, max;

	  pos = state.bMarks[startLine] + state.tShift[startLine];
	  max = state.eMarks[startLine];

	  if (pos >= max) { return -1; }

	  marker = state.src.charCodeAt(pos++);
	  // Check bullet
	  if (marker !== 0x2A/* * */ &&
	      marker !== 0x2D/* - */ &&
	      marker !== 0x2B/* + */) {
	    return -1;
	  }

	  if (pos < max && state.src.charCodeAt(pos) !== 0x20) {
	    // " 1.test " - is not a list item
	    return -1;
	  }

	  return pos;
	}

	// Search `\d+[.)][\n ]`, returns next pos arter marker on success
	// or -1 on fail.
	function skipOrderedListMarker(state, startLine) {
	  var ch,
	      pos = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  if (pos + 1 >= max) { return -1; }

	  ch = state.src.charCodeAt(pos++);

	  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }

	  for (;;) {
	    // EOL -> fail
	    if (pos >= max) { return -1; }

	    ch = state.src.charCodeAt(pos++);

	    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {
	      continue;
	    }

	    // found valid marker
	    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
	      break;
	    }

	    return -1;
	  }


	  if (pos < max && state.src.charCodeAt(pos) !== 0x20/* space */) {
	    // " 1.test " - is not a list item
	    return -1;
	  }
	  return pos;
	}

	function markTightParagraphs(state, idx) {
	  var i, l,
	      level = state.level + 2;

	  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
	    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
	      state.tokens[i + 2].tight = true;
	      state.tokens[i].tight = true;
	      i += 2;
	    }
	  }
	}


	module.exports = function list(state, startLine, endLine, silent) {
	  var nextLine,
	      indent,
	      oldTShift,
	      oldIndent,
	      oldTight,
	      oldParentType,
	      start,
	      posAfterMarker,
	      max,
	      indentAfterMarker,
	      markerValue,
	      markerCharCode,
	      isOrdered,
	      contentStart,
	      listTokIdx,
	      prevEmptyEnd,
	      listLines,
	      itemLines,
	      tight = true,
	      terminatorRules,
	      i, l, terminate;

	  // Detect list type and position after marker
	  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
	    isOrdered = true;
	  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
	    isOrdered = false;
	  } else {
	    return false;
	  }

	  if (state.level >= state.options.maxNesting) { return false; }

	  // We should terminate list on style change. Remember first one to compare.
	  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);

	  // For validation mode we can terminate immediately
	  if (silent) { return true; }

	  // Start list
	  listTokIdx = state.tokens.length;

	  if (isOrdered) {
	    start = state.bMarks[startLine] + state.tShift[startLine];
	    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));

	    state.tokens.push({
	      type: 'ordered_list_open',
	      order: markerValue,
	      lines: listLines = [ startLine, 0 ],
	      level: state.level++
	    });

	  } else {
	    state.tokens.push({
	      type: 'bullet_list_open',
	      lines: listLines = [ startLine, 0 ],
	      level: state.level++
	    });
	  }

	  //
	  // Iterate list items
	  //

	  nextLine = startLine;
	  prevEmptyEnd = false;
	  terminatorRules = state.parser.ruler.getRules('list');

	  while (nextLine < endLine) {
	    contentStart = state.skipSpaces(posAfterMarker);
	    max = state.eMarks[nextLine];

	    if (contentStart >= max) {
	      // trimming space in "-    \n  3" case, indent is 1 here
	      indentAfterMarker = 1;
	    } else {
	      indentAfterMarker = contentStart - posAfterMarker;
	    }

	    // If we have more than 4 spaces, the indent is 1
	    // (the rest is just indented code block)
	    if (indentAfterMarker > 4) { indentAfterMarker = 1; }

	    // If indent is less than 1, assume that it's one, example:
	    //  "-\n  test"
	    if (indentAfterMarker < 1) { indentAfterMarker = 1; }

	    // "  -  test"
	    //  ^^^^^ - calculating total length of this thing
	    indent = (posAfterMarker - state.bMarks[nextLine]) + indentAfterMarker;

	    // Run subparser & write tokens
	    state.tokens.push({
	      type: 'list_item_open',
	      lines: itemLines = [ startLine, 0 ],
	      level: state.level++
	    });

	    oldIndent = state.blkIndent;
	    oldTight = state.tight;
	    oldTShift = state.tShift[startLine];
	    oldParentType = state.parentType;
	    state.tShift[startLine] = contentStart - state.bMarks[startLine];
	    state.blkIndent = indent;
	    state.tight = true;
	    state.parentType = 'list';

	    state.parser.tokenize(state, startLine, endLine, true);

	    // If any of list item is tight, mark list as tight
	    if (!state.tight || prevEmptyEnd) {
	      tight = false;
	    }
	    // Item become loose if finish with empty line,
	    // but we should filter last element, because it means list finish
	    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);

	    state.blkIndent = oldIndent;
	    state.tShift[startLine] = oldTShift;
	    state.tight = oldTight;
	    state.parentType = oldParentType;

	    state.tokens.push({
	      type: 'list_item_close',
	      level: --state.level
	    });

	    nextLine = startLine = state.line;
	    itemLines[1] = nextLine;
	    contentStart = state.bMarks[startLine];

	    if (nextLine >= endLine) { break; }

	    if (state.isEmpty(nextLine)) {
	      break;
	    }

	    //
	    // Try to check if list is terminated or continued.
	    //
	    if (state.tShift[nextLine] < state.blkIndent) { break; }

	    // fail if terminating block found
	    terminate = false;
	    for (i = 0, l = terminatorRules.length; i < l; i++) {
	      if (terminatorRules[i](state, nextLine, endLine, true)) {
	        terminate = true;
	        break;
	      }
	    }
	    if (terminate) { break; }

	    // fail if list has another type
	    if (isOrdered) {
	      posAfterMarker = skipOrderedListMarker(state, nextLine);
	      if (posAfterMarker < 0) { break; }
	    } else {
	      posAfterMarker = skipBulletListMarker(state, nextLine);
	      if (posAfterMarker < 0) { break; }
	    }

	    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }
	  }

	  // Finilize list
	  state.tokens.push({
	    type: isOrdered ? 'ordered_list_close' : 'bullet_list_close',
	    level: --state.level
	  });
	  listLines[1] = nextLine;

	  state.line = nextLine;

	  // mark paragraphs tight if needed
	  if (tight) {
	    markTightParagraphs(state, listTokIdx);
	  }

	  return true;
	};


/***/ }),
/* 273 */
/***/ (function(module, exports) {

	// Process footnote reference list

	'use strict';


	module.exports = function footnote(state, startLine, endLine, silent) {
	  var oldBMark, oldTShift, oldParentType, pos, label,
	      start = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  // line should be at least 5 chars - "[^x]:"
	  if (start + 4 > max) { return false; }

	  if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  for (pos = start + 2; pos < max; pos++) {
	    if (state.src.charCodeAt(pos) === 0x20) { return false; }
	    if (state.src.charCodeAt(pos) === 0x5D /* ] */) {
	      break;
	    }
	  }

	  if (pos === start + 2) { return false; } // no empty footnote labels
	  if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A /* : */) { return false; }
	  if (silent) { return true; }
	  pos++;

	  if (!state.env.footnotes) { state.env.footnotes = {}; }
	  if (!state.env.footnotes.refs) { state.env.footnotes.refs = {}; }
	  label = state.src.slice(start + 2, pos - 2);
	  state.env.footnotes.refs[':' + label] = -1;

	  state.tokens.push({
	    type: 'footnote_reference_open',
	    label: label,
	    level: state.level++
	  });

	  oldBMark = state.bMarks[startLine];
	  oldTShift = state.tShift[startLine];
	  oldParentType = state.parentType;
	  state.tShift[startLine] = state.skipSpaces(pos) - pos;
	  state.bMarks[startLine] = pos;
	  state.blkIndent += 4;
	  state.parentType = 'footnote';

	  if (state.tShift[startLine] < state.blkIndent) {
	    state.tShift[startLine] += state.blkIndent;
	    state.bMarks[startLine] -= state.blkIndent;
	  }

	  state.parser.tokenize(state, startLine, endLine, true);

	  state.parentType = oldParentType;
	  state.blkIndent -= 4;
	  state.tShift[startLine] = oldTShift;
	  state.bMarks[startLine] = oldBMark;

	  state.tokens.push({
	    type: 'footnote_reference_close',
	    level: --state.level
	  });

	  return true;
	};


/***/ }),
/* 274 */
/***/ (function(module, exports) {

	// heading (#, ##, ...)

	'use strict';


	module.exports = function heading(state, startLine, endLine, silent) {
	  var ch, level, tmp,
	      pos = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  if (pos >= max) { return false; }

	  ch  = state.src.charCodeAt(pos);

	  if (ch !== 0x23/* # */ || pos >= max) { return false; }

	  // count heading level
	  level = 1;
	  ch = state.src.charCodeAt(++pos);
	  while (ch === 0x23/* # */ && pos < max && level <= 6) {
	    level++;
	    ch = state.src.charCodeAt(++pos);
	  }

	  if (level > 6 || (pos < max && ch !== 0x20/* space */)) { return false; }

	  if (silent) { return true; }

	  // Let's cut tails like '    ###  ' from the end of string

	  max = state.skipCharsBack(max, 0x20, pos); // space
	  tmp = state.skipCharsBack(max, 0x23, pos); // #
	  if (tmp > pos && state.src.charCodeAt(tmp - 1) === 0x20/* space */) {
	    max = tmp;
	  }

	  state.line = startLine + 1;

	  state.tokens.push({ type: 'heading_open',
	    hLevel: level,
	    lines: [ startLine, state.line ],
	    level: state.level
	  });

	  // only if header is not empty
	  if (pos < max) {
	    state.tokens.push({
	      type: 'inline',
	      content: state.src.slice(pos, max).trim(),
	      level: state.level + 1,
	      lines: [ startLine, state.line ],
	      children: []
	    });
	  }
	  state.tokens.push({ type: 'heading_close', hLevel: level, level: state.level });

	  return true;
	};


/***/ }),
/* 275 */
/***/ (function(module, exports) {

	// lheading (---, ===)

	'use strict';


	module.exports = function lheading(state, startLine, endLine/*, silent*/) {
	  var marker, pos, max,
	      next = startLine + 1;

	  if (next >= endLine) { return false; }
	  if (state.tShift[next] < state.blkIndent) { return false; }

	  // Scan next line

	  if (state.tShift[next] - state.blkIndent > 3) { return false; }

	  pos = state.bMarks[next] + state.tShift[next];
	  max = state.eMarks[next];

	  if (pos >= max) { return false; }

	  marker = state.src.charCodeAt(pos);

	  if (marker !== 0x2D/* - */ && marker !== 0x3D/* = */) { return false; }

	  pos = state.skipChars(pos, marker);

	  pos = state.skipSpaces(pos);

	  if (pos < max) { return false; }

	  pos = state.bMarks[startLine] + state.tShift[startLine];

	  state.line = next + 1;
	  state.tokens.push({
	    type: 'heading_open',
	    hLevel: marker === 0x3D/* = */ ? 1 : 2,
	    lines: [ startLine, state.line ],
	    level: state.level
	  });
	  state.tokens.push({
	    type: 'inline',
	    content: state.src.slice(pos, state.eMarks[startLine]).trim(),
	    level: state.level + 1,
	    lines: [ startLine, state.line - 1 ],
	    children: []
	  });
	  state.tokens.push({
	    type: 'heading_close',
	    hLevel: marker === 0x3D/* = */ ? 1 : 2,
	    level: state.level
	  });

	  return true;
	};


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	// HTML block

	'use strict';


	var block_names = __webpack_require__(277);


	var HTML_TAG_OPEN_RE = /^<([a-zA-Z]{1,15})[\s\/>]/;
	var HTML_TAG_CLOSE_RE = /^<\/([a-zA-Z]{1,15})[\s>]/;

	function isLetter(ch) {
	  /*eslint no-bitwise:0*/
	  var lc = ch | 0x20; // to lower case
	  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);
	}

	module.exports = function htmlblock(state, startLine, endLine, silent) {
	  var ch, match, nextLine,
	      pos = state.bMarks[startLine],
	      max = state.eMarks[startLine],
	      shift = state.tShift[startLine];

	  pos += shift;

	  if (!state.options.html) { return false; }

	  if (shift > 3 || pos + 2 >= max) { return false; }

	  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

	  ch = state.src.charCodeAt(pos + 1);

	  if (ch === 0x21/* ! */ || ch === 0x3F/* ? */) {
	    // Directive start / comment start / processing instruction start
	    if (silent) { return true; }

	  } else if (ch === 0x2F/* / */ || isLetter(ch)) {

	    // Probably start or end of tag
	    if (ch === 0x2F/* \ */) {
	      // closing tag
	      match = state.src.slice(pos, max).match(HTML_TAG_CLOSE_RE);
	      if (!match) { return false; }
	    } else {
	      // opening tag
	      match = state.src.slice(pos, max).match(HTML_TAG_OPEN_RE);
	      if (!match) { return false; }
	    }
	    // Make sure tag name is valid
	    if (block_names[match[1].toLowerCase()] !== true) { return false; }
	    if (silent) { return true; }

	  } else {
	    return false;
	  }

	  // If we are here - we detected HTML block.
	  // Let's roll down till empty line (block end).
	  nextLine = startLine + 1;
	  while (nextLine < state.lineMax && !state.isEmpty(nextLine)) {
	    nextLine++;
	  }

	  state.line = nextLine;
	  state.tokens.push({
	    type: 'htmlblock',
	    level: state.level,
	    lines: [ startLine, state.line ],
	    content: state.getLines(startLine, nextLine, 0, true)
	  });

	  return true;
	};


/***/ }),
/* 277 */
/***/ (function(module, exports) {

	// List of valid html blocks names, accorting to commonmark spec
	// http://jgm.github.io/CommonMark/spec.html#html-blocks

	'use strict';

	var html_blocks = {};

	[
	  'article',
	  'aside',
	  'button',
	  'blockquote',
	  'body',
	  'canvas',
	  'caption',
	  'col',
	  'colgroup',
	  'dd',
	  'div',
	  'dl',
	  'dt',
	  'embed',
	  'fieldset',
	  'figcaption',
	  'figure',
	  'footer',
	  'form',
	  'h1',
	  'h2',
	  'h3',
	  'h4',
	  'h5',
	  'h6',
	  'header',
	  'hgroup',
	  'hr',
	  'iframe',
	  'li',
	  'map',
	  'object',
	  'ol',
	  'output',
	  'p',
	  'pre',
	  'progress',
	  'script',
	  'section',
	  'style',
	  'table',
	  'tbody',
	  'td',
	  'textarea',
	  'tfoot',
	  'th',
	  'tr',
	  'thead',
	  'ul',
	  'video'
	].forEach(function (name) { html_blocks[name] = true; });


	module.exports = html_blocks;


/***/ }),
/* 278 */
/***/ (function(module, exports) {

	// GFM table, non-standard

	'use strict';


	function getLine(state, line) {
	  var pos = state.bMarks[line] + state.blkIndent,
	      max = state.eMarks[line];

	  return state.src.substr(pos, max - pos);
	}

	module.exports = function table(state, startLine, endLine, silent) {
	  var ch, lineText, pos, i, nextLine, rows, cell,
	      aligns, t, tableLines, tbodyLines;

	  // should have at least three lines
	  if (startLine + 2 > endLine) { return false; }

	  nextLine = startLine + 1;

	  if (state.tShift[nextLine] < state.blkIndent) { return false; }

	  // first character of the second line should be '|' or '-'

	  pos = state.bMarks[nextLine] + state.tShift[nextLine];
	  if (pos >= state.eMarks[nextLine]) { return false; }

	  ch = state.src.charCodeAt(pos);
	  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }

	  lineText = getLine(state, startLine + 1);
	  if (!/^[-:| ]+$/.test(lineText)) { return false; }

	  rows = lineText.split('|');
	  if (rows <= 2) { return false; }
	  aligns = [];
	  for (i = 0; i < rows.length; i++) {
	    t = rows[i].trim();
	    if (!t) {
	      // allow empty columns before and after table, but not in between columns;
	      // e.g. allow ` |---| `, disallow ` ---||--- `
	      if (i === 0 || i === rows.length - 1) {
	        continue;
	      } else {
	        return false;
	      }
	    }

	    if (!/^:?-+:?$/.test(t)) { return false; }
	    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {
	      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');
	    } else if (t.charCodeAt(0) === 0x3A/* : */) {
	      aligns.push('left');
	    } else {
	      aligns.push('');
	    }
	  }

	  lineText = getLine(state, startLine).trim();
	  if (lineText.indexOf('|') === -1) { return false; }
	  rows = lineText.replace(/^\||\|$/g, '').split('|');
	  if (aligns.length !== rows.length) { return false; }
	  if (silent) { return true; }

	  state.tokens.push({
	    type: 'table_open',
	    lines: tableLines = [ startLine, 0 ],
	    level: state.level++
	  });
	  state.tokens.push({
	    type: 'thead_open',
	    lines: [ startLine, startLine + 1 ],
	    level: state.level++
	  });

	  state.tokens.push({
	    type: 'tr_open',
	    lines: [ startLine, startLine + 1 ],
	    level: state.level++
	  });
	  for (i = 0; i < rows.length; i++) {
	    state.tokens.push({
	      type: 'th_open',
	      align: aligns[i],
	      lines: [ startLine, startLine + 1 ],
	      level: state.level++
	    });
	    state.tokens.push({
	      type: 'inline',
	      content: rows[i].trim(),
	      lines: [ startLine, startLine + 1 ],
	      level: state.level,
	      children: []
	    });
	    state.tokens.push({ type: 'th_close', level: --state.level });
	  }
	  state.tokens.push({ type: 'tr_close', level: --state.level });
	  state.tokens.push({ type: 'thead_close', level: --state.level });

	  state.tokens.push({
	    type: 'tbody_open',
	    lines: tbodyLines = [ startLine + 2, 0 ],
	    level: state.level++
	  });

	  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
	    if (state.tShift[nextLine] < state.blkIndent) { break; }

	    lineText = getLine(state, nextLine).trim();
	    if (lineText.indexOf('|') === -1) { break; }
	    rows = lineText.replace(/^\||\|$/g, '').split('|');

	    state.tokens.push({ type: 'tr_open', level: state.level++ });
	    for (i = 0; i < rows.length; i++) {
	      state.tokens.push({ type: 'td_open', align: aligns[i], level: state.level++ });
	      // 0x7c === '|'
	      cell = rows[i].substring(
	          rows[i].charCodeAt(0) === 0x7c ? 1 : 0,
	          rows[i].charCodeAt(rows[i].length - 1) === 0x7c ? rows[i].length - 1 : rows[i].length
	      ).trim();
	      state.tokens.push({
	        type: 'inline',
	        content: cell,
	        level: state.level,
	        children: []
	      });
	      state.tokens.push({ type: 'td_close', level: --state.level });
	    }
	    state.tokens.push({ type: 'tr_close', level: --state.level });
	  }
	  state.tokens.push({ type: 'tbody_close', level: --state.level });
	  state.tokens.push({ type: 'table_close', level: --state.level });

	  tableLines[1] = tbodyLines[1] = nextLine;
	  state.line = nextLine;
	  return true;
	};


/***/ }),
/* 279 */
/***/ (function(module, exports) {

	// Definition lists

	'use strict';


	// Search `[:~][\n ]`, returns next pos after marker on success
	// or -1 on fail.
	function skipMarker(state, line) {
	  var pos, marker,
	      start = state.bMarks[line] + state.tShift[line],
	      max = state.eMarks[line];

	  if (start >= max) { return -1; }

	  // Check bullet
	  marker = state.src.charCodeAt(start++);
	  if (marker !== 0x7E/* ~ */ && marker !== 0x3A/* : */) { return -1; }

	  pos = state.skipSpaces(start);

	  // require space after ":"
	  if (start === pos) { return -1; }

	  // no empty definitions, e.g. "  : "
	  if (pos >= max) { return -1; }

	  return pos;
	}

	function markTightParagraphs(state, idx) {
	  var i, l,
	      level = state.level + 2;

	  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
	    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
	      state.tokens[i + 2].tight = true;
	      state.tokens[i].tight = true;
	      i += 2;
	    }
	  }
	}

	module.exports = function deflist(state, startLine, endLine, silent) {
	  var contentStart,
	      ddLine,
	      dtLine,
	      itemLines,
	      listLines,
	      listTokIdx,
	      nextLine,
	      oldIndent,
	      oldDDIndent,
	      oldParentType,
	      oldTShift,
	      oldTight,
	      prevEmptyEnd,
	      tight;

	  if (silent) {
	    // quirk: validation mode validates a dd block only, not a whole deflist
	    if (state.ddIndent < 0) { return false; }
	    return skipMarker(state, startLine) >= 0;
	  }

	  nextLine = startLine + 1;
	  if (state.isEmpty(nextLine)) {
	    if (++nextLine > endLine) { return false; }
	  }

	  if (state.tShift[nextLine] < state.blkIndent) { return false; }
	  contentStart = skipMarker(state, nextLine);
	  if (contentStart < 0) { return false; }

	  if (state.level >= state.options.maxNesting) { return false; }

	  // Start list
	  listTokIdx = state.tokens.length;

	  state.tokens.push({
	    type: 'dl_open',
	    lines: listLines = [ startLine, 0 ],
	    level: state.level++
	  });

	  //
	  // Iterate list items
	  //

	  dtLine = startLine;
	  ddLine = nextLine;

	  // One definition list can contain multiple DTs,
	  // and one DT can be followed by multiple DDs.
	  //
	  // Thus, there is two loops here, and label is
	  // needed to break out of the second one
	  //
	  /*eslint no-labels:0,block-scoped-var:0*/
	  OUTER:
	  for (;;) {
	    tight = true;
	    prevEmptyEnd = false;

	    state.tokens.push({
	      type: 'dt_open',
	      lines: [ dtLine, dtLine ],
	      level: state.level++
	    });
	    state.tokens.push({
	      type: 'inline',
	      content: state.getLines(dtLine, dtLine + 1, state.blkIndent, false).trim(),
	      level: state.level + 1,
	      lines: [ dtLine, dtLine ],
	      children: []
	    });
	    state.tokens.push({
	      type: 'dt_close',
	      level: --state.level
	    });

	    for (;;) {
	      state.tokens.push({
	        type: 'dd_open',
	        lines: itemLines = [ nextLine, 0 ],
	        level: state.level++
	      });

	      oldTight = state.tight;
	      oldDDIndent = state.ddIndent;
	      oldIndent = state.blkIndent;
	      oldTShift = state.tShift[ddLine];
	      oldParentType = state.parentType;
	      state.blkIndent = state.ddIndent = state.tShift[ddLine] + 2;
	      state.tShift[ddLine] = contentStart - state.bMarks[ddLine];
	      state.tight = true;
	      state.parentType = 'deflist';

	      state.parser.tokenize(state, ddLine, endLine, true);

	      // If any of list item is tight, mark list as tight
	      if (!state.tight || prevEmptyEnd) {
	        tight = false;
	      }
	      // Item become loose if finish with empty line,
	      // but we should filter last element, because it means list finish
	      prevEmptyEnd = (state.line - ddLine) > 1 && state.isEmpty(state.line - 1);

	      state.tShift[ddLine] = oldTShift;
	      state.tight = oldTight;
	      state.parentType = oldParentType;
	      state.blkIndent = oldIndent;
	      state.ddIndent = oldDDIndent;

	      state.tokens.push({
	        type: 'dd_close',
	        level: --state.level
	      });

	      itemLines[1] = nextLine = state.line;

	      if (nextLine >= endLine) { break OUTER; }

	      if (state.tShift[nextLine] < state.blkIndent) { break OUTER; }
	      contentStart = skipMarker(state, nextLine);
	      if (contentStart < 0) { break; }

	      ddLine = nextLine;

	      // go to the next loop iteration:
	      // insert DD tag and repeat checking
	    }

	    if (nextLine >= endLine) { break; }
	    dtLine = nextLine;

	    if (state.isEmpty(dtLine)) { break; }
	    if (state.tShift[dtLine] < state.blkIndent) { break; }

	    ddLine = dtLine + 1;
	    if (ddLine >= endLine) { break; }
	    if (state.isEmpty(ddLine)) { ddLine++; }
	    if (ddLine >= endLine) { break; }

	    if (state.tShift[ddLine] < state.blkIndent) { break; }
	    contentStart = skipMarker(state, ddLine);
	    if (contentStart < 0) { break; }

	    // go to the next loop iteration:
	    // insert DT and DD tags and repeat checking
	  }

	  // Finilize list
	  state.tokens.push({
	    type: 'dl_close',
	    level: --state.level
	  });
	  listLines[1] = nextLine;

	  state.line = nextLine;

	  // mark paragraphs tight if needed
	  if (tight) {
	    markTightParagraphs(state, listTokIdx);
	  }

	  return true;
	};


/***/ }),
/* 280 */
/***/ (function(module, exports) {

	// Paragraph

	'use strict';


	module.exports = function paragraph(state, startLine/*, endLine*/) {
	  var endLine, content, terminate, i, l,
	      nextLine = startLine + 1,
	      terminatorRules;

	  endLine = state.lineMax;

	  // jump line-by-line until empty one or EOF
	  if (nextLine < endLine && !state.isEmpty(nextLine)) {
	    terminatorRules = state.parser.ruler.getRules('paragraph');

	    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
	      // this would be a code block normally, but after paragraph
	      // it's considered a lazy continuation regardless of what's there
	      if (state.tShift[nextLine] - state.blkIndent > 3) { continue; }

	      // Some tags can terminate paragraph without empty line.
	      terminate = false;
	      for (i = 0, l = terminatorRules.length; i < l; i++) {
	        if (terminatorRules[i](state, nextLine, endLine, true)) {
	          terminate = true;
	          break;
	        }
	      }
	      if (terminate) { break; }
	    }
	  }

	  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

	  state.line = nextLine;
	  if (content.length) {
	    state.tokens.push({
	      type: 'paragraph_open',
	      tight: false,
	      lines: [ startLine, state.line ],
	      level: state.level
	    });
	    state.tokens.push({
	      type: 'inline',
	      content: content,
	      level: state.level + 1,
	      lines: [ startLine, state.line ],
	      children: []
	    });
	    state.tokens.push({
	      type: 'paragraph_close',
	      tight: false,
	      level: state.level
	    });
	  }

	  return true;
	};


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Local dependencies
	 */

	var Ruler       = __webpack_require__(249);
	var StateInline = __webpack_require__(252);
	var utils       = __webpack_require__(244);

	/**
	 * Inline Parser `rules`
	 */

	var _rules = [
	  [ 'text',            __webpack_require__(282) ],
	  [ 'newline',         __webpack_require__(283) ],
	  [ 'escape',          __webpack_require__(284) ],
	  [ 'backticks',       __webpack_require__(285) ],
	  [ 'del',             __webpack_require__(286) ],
	  [ 'ins',             __webpack_require__(287) ],
	  [ 'mark',            __webpack_require__(288) ],
	  [ 'emphasis',        __webpack_require__(289) ],
	  [ 'sub',             __webpack_require__(290) ],
	  [ 'sup',             __webpack_require__(291) ],
	  [ 'links',           __webpack_require__(292) ],
	  [ 'footnote_inline', __webpack_require__(293) ],
	  [ 'footnote_ref',    __webpack_require__(294) ],
	  [ 'autolink',        __webpack_require__(295) ],
	  [ 'htmltag',         __webpack_require__(297) ],
	  [ 'entity',          __webpack_require__(299) ]
	];

	/**
	 * Inline Parser class. Note that link validation is stricter
	 * in Remarkable than what is specified by CommonMark. If you
	 * want to change this you can use a custom validator.
	 *
	 * @api private
	 */

	function ParserInline() {
	  this.ruler = new Ruler();
	  for (var i = 0; i < _rules.length; i++) {
	    this.ruler.push(_rules[i][0], _rules[i][1]);
	  }

	  // Can be overridden with a custom validator
	  this.validateLink = validateLink;
	}

	/**
	 * Skip a single token by running all rules in validation mode.
	 * Returns `true` if any rule reports success.
	 *
	 * @param  {Object} `state`
	 * @api privage
	 */

	ParserInline.prototype.skipToken = function (state) {
	  var rules = this.ruler.getRules('');
	  var len = rules.length;
	  var pos = state.pos;
	  var i, cached_pos;

	  if ((cached_pos = state.cacheGet(pos)) > 0) {
	    state.pos = cached_pos;
	    return;
	  }

	  for (i = 0; i < len; i++) {
	    if (rules[i](state, true)) {
	      state.cacheSet(pos, state.pos);
	      return;
	    }
	  }

	  state.pos++;
	  state.cacheSet(pos, state.pos);
	};

	/**
	 * Generate tokens for the given input range.
	 *
	 * @param  {Object} `state`
	 * @api private
	 */

	ParserInline.prototype.tokenize = function (state) {
	  var rules = this.ruler.getRules('');
	  var len = rules.length;
	  var end = state.posMax;
	  var ok, i;

	  while (state.pos < end) {

	    // Try all possible rules.
	    // On success, the rule should:
	    //
	    // - update `state.pos`
	    // - update `state.tokens`
	    // - return true
	    for (i = 0; i < len; i++) {
	      ok = rules[i](state, false);

	      if (ok) {
	        break;
	      }
	    }

	    if (ok) {
	      if (state.pos >= end) { break; }
	      continue;
	    }

	    state.pending += state.src[state.pos++];
	  }

	  if (state.pending) {
	    state.pushPending();
	  }
	};

	/**
	 * Parse the given input string.
	 *
	 * @param  {String} `str`
	 * @param  {Object} `options`
	 * @param  {Object} `env`
	 * @param  {Array} `outTokens`
	 * @api private
	 */

	ParserInline.prototype.parse = function (str, options, env, outTokens) {
	  var state = new StateInline(str, this, options, env, outTokens);
	  this.tokenize(state);
	};

	/**
	 * Validate the given `url` by checking for bad protocols.
	 *
	 * @param  {String} `url`
	 * @return {Boolean}
	 */

	function validateLink(url) {
	  var BAD_PROTOCOLS = [ 'vbscript', 'javascript', 'file', 'data' ];
	  var str = url.trim().toLowerCase();
	  // Care about digital entities "javascript&#x3A;alert(1)"
	  str = utils.replaceEntities(str);
	  if (str.indexOf(':') !== -1 && BAD_PROTOCOLS.indexOf(str.split(':')[0]) !== -1) {
	    return false;
	  }
	  return true;
	}

	/**
	 * Expose `ParserInline`
	 */

	module.exports = ParserInline;


/***/ }),
/* 282 */
/***/ (function(module, exports) {

	// Skip text characters for text token, place those to pending buffer
	// and increment current pos

	'use strict';

	// Rule to skip pure text
	// '{}$%@~+=:' reserved for extentions

	function isTerminatorChar(ch) {
	  switch (ch) {
	    case 0x0A/* \n */:
	    case 0x5C/* \ */:
	    case 0x60/* ` */:
	    case 0x2A/* * */:
	    case 0x5F/* _ */:
	    case 0x5E/* ^ */:
	    case 0x5B/* [ */:
	    case 0x5D/* ] */:
	    case 0x21/* ! */:
	    case 0x26/* & */:
	    case 0x3C/* < */:
	    case 0x3E/* > */:
	    case 0x7B/* { */:
	    case 0x7D/* } */:
	    case 0x24/* $ */:
	    case 0x25/* % */:
	    case 0x40/* @ */:
	    case 0x7E/* ~ */:
	    case 0x2B/* + */:
	    case 0x3D/* = */:
	    case 0x3A/* : */:
	      return true;
	    default:
	      return false;
	  }
	}

	module.exports = function text(state, silent) {
	  var pos = state.pos;

	  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
	    pos++;
	  }

	  if (pos === state.pos) { return false; }

	  if (!silent) { state.pending += state.src.slice(state.pos, pos); }

	  state.pos = pos;

	  return true;
	};


/***/ }),
/* 283 */
/***/ (function(module, exports) {

	// Proceess '\n'

	'use strict';

	module.exports = function newline(state, silent) {
	  var pmax, max, pos = state.pos;

	  if (state.src.charCodeAt(pos) !== 0x0A/* \n */) { return false; }

	  pmax = state.pending.length - 1;
	  max = state.posMax;

	  // '  \n' -> hardbreak
	  // Lookup in pending chars is bad practice! Don't copy to other rules!
	  // Pending string is stored in concat mode, indexed lookups will cause
	  // convertion to flat mode.
	  if (!silent) {
	    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
	      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
	        // Strip out all trailing spaces on this line.
	        for (var i = pmax - 2; i >= 0; i--) {
	          if (state.pending.charCodeAt(i) !== 0x20) {
	            state.pending = state.pending.substring(0, i + 1);
	            break;
	          }
	        }
	        state.push({
	          type: 'hardbreak',
	          level: state.level
	        });
	      } else {
	        state.pending = state.pending.slice(0, -1);
	        state.push({
	          type: 'softbreak',
	          level: state.level
	        });
	      }

	    } else {
	      state.push({
	        type: 'softbreak',
	        level: state.level
	      });
	    }
	  }

	  pos++;

	  // skip heading spaces for next line
	  while (pos < max && state.src.charCodeAt(pos) === 0x20) { pos++; }

	  state.pos = pos;
	  return true;
	};


/***/ }),
/* 284 */
/***/ (function(module, exports) {

	// Proceess escaped chars and hardbreaks

	'use strict';

	var ESCAPED = [];

	for (var i = 0; i < 256; i++) { ESCAPED.push(0); }

	'\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'
	  .split('').forEach(function(ch) { ESCAPED[ch.charCodeAt(0)] = 1; });


	module.exports = function escape(state, silent) {
	  var ch, pos = state.pos, max = state.posMax;

	  if (state.src.charCodeAt(pos) !== 0x5C/* \ */) { return false; }

	  pos++;

	  if (pos < max) {
	    ch = state.src.charCodeAt(pos);

	    if (ch < 256 && ESCAPED[ch] !== 0) {
	      if (!silent) { state.pending += state.src[pos]; }
	      state.pos += 2;
	      return true;
	    }

	    if (ch === 0x0A) {
	      if (!silent) {
	        state.push({
	          type: 'hardbreak',
	          level: state.level
	        });
	      }

	      pos++;
	      // skip leading whitespaces from next line
	      while (pos < max && state.src.charCodeAt(pos) === 0x20) { pos++; }

	      state.pos = pos;
	      return true;
	    }
	  }

	  if (!silent) { state.pending += '\\'; }
	  state.pos++;
	  return true;
	};


/***/ }),
/* 285 */
/***/ (function(module, exports) {

	// Parse backticks

	'use strict';

	module.exports = function backticks(state, silent) {
	  var start, max, marker, matchStart, matchEnd,
	      pos = state.pos,
	      ch = state.src.charCodeAt(pos);

	  if (ch !== 0x60/* ` */) { return false; }

	  start = pos;
	  pos++;
	  max = state.posMax;

	  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }

	  marker = state.src.slice(start, pos);

	  matchStart = matchEnd = pos;

	  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
	    matchEnd = matchStart + 1;

	    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }

	    if (matchEnd - matchStart === marker.length) {
	      if (!silent) {
	        state.push({
	          type: 'code',
	          content: state.src.slice(pos, matchStart)
	                              .replace(/[ \n]+/g, ' ')
	                              .trim(),
	          block: false,
	          level: state.level
	        });
	      }
	      state.pos = matchEnd;
	      return true;
	    }
	  }

	  if (!silent) { state.pending += marker; }
	  state.pos += marker.length;
	  return true;
	};


/***/ }),
/* 286 */
/***/ (function(module, exports) {

	// Process ~~deleted text~~

	'use strict';

	module.exports = function del(state, silent) {
	  var found,
	      pos,
	      stack,
	      max = state.posMax,
	      start = state.pos,
	      lastChar,
	      nextChar;

	  if (state.src.charCodeAt(start) !== 0x7E/* ~ */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 4 >= max) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x7E/* ~ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;
	  nextChar = state.src.charCodeAt(start + 2);

	  if (lastChar === 0x7E/* ~ */) { return false; }
	  if (nextChar === 0x7E/* ~ */) { return false; }
	  if (nextChar === 0x20 || nextChar === 0x0A) { return false; }

	  pos = start + 2;
	  while (pos < max && state.src.charCodeAt(pos) === 0x7E/* ~ */) { pos++; }
	  if (pos > start + 3) {
	    // sequence of 4+ markers taking as literal, same as in a emphasis
	    state.pos += pos - start;
	    if (!silent) { state.pending += state.src.slice(start, pos); }
	    return true;
	  }

	  state.pos = start + 2;
	  stack = 1;

	  while (state.pos + 1 < max) {
	    if (state.src.charCodeAt(state.pos) === 0x7E/* ~ */) {
	      if (state.src.charCodeAt(state.pos + 1) === 0x7E/* ~ */) {
	        lastChar = state.src.charCodeAt(state.pos - 1);
	        nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;
	        if (nextChar !== 0x7E/* ~ */ && lastChar !== 0x7E/* ~ */) {
	          if (lastChar !== 0x20 && lastChar !== 0x0A) {
	            // closing '~~'
	            stack--;
	          } else if (nextChar !== 0x20 && nextChar !== 0x0A) {
	            // opening '~~'
	            stack++;
	          } // else {
	            //  // standalone ' ~~ ' indented with spaces
	            // }
	          if (stack <= 0) {
	            found = true;
	            break;
	          }
	        }
	      }
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found) {
	    // parser failed to find ending tag, so it's not valid emphasis
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 2;

	  if (!silent) {
	    state.push({ type: 'del_open', level: state.level++ });
	    state.parser.tokenize(state);
	    state.push({ type: 'del_close', level: --state.level });
	  }

	  state.pos = state.posMax + 2;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 287 */
/***/ (function(module, exports) {

	// Process ++inserted text++

	'use strict';

	module.exports = function ins(state, silent) {
	  var found,
	      pos,
	      stack,
	      max = state.posMax,
	      start = state.pos,
	      lastChar,
	      nextChar;

	  if (state.src.charCodeAt(start) !== 0x2B/* + */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 4 >= max) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x2B/* + */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;
	  nextChar = state.src.charCodeAt(start + 2);

	  if (lastChar === 0x2B/* + */) { return false; }
	  if (nextChar === 0x2B/* + */) { return false; }
	  if (nextChar === 0x20 || nextChar === 0x0A) { return false; }

	  pos = start + 2;
	  while (pos < max && state.src.charCodeAt(pos) === 0x2B/* + */) { pos++; }
	  if (pos !== start + 2) {
	    // sequence of 3+ markers taking as literal, same as in a emphasis
	    state.pos += pos - start;
	    if (!silent) { state.pending += state.src.slice(start, pos); }
	    return true;
	  }

	  state.pos = start + 2;
	  stack = 1;

	  while (state.pos + 1 < max) {
	    if (state.src.charCodeAt(state.pos) === 0x2B/* + */) {
	      if (state.src.charCodeAt(state.pos + 1) === 0x2B/* + */) {
	        lastChar = state.src.charCodeAt(state.pos - 1);
	        nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;
	        if (nextChar !== 0x2B/* + */ && lastChar !== 0x2B/* + */) {
	          if (lastChar !== 0x20 && lastChar !== 0x0A) {
	            // closing '++'
	            stack--;
	          } else if (nextChar !== 0x20 && nextChar !== 0x0A) {
	            // opening '++'
	            stack++;
	          } // else {
	            //  // standalone ' ++ ' indented with spaces
	            // }
	          if (stack <= 0) {
	            found = true;
	            break;
	          }
	        }
	      }
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found) {
	    // parser failed to find ending tag, so it's not valid emphasis
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 2;

	  if (!silent) {
	    state.push({ type: 'ins_open', level: state.level++ });
	    state.parser.tokenize(state);
	    state.push({ type: 'ins_close', level: --state.level });
	  }

	  state.pos = state.posMax + 2;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 288 */
/***/ (function(module, exports) {

	// Process ==highlighted text==

	'use strict';

	module.exports = function del(state, silent) {
	  var found,
	      pos,
	      stack,
	      max = state.posMax,
	      start = state.pos,
	      lastChar,
	      nextChar;

	  if (state.src.charCodeAt(start) !== 0x3D/* = */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 4 >= max) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x3D/* = */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;
	  nextChar = state.src.charCodeAt(start + 2);

	  if (lastChar === 0x3D/* = */) { return false; }
	  if (nextChar === 0x3D/* = */) { return false; }
	  if (nextChar === 0x20 || nextChar === 0x0A) { return false; }

	  pos = start + 2;
	  while (pos < max && state.src.charCodeAt(pos) === 0x3D/* = */) { pos++; }
	  if (pos !== start + 2) {
	    // sequence of 3+ markers taking as literal, same as in a emphasis
	    state.pos += pos - start;
	    if (!silent) { state.pending += state.src.slice(start, pos); }
	    return true;
	  }

	  state.pos = start + 2;
	  stack = 1;

	  while (state.pos + 1 < max) {
	    if (state.src.charCodeAt(state.pos) === 0x3D/* = */) {
	      if (state.src.charCodeAt(state.pos + 1) === 0x3D/* = */) {
	        lastChar = state.src.charCodeAt(state.pos - 1);
	        nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;
	        if (nextChar !== 0x3D/* = */ && lastChar !== 0x3D/* = */) {
	          if (lastChar !== 0x20 && lastChar !== 0x0A) {
	            // closing '=='
	            stack--;
	          } else if (nextChar !== 0x20 && nextChar !== 0x0A) {
	            // opening '=='
	            stack++;
	          } // else {
	            //  // standalone ' == ' indented with spaces
	            // }
	          if (stack <= 0) {
	            found = true;
	            break;
	          }
	        }
	      }
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found) {
	    // parser failed to find ending tag, so it's not valid emphasis
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 2;

	  if (!silent) {
	    state.push({ type: 'mark_open', level: state.level++ });
	    state.parser.tokenize(state);
	    state.push({ type: 'mark_close', level: --state.level });
	  }

	  state.pos = state.posMax + 2;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 289 */
/***/ (function(module, exports) {

	// Process *this* and _that_

	'use strict';


	function isAlphaNum(code) {
	  return (code >= 0x30 /* 0 */ && code <= 0x39 /* 9 */) ||
	         (code >= 0x41 /* A */ && code <= 0x5A /* Z */) ||
	         (code >= 0x61 /* a */ && code <= 0x7A /* z */);
	}

	// parse sequence of emphasis markers,
	// "start" should point at a valid marker
	function scanDelims(state, start) {
	  var pos = start, lastChar, nextChar, count,
	      can_open = true,
	      can_close = true,
	      max = state.posMax,
	      marker = state.src.charCodeAt(start);

	  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;

	  while (pos < max && state.src.charCodeAt(pos) === marker) { pos++; }
	  if (pos >= max) { can_open = false; }
	  count = pos - start;

	  if (count >= 4) {
	    // sequence of four or more unescaped markers can't start/end an emphasis
	    can_open = can_close = false;
	  } else {
	    nextChar = pos < max ? state.src.charCodeAt(pos) : -1;

	    // check whitespace conditions
	    if (nextChar === 0x20 || nextChar === 0x0A) { can_open = false; }
	    if (lastChar === 0x20 || lastChar === 0x0A) { can_close = false; }

	    if (marker === 0x5F /* _ */) {
	      // check if we aren't inside the word
	      if (isAlphaNum(lastChar)) { can_open = false; }
	      if (isAlphaNum(nextChar)) { can_close = false; }
	    }
	  }

	  return {
	    can_open: can_open,
	    can_close: can_close,
	    delims: count
	  };
	}

	module.exports = function emphasis(state, silent) {
	  var startCount,
	      count,
	      found,
	      oldCount,
	      newCount,
	      stack,
	      res,
	      max = state.posMax,
	      start = state.pos,
	      marker = state.src.charCodeAt(start);

	  if (marker !== 0x5F/* _ */ && marker !== 0x2A /* * */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode

	  res = scanDelims(state, start);
	  startCount = res.delims;
	  if (!res.can_open) {
	    state.pos += startCount;
	    if (!silent) { state.pending += state.src.slice(start, state.pos); }
	    return true;
	  }

	  if (state.level >= state.options.maxNesting) { return false; }

	  state.pos = start + startCount;
	  stack = [ startCount ];

	  while (state.pos < max) {
	    if (state.src.charCodeAt(state.pos) === marker) {
	      res = scanDelims(state, state.pos);
	      count = res.delims;
	      if (res.can_close) {
	        oldCount = stack.pop();
	        newCount = count;

	        while (oldCount !== newCount) {
	          if (newCount < oldCount) {
	            stack.push(oldCount - newCount);
	            break;
	          }

	          // assert(newCount > oldCount)
	          newCount -= oldCount;

	          if (stack.length === 0) { break; }
	          state.pos += oldCount;
	          oldCount = stack.pop();
	        }

	        if (stack.length === 0) {
	          startCount = oldCount;
	          found = true;
	          break;
	        }
	        state.pos += count;
	        continue;
	      }

	      if (res.can_open) { stack.push(count); }
	      state.pos += count;
	      continue;
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found) {
	    // parser failed to find ending tag, so it's not valid emphasis
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + startCount;

	  if (!silent) {
	    if (startCount === 2 || startCount === 3) {
	      state.push({ type: 'strong_open', level: state.level++ });
	    }
	    if (startCount === 1 || startCount === 3) {
	      state.push({ type: 'em_open', level: state.level++ });
	    }

	    state.parser.tokenize(state);

	    if (startCount === 1 || startCount === 3) {
	      state.push({ type: 'em_close', level: --state.level });
	    }
	    if (startCount === 2 || startCount === 3) {
	      state.push({ type: 'strong_close', level: --state.level });
	    }
	  }

	  state.pos = state.posMax + startCount;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 290 */
/***/ (function(module, exports) {

	// Process ~subscript~

	'use strict';

	// same as UNESCAPE_MD_RE plus a space
	var UNESCAPE_RE = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;

	module.exports = function sub(state, silent) {
	  var found,
	      content,
	      max = state.posMax,
	      start = state.pos;

	  if (state.src.charCodeAt(start) !== 0x7E/* ~ */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 2 >= max) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  state.pos = start + 1;

	  while (state.pos < max) {
	    if (state.src.charCodeAt(state.pos) === 0x7E/* ~ */) {
	      found = true;
	      break;
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found || start + 1 === state.pos) {
	    state.pos = start;
	    return false;
	  }

	  content = state.src.slice(start + 1, state.pos);

	  // don't allow unescaped spaces/newlines inside
	  if (content.match(/(^|[^\\])(\\\\)*\s/)) {
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 1;

	  if (!silent) {
	    state.push({
	      type: 'sub',
	      level: state.level,
	      content: content.replace(UNESCAPE_RE, '$1')
	    });
	  }

	  state.pos = state.posMax + 1;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 291 */
/***/ (function(module, exports) {

	// Process ^superscript^

	'use strict';

	// same as UNESCAPE_MD_RE plus a space
	var UNESCAPE_RE = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;

	module.exports = function sup(state, silent) {
	  var found,
	      content,
	      max = state.posMax,
	      start = state.pos;

	  if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 2 >= max) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  state.pos = start + 1;

	  while (state.pos < max) {
	    if (state.src.charCodeAt(state.pos) === 0x5E/* ^ */) {
	      found = true;
	      break;
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found || start + 1 === state.pos) {
	    state.pos = start;
	    return false;
	  }

	  content = state.src.slice(start + 1, state.pos);

	  // don't allow unescaped spaces/newlines inside
	  if (content.match(/(^|[^\\])(\\\\)*\s/)) {
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 1;

	  if (!silent) {
	    state.push({
	      type: 'sup',
	      level: state.level,
	      content: content.replace(UNESCAPE_RE, '$1')
	    });
	  }

	  state.pos = state.posMax + 1;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	// Process [links](<to> "stuff")

	'use strict';

	var parseLinkLabel       = __webpack_require__(253);
	var parseLinkDestination = __webpack_require__(255);
	var parseLinkTitle       = __webpack_require__(257);
	var normalizeReference   = __webpack_require__(258);


	module.exports = function links(state, silent) {
	  var labelStart,
	      labelEnd,
	      label,
	      href,
	      title,
	      pos,
	      ref,
	      code,
	      isImage = false,
	      oldPos = state.pos,
	      max = state.posMax,
	      start = state.pos,
	      marker = state.src.charCodeAt(start);

	  if (marker === 0x21/* ! */) {
	    isImage = true;
	    marker = state.src.charCodeAt(++start);
	  }

	  if (marker !== 0x5B/* [ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  labelStart = start + 1;
	  labelEnd = parseLinkLabel(state, start);

	  // parser failed to find ']', so it's not a valid link
	  if (labelEnd < 0) { return false; }

	  pos = labelEnd + 1;
	  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
	    //
	    // Inline link
	    //

	    // [link](  <href>  "title"  )
	    //        ^^ skipping these spaces
	    pos++;
	    for (; pos < max; pos++) {
	      code = state.src.charCodeAt(pos);
	      if (code !== 0x20 && code !== 0x0A) { break; }
	    }
	    if (pos >= max) { return false; }

	    // [link](  <href>  "title"  )
	    //          ^^^^^^ parsing link destination
	    start = pos;
	    if (parseLinkDestination(state, pos)) {
	      href = state.linkContent;
	      pos = state.pos;
	    } else {
	      href = '';
	    }

	    // [link](  <href>  "title"  )
	    //                ^^ skipping these spaces
	    start = pos;
	    for (; pos < max; pos++) {
	      code = state.src.charCodeAt(pos);
	      if (code !== 0x20 && code !== 0x0A) { break; }
	    }

	    // [link](  <href>  "title"  )
	    //                  ^^^^^^^ parsing link title
	    if (pos < max && start !== pos && parseLinkTitle(state, pos)) {
	      title = state.linkContent;
	      pos = state.pos;

	      // [link](  <href>  "title"  )
	      //                         ^^ skipping these spaces
	      for (; pos < max; pos++) {
	        code = state.src.charCodeAt(pos);
	        if (code !== 0x20 && code !== 0x0A) { break; }
	      }
	    } else {
	      title = '';
	    }

	    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
	      state.pos = oldPos;
	      return false;
	    }
	    pos++;
	  } else {
	    //
	    // Link reference
	    //

	    // do not allow nested reference links
	    if (state.linkLevel > 0) { return false; }

	    // [foo]  [bar]
	    //      ^^ optional whitespace (can include newlines)
	    for (; pos < max; pos++) {
	      code = state.src.charCodeAt(pos);
	      if (code !== 0x20 && code !== 0x0A) { break; }
	    }

	    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
	      start = pos + 1;
	      pos = parseLinkLabel(state, pos);
	      if (pos >= 0) {
	        label = state.src.slice(start, pos++);
	      } else {
	        pos = start - 1;
	      }
	    }

	    // covers label === '' and label === undefined
	    // (collapsed reference link and shortcut reference link respectively)
	    if (!label) {
	      if (typeof label === 'undefined') {
	        pos = labelEnd + 1;
	      }
	      label = state.src.slice(labelStart, labelEnd);
	    }

	    ref = state.env.references[normalizeReference(label)];
	    if (!ref) {
	      state.pos = oldPos;
	      return false;
	    }
	    href = ref.href;
	    title = ref.title;
	  }

	  //
	  // We found the end of the link, and know for a fact it's a valid link;
	  // so all that's left to do is to call tokenizer.
	  //
	  if (!silent) {
	    state.pos = labelStart;
	    state.posMax = labelEnd;

	    if (isImage) {
	      state.push({
	        type: 'image',
	        src: href,
	        title: title,
	        alt: state.src.substr(labelStart, labelEnd - labelStart),
	        level: state.level
	      });
	    } else {
	      state.push({
	        type: 'link_open',
	        href: href,
	        title: title,
	        level: state.level++
	      });
	      state.linkLevel++;
	      state.parser.tokenize(state);
	      state.linkLevel--;
	      state.push({ type: 'link_close', level: --state.level });
	    }
	  }

	  state.pos = pos;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	// Process inline footnotes (^[...])

	'use strict';

	var parseLinkLabel = __webpack_require__(253);


	module.exports = function footnote_inline(state, silent) {
	  var labelStart,
	      labelEnd,
	      footnoteId,
	      oldLength,
	      max = state.posMax,
	      start = state.pos;

	  if (start + 2 >= max) { return false; }
	  if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x5B/* [ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  labelStart = start + 2;
	  labelEnd = parseLinkLabel(state, start + 1);

	  // parser failed to find ']', so it's not a valid note
	  if (labelEnd < 0) { return false; }

	  // We found the end of the link, and know for a fact it's a valid link;
	  // so all that's left to do is to call tokenizer.
	  //
	  if (!silent) {
	    if (!state.env.footnotes) { state.env.footnotes = {}; }
	    if (!state.env.footnotes.list) { state.env.footnotes.list = []; }
	    footnoteId = state.env.footnotes.list.length;

	    state.pos = labelStart;
	    state.posMax = labelEnd;

	    state.push({
	      type: 'footnote_ref',
	      id: footnoteId,
	      level: state.level
	    });
	    state.linkLevel++;
	    oldLength = state.tokens.length;
	    state.parser.tokenize(state);
	    state.env.footnotes.list[footnoteId] = { tokens: state.tokens.splice(oldLength) };
	    state.linkLevel--;
	  }

	  state.pos = labelEnd + 1;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 294 */
/***/ (function(module, exports) {

	// Process footnote references ([^...])

	'use strict';


	module.exports = function footnote_ref(state, silent) {
	  var label,
	      pos,
	      footnoteId,
	      footnoteSubId,
	      max = state.posMax,
	      start = state.pos;

	  // should be at least 4 chars - "[^x]"
	  if (start + 3 > max) { return false; }

	  if (!state.env.footnotes || !state.env.footnotes.refs) { return false; }
	  if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  for (pos = start + 2; pos < max; pos++) {
	    if (state.src.charCodeAt(pos) === 0x20) { return false; }
	    if (state.src.charCodeAt(pos) === 0x0A) { return false; }
	    if (state.src.charCodeAt(pos) === 0x5D /* ] */) {
	      break;
	    }
	  }

	  if (pos === start + 2) { return false; } // no empty footnote labels
	  if (pos >= max) { return false; }
	  pos++;

	  label = state.src.slice(start + 2, pos - 1);
	  if (typeof state.env.footnotes.refs[':' + label] === 'undefined') { return false; }

	  if (!silent) {
	    if (!state.env.footnotes.list) { state.env.footnotes.list = []; }

	    if (state.env.footnotes.refs[':' + label] < 0) {
	      footnoteId = state.env.footnotes.list.length;
	      state.env.footnotes.list[footnoteId] = { label: label, count: 0 };
	      state.env.footnotes.refs[':' + label] = footnoteId;
	    } else {
	      footnoteId = state.env.footnotes.refs[':' + label];
	    }

	    footnoteSubId = state.env.footnotes.list[footnoteId].count;
	    state.env.footnotes.list[footnoteId].count++;

	    state.push({
	      type: 'footnote_ref',
	      id: footnoteId,
	      subId: footnoteSubId,
	      level: state.level
	    });
	  }

	  state.pos = pos;
	  state.posMax = max;
	  return true;
	};


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	// Process autolinks '<protocol:...>'

	'use strict';

	var url_schemas   = __webpack_require__(296);
	var normalizeLink = __webpack_require__(256);


	/*eslint max-len:0*/
	var EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
	var AUTOLINK_RE = /^<([a-zA-Z.\-]{1,25}):([^<>\x00-\x20]*)>/;


	module.exports = function autolink(state, silent) {
	  var tail, linkMatch, emailMatch, url, fullUrl, pos = state.pos;

	  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

	  tail = state.src.slice(pos);

	  if (tail.indexOf('>') < 0) { return false; }

	  linkMatch = tail.match(AUTOLINK_RE);

	  if (linkMatch) {
	    if (url_schemas.indexOf(linkMatch[1].toLowerCase()) < 0) { return false; }

	    url = linkMatch[0].slice(1, -1);
	    fullUrl = normalizeLink(url);
	    if (!state.parser.validateLink(url)) { return false; }

	    if (!silent) {
	      state.push({
	        type: 'link_open',
	        href: fullUrl,
	        level: state.level
	      });
	      state.push({
	        type: 'text',
	        content: url,
	        level: state.level + 1
	      });
	      state.push({ type: 'link_close', level: state.level });
	    }

	    state.pos += linkMatch[0].length;
	    return true;
	  }

	  emailMatch = tail.match(EMAIL_RE);

	  if (emailMatch) {

	    url = emailMatch[0].slice(1, -1);

	    fullUrl = normalizeLink('mailto:' + url);
	    if (!state.parser.validateLink(fullUrl)) { return false; }

	    if (!silent) {
	      state.push({
	        type: 'link_open',
	        href: fullUrl,
	        level: state.level
	      });
	      state.push({
	        type: 'text',
	        content: url,
	        level: state.level + 1
	      });
	      state.push({ type: 'link_close', level: state.level });
	    }

	    state.pos += emailMatch[0].length;
	    return true;
	  }

	  return false;
	};


/***/ }),
/* 296 */
/***/ (function(module, exports) {

	// List of valid url schemas, accorting to commonmark spec
	// http://jgm.github.io/CommonMark/spec.html#autolinks

	'use strict';


	module.exports = [
	  'coap',
	  'doi',
	  'javascript',
	  'aaa',
	  'aaas',
	  'about',
	  'acap',
	  'cap',
	  'cid',
	  'crid',
	  'data',
	  'dav',
	  'dict',
	  'dns',
	  'file',
	  'ftp',
	  'geo',
	  'go',
	  'gopher',
	  'h323',
	  'http',
	  'https',
	  'iax',
	  'icap',
	  'im',
	  'imap',
	  'info',
	  'ipp',
	  'iris',
	  'iris.beep',
	  'iris.xpc',
	  'iris.xpcs',
	  'iris.lwz',
	  'ldap',
	  'mailto',
	  'mid',
	  'msrp',
	  'msrps',
	  'mtqp',
	  'mupdate',
	  'news',
	  'nfs',
	  'ni',
	  'nih',
	  'nntp',
	  'opaquelocktoken',
	  'pop',
	  'pres',
	  'rtsp',
	  'service',
	  'session',
	  'shttp',
	  'sieve',
	  'sip',
	  'sips',
	  'sms',
	  'snmp',
	  'soap.beep',
	  'soap.beeps',
	  'tag',
	  'tel',
	  'telnet',
	  'tftp',
	  'thismessage',
	  'tn3270',
	  'tip',
	  'tv',
	  'urn',
	  'vemmi',
	  'ws',
	  'wss',
	  'xcon',
	  'xcon-userid',
	  'xmlrpc.beep',
	  'xmlrpc.beeps',
	  'xmpp',
	  'z39.50r',
	  'z39.50s',
	  'adiumxtra',
	  'afp',
	  'afs',
	  'aim',
	  'apt',
	  'attachment',
	  'aw',
	  'beshare',
	  'bitcoin',
	  'bolo',
	  'callto',
	  'chrome',
	  'chrome-extension',
	  'com-eventbrite-attendee',
	  'content',
	  'cvs',
	  'dlna-playsingle',
	  'dlna-playcontainer',
	  'dtn',
	  'dvb',
	  'ed2k',
	  'facetime',
	  'feed',
	  'finger',
	  'fish',
	  'gg',
	  'git',
	  'gizmoproject',
	  'gtalk',
	  'hcp',
	  'icon',
	  'ipn',
	  'irc',
	  'irc6',
	  'ircs',
	  'itms',
	  'jar',
	  'jms',
	  'keyparc',
	  'lastfm',
	  'ldaps',
	  'magnet',
	  'maps',
	  'market',
	  'message',
	  'mms',
	  'ms-help',
	  'msnim',
	  'mumble',
	  'mvn',
	  'notes',
	  'oid',
	  'palm',
	  'paparazzi',
	  'platform',
	  'proxy',
	  'psyc',
	  'query',
	  'res',
	  'resource',
	  'rmi',
	  'rsync',
	  'rtmp',
	  'secondlife',
	  'sftp',
	  'sgn',
	  'skype',
	  'smb',
	  'soldat',
	  'spotify',
	  'ssh',
	  'steam',
	  'svn',
	  'teamspeak',
	  'things',
	  'udp',
	  'unreal',
	  'ut2004',
	  'ventrilo',
	  'view-source',
	  'webcal',
	  'wtai',
	  'wyciwyg',
	  'xfire',
	  'xri',
	  'ymsgr'
	];


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	// Process html tags

	'use strict';


	var HTML_TAG_RE = __webpack_require__(298).HTML_TAG_RE;


	function isLetter(ch) {
	  /*eslint no-bitwise:0*/
	  var lc = ch | 0x20; // to lower case
	  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);
	}


	module.exports = function htmltag(state, silent) {
	  var ch, match, max, pos = state.pos;

	  if (!state.options.html) { return false; }

	  // Check start
	  max = state.posMax;
	  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||
	      pos + 2 >= max) {
	    return false;
	  }

	  // Quick fail on second char
	  ch = state.src.charCodeAt(pos + 1);
	  if (ch !== 0x21/* ! */ &&
	      ch !== 0x3F/* ? */ &&
	      ch !== 0x2F/* / */ &&
	      !isLetter(ch)) {
	    return false;
	  }

	  match = state.src.slice(pos).match(HTML_TAG_RE);
	  if (!match) { return false; }

	  if (!silent) {
	    state.push({
	      type: 'htmltag',
	      content: state.src.slice(pos, pos + match[0].length),
	      level: state.level
	    });
	  }
	  state.pos += match[0].length;
	  return true;
	};


/***/ }),
/* 298 */
/***/ (function(module, exports) {

	// Regexps to match html elements

	'use strict';


	function replace(regex, options) {
	  regex = regex.source;
	  options = options || '';

	  return function self(name, val) {
	    if (!name) {
	      return new RegExp(regex, options);
	    }
	    val = val.source || val;
	    regex = regex.replace(name, val);
	    return self;
	  };
	}


	var attr_name     = /[a-zA-Z_:][a-zA-Z0-9:._-]*/;

	var unquoted      = /[^"'=<>`\x00-\x20]+/;
	var single_quoted = /'[^']*'/;
	var double_quoted = /"[^"]*"/;

	/*eslint no-spaced-func:0*/
	var attr_value  = replace(/(?:unquoted|single_quoted|double_quoted)/)
	                    ('unquoted', unquoted)
	                    ('single_quoted', single_quoted)
	                    ('double_quoted', double_quoted)
	                    ();

	var attribute   = replace(/(?:\s+attr_name(?:\s*=\s*attr_value)?)/)
	                    ('attr_name', attr_name)
	                    ('attr_value', attr_value)
	                    ();

	var open_tag    = replace(/<[A-Za-z][A-Za-z0-9]*attribute*\s*\/?>/)
	                    ('attribute', attribute)
	                    ();

	var close_tag   = /<\/[A-Za-z][A-Za-z0-9]*\s*>/;
	var comment     = /<!--([^-]+|[-][^-]+)*-->/;
	var processing  = /<[?].*?[?]>/;
	var declaration = /<![A-Z]+\s+[^>]*>/;
	var cdata       = /<!\[CDATA\[([^\]]+|\][^\]]|\]\][^>])*\]\]>/;

	var HTML_TAG_RE = replace(/^(?:open_tag|close_tag|comment|processing|declaration|cdata)/)
	  ('open_tag', open_tag)
	  ('close_tag', close_tag)
	  ('comment', comment)
	  ('processing', processing)
	  ('declaration', declaration)
	  ('cdata', cdata)
	  ();


	module.exports.HTML_TAG_RE = HTML_TAG_RE;


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	// Process html entity - &#123;, &#xAF;, &quot;, ...

	'use strict';

	var entities          = __webpack_require__(245);
	var has               = __webpack_require__(244).has;
	var isValidEntityCode = __webpack_require__(244).isValidEntityCode;
	var fromCodePoint     = __webpack_require__(244).fromCodePoint;


	var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;
	var NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;


	module.exports = function entity(state, silent) {
	  var ch, code, match, pos = state.pos, max = state.posMax;

	  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }

	  if (pos + 1 < max) {
	    ch = state.src.charCodeAt(pos + 1);

	    if (ch === 0x23 /* # */) {
	      match = state.src.slice(pos).match(DIGITAL_RE);
	      if (match) {
	        if (!silent) {
	          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
	          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);
	        }
	        state.pos += match[0].length;
	        return true;
	      }
	    } else {
	      match = state.src.slice(pos).match(NAMED_RE);
	      if (match) {
	        if (has(entities, match[1])) {
	          if (!silent) { state.pending += entities[match[1]]; }
	          state.pos += match[0].length;
	          return true;
	        }
	      }
	    }
	  }

	  if (!silent) { state.pending += '&'; }
	  state.pos++;
	  return true;
	};


/***/ }),
/* 300 */
/***/ (function(module, exports) {

	// Remarkable default options

	'use strict';


	module.exports = {
	  options: {
	    html:         false,        // Enable HTML tags in source
	    xhtmlOut:     false,        // Use '/' to close single tags (<br />)
	    breaks:       false,        // Convert '\n' in paragraphs into <br>
	    langPrefix:   'language-',  // CSS language prefix for fenced blocks
	    linkify:      false,        // autoconvert URL-like texts to links
	    linkTarget:   '',           // set target to open link in

	    // Enable some language-neutral replacements + quotes beautification
	    typographer:  false,

	    // Double + single quotes replacement pairs, when typographer enabled,
	    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
	    quotes: '“”‘’',

	    // Highlighter function. Should return escaped HTML,
	    // or '' if input not changed
	    //
	    // function (/*str, lang*/) { return ''; }
	    //
	    highlight: null,

	    maxNesting:   20            // Internal protection, recursion limit
	  },

	  components: {

	    core: {
	      rules: [
	        'block',
	        'inline',
	        'references',
	        'replacements',
	        'linkify',
	        'smartquotes',
	        'references',
	        'abbr2',
	        'footnote_tail'
	      ]
	    },

	    block: {
	      rules: [
	        'blockquote',
	        'code',
	        'fences',
	        'footnote',
	        'heading',
	        'hr',
	        'htmlblock',
	        'lheading',
	        'list',
	        'paragraph',
	        'table'
	      ]
	    },

	    inline: {
	      rules: [
	        'autolink',
	        'backticks',
	        'del',
	        'emphasis',
	        'entity',
	        'escape',
	        'footnote_ref',
	        'htmltag',
	        'links',
	        'newline',
	        'text'
	      ]
	    }
	  }
	};


/***/ }),
/* 301 */
/***/ (function(module, exports) {

	// Remarkable default options

	'use strict';


	module.exports = {
	  options: {
	    html:         false,        // Enable HTML tags in source
	    xhtmlOut:     false,        // Use '/' to close single tags (<br />)
	    breaks:       false,        // Convert '\n' in paragraphs into <br>
	    langPrefix:   'language-',  // CSS language prefix for fenced blocks
	    linkify:      false,        // autoconvert URL-like texts to links
	    linkTarget:   '',           // set target to open link in

	    // Enable some language-neutral replacements + quotes beautification
	    typographer:  false,

	    // Double + single quotes replacement pairs, when typographer enabled,
	    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
	    quotes:       '“”‘’',

	    // Highlighter function. Should return escaped HTML,
	    // or '' if input not changed
	    //
	    // function (/*str, lang*/) { return ''; }
	    //
	    highlight:     null,

	    maxNesting:    20            // Internal protection, recursion limit
	  },

	  components: {
	    // Don't restrict core/block/inline rules
	    core: {},
	    block: {},
	    inline: {}
	  }
	};


/***/ }),
/* 302 */
/***/ (function(module, exports) {

	// Commonmark default options

	'use strict';


	module.exports = {
	  options: {
	    html:         true,         // Enable HTML tags in source
	    xhtmlOut:     true,         // Use '/' to close single tags (<br />)
	    breaks:       false,        // Convert '\n' in paragraphs into <br>
	    langPrefix:   'language-',  // CSS language prefix for fenced blocks
	    linkify:      false,        // autoconvert URL-like texts to links
	    linkTarget:   '',           // set target to open link in

	    // Enable some language-neutral replacements + quotes beautification
	    typographer:  false,

	    // Double + single quotes replacement pairs, when typographer enabled,
	    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
	    quotes: '“”‘’',

	    // Highlighter function. Should return escaped HTML,
	    // or '' if input not changed
	    //
	    // function (/*str, lang*/) { return ''; }
	    //
	    highlight: null,

	    maxNesting:   20            // Internal protection, recursion limit
	  },

	  components: {

	    core: {
	      rules: [
	        'block',
	        'inline',
	        'references',
	        'abbr2'
	      ]
	    },

	    block: {
	      rules: [
	        'blockquote',
	        'code',
	        'fences',
	        'heading',
	        'hr',
	        'htmlblock',
	        'lheading',
	        'list',
	        'paragraph'
	      ]
	    },

	    inline: {
	      rules: [
	        'autolink',
	        'backticks',
	        'emphasis',
	        'entity',
	        'escape',
	        'htmltag',
	        'links',
	        'newline',
	        'text'
	      ]
	    }
	  }
	};


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(242), __webpack_require__(304)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('remarkable'), require('../models/ParseResult.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck, global.createClass, global.remarkable, global.ParseResult);
	        global.Result = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2, _createClass2, _remarkable, _ParseResult) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _remarkable2 = _interopRequireDefault(_remarkable);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var Result = function () {
	        function Result() {
	            (0, _classCallCheck3.default)(this, Result);
	        }

	        (0, _createClass3.default)(Result, [{
	            key: 'convertToMarkdown',
	            value: function convertToMarkdown(pages, transformations) {

	                var parseResult = new _ParseResult2.default({
	                    pages: pages
	                });

	                var lastTransformation;
	                transformations.forEach(function (transformation) {
	                    if (lastTransformation) {
	                        parseResult = lastTransformation.completeTransform(parseResult);
	                    }
	                    parseResult = transformation.transform(parseResult);
	                    lastTransformation = transformation;
	                });

	                var text = '';
	                parseResult.pages.forEach(function (page) {
	                    page.items.forEach(function (item) {
	                        text += item + '\n';
	                    });
	                });

	                return text;
	            }
	        }]);
	        return Result;
	    }();

	    exports.default = Result;
	});

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require("babel-runtime/helpers/classCallCheck"));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck);
	        global.ParseResult = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2) {
	    "use strict";

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var ParseResult = function ParseResult(options) {
	        (0, _classCallCheck3.default)(this, ParseResult);

	        // like Page[]
	        this.pages = options.pages;
	        // properties accasable for all the following transformations in debug mode
	        this.globals = options.globals;
	        // something to show only for the transformation in debug mode
	        this.messages = options.messages;
	    };

	    exports.default = ParseResult;
	});

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(168), __webpack_require__(183), __webpack_require__(1), __webpack_require__(2), __webpack_require__(306), __webpack_require__(307), __webpack_require__(329), __webpack_require__(369), __webpack_require__(348), __webpack_require__(349), __webpack_require__(358), __webpack_require__(359), __webpack_require__(360), __webpack_require__(363), __webpack_require__(364), __webpack_require__(365), __webpack_require__(367)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('enumify'), require('./transformations/textitem/CalculateGlobalStats.jsx'), require('./transformations/lineitem/CompactLines.jsx'), require('./transformations/lineitem/RemoveRepetitiveElements.jsx'), require('./transformations/lineitem/VerticalToHorizontal.jsx'), require('./transformations/lineitem/DetectTOC.jsx'), require('./transformations/lineitem/DetectListItems.jsx'), require('./transformations/lineitem/DetectHeaders.jsx'), require('./transformations/textitemblock/GatherBlocks.jsx'), require('./transformations/textitemblock/DetectCodeQuoteBlocks.jsx'), require('./transformations/textitemblock/DetectListLevels.jsx'), require('./transformations/ToTextBlocks.jsx'), require('./transformations/ToMarkdown.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.possibleConstructorReturn, global.inherits, global.classCallCheck, global.createClass, global.enumify, global.CalculateGlobalStats, global.CompactLines, global.RemoveRepetitiveElements, global.VerticalToHorizontal, global.DetectTOC, global.DetectListItems, global.DetectHeaders, global.GatherBlocks, global.DetectCodeQuoteBlocks, global.DetectListLevels, global.ToTextBlocks, global.ToMarkdown);
	        global.AppState = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _possibleConstructorReturn2, _inherits2, _classCallCheck2, _createClass2, _enumify, _CalculateGlobalStats, _CompactLines, _RemoveRepetitiveElements, _VerticalToHorizontal, _DetectTOC, _DetectListItems, _DetectHeaders, _GatherBlocks, _DetectCodeQuoteBlocks, _DetectListLevels, _ToTextBlocks, _ToMarkdown) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });
	    exports.View = undefined;

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _CalculateGlobalStats2 = _interopRequireDefault(_CalculateGlobalStats);

	    var _CompactLines2 = _interopRequireDefault(_CompactLines);

	    var _RemoveRepetitiveElements2 = _interopRequireDefault(_RemoveRepetitiveElements);

	    var _VerticalToHorizontal2 = _interopRequireDefault(_VerticalToHorizontal);

	    var _DetectTOC2 = _interopRequireDefault(_DetectTOC);

	    var _DetectListItems2 = _interopRequireDefault(_DetectListItems);

	    var _DetectHeaders2 = _interopRequireDefault(_DetectHeaders);

	    var _GatherBlocks2 = _interopRequireDefault(_GatherBlocks);

	    var _DetectCodeQuoteBlocks2 = _interopRequireDefault(_DetectCodeQuoteBlocks);

	    var _DetectListLevels2 = _interopRequireDefault(_DetectListLevels);

	    var _ToTextBlocks2 = _interopRequireDefault(_ToTextBlocks);

	    var _ToMarkdown2 = _interopRequireDefault(_ToMarkdown);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var AppState = function () {
	        function AppState() {
	            (0, _classCallCheck3.default)(this, AppState);

	            this.mainView = View.UPLOAD;
	            this.fileBuffer;
	            this.metadata;
	            this.pages = [];
	            this.transformations;

	            //bind functions
	            this.storeFileBuffer = this.storeFileBuffer.bind(this);
	            this.storePdfPages = this.storePdfPages.bind(this);
	            this.switchMainView = this.switchMainView.bind(this);
	        }

	        // the uploaded pdf as file buffer


	        (0, _createClass3.default)(AppState, [{
	            key: 'storeFileBuffer',
	            value: function storeFileBuffer(fileBuffer) {
	                this.fileBuffer = fileBuffer;
	                this.mainView = View.LOADING;
	            }
	        }, {
	            key: 'storePdfPages',
	            value: function storePdfPages(metadata, fontMap, pages) {
	                this.metadata = metadata;
	                this.pages = pages;
	                this.fileBuffer = null;
	                this.mainView = View.RESULT;

	                this.transformations = [new _CalculateGlobalStats2.default(fontMap), new _CompactLines2.default(), new _RemoveRepetitiveElements2.default(), new _VerticalToHorizontal2.default(), new _DetectTOC2.default(), new _DetectHeaders2.default(), new _DetectListItems2.default(), new _GatherBlocks2.default(), new _DetectCodeQuoteBlocks2.default(), new _DetectListLevels2.default(), new _ToTextBlocks2.default(), new _ToMarkdown2.default()];
	            }
	        }, {
	            key: 'switchMainView',
	            value: function switchMainView(view) {
	                this.mainView = view;
	            }
	        }]);
	        return AppState;
	    }();

	    exports.default = AppState;

	    var View = exports.View = function (_Enum) {
	        (0, _inherits3.default)(View, _Enum);

	        function View() {
	            (0, _classCallCheck3.default)(this, View);
	            return (0, _possibleConstructorReturn3.default)(this, (View.__proto__ || (0, _getPrototypeOf2.default)(View)).apply(this, arguments));
	        }

	        return View;
	    }(_enumify.Enum);

	    View.initEnum(['UPLOAD', 'LOADING', 'RESULT', 'DEBUG']);
	});

/***/ }),
/* 306 */
/***/ (function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.copyProperties = copyProperties;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var INITIALIZED = Symbol();

	/**
	 * This is an abstract class that is not intended to be
	 * used directly. Extend it to turn your class into an enum
	 * (initialization is performed via `MyClass.initEnum()`).
	 */

	var Enum = exports.Enum = function () {
	    /**
	     * `initEnum()` closes the class. Then calling this constructor
	     * throws an exception.
	     * 
	     * If your subclass has a constructor then you can control
	     * what properties are added to `this` via the argument you
	     * pass to `super()`. No arguments are fine, too.
	     */

	    function Enum() {
	        var instanceProperties = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];

	        _classCallCheck(this, Enum);

	        // new.target would be better than this.constructor,
	        // but isn’t supported by Babel
	        if ({}.hasOwnProperty.call(this.constructor, INITIALIZED)) {
	            throw new Error('Enum classes can’t be instantiated');
	        }
	        if ((typeof instanceProperties === 'undefined' ? 'undefined' : _typeof(instanceProperties)) === 'object' && instanceProperties !== null) {
	            copyProperties(this, instanceProperties);
	        }
	    }
	    /**
	     * Set up the enum, close the class.
	     * 
	     * @param arg Either an object whose properties provide the names
	     * and values (which must be mutable objects) of the enum constants.
	     * Or an Array whose elements are used as the names of the enum constants
	     * The values are create by instantiating the current class.
	     */

	    _createClass(Enum, [{
	        key: 'toString',

	        /**
	         * Default `toString()` method for enum constant.
	         */
	        value: function toString() {
	            return this.constructor.name + '.' + this.name;
	        }
	    }], [{
	        key: 'initEnum',
	        value: function initEnum(arg) {
	            Object.defineProperty(this, 'enumValues', {
	                value: [],
	                configurable: false,
	                writable: false,
	                enumerable: true
	            });
	            if (Array.isArray(arg)) {
	                this._enumValuesFromArray(arg);
	            } else {
	                this._enumValuesFromObject(arg);
	            }
	            Object.freeze(this.enumValues);
	            this[INITIALIZED] = true;
	            return this;
	        }
	    }, {
	        key: '_enumValuesFromArray',
	        value: function _enumValuesFromArray(arr) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    this._pushEnumValue(new this(), key);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: '_enumValuesFromObject',
	        value: function _enumValuesFromObject(obj) {
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = Object.keys(obj)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var key = _step2.value;

	                    var value = new this(obj[key]);
	                    this._pushEnumValue(value, key);
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	        }
	    }, {
	        key: '_pushEnumValue',
	        value: function _pushEnumValue(enumValue, name) {
	            enumValue.name = name;
	            enumValue.ordinal = this.enumValues.length;
	            Object.defineProperty(this, name, {
	                value: enumValue,
	                configurable: false,
	                writable: false,
	                enumerable: true
	            });
	            this.enumValues.push(enumValue);
	        }

	        /**
	         * Given the name of an enum constant, return its value.
	         */

	    }, {
	        key: 'enumValueOf',
	        value: function enumValueOf(name) {
	            return this.enumValues.find(function (x) {
	                return x.name === name;
	            });
	        }

	        /**
	         * Make enum classes iterable
	         */

	    }, {
	        key: Symbol.iterator,
	        value: function value() {
	            return this.enumValues[Symbol.iterator]();
	        }
	    }]);

	    return Enum;
	}();

	function copyProperties(target, source) {
	    // Ideally, we’d use Reflect.ownKeys() here,
	    // but I don’t want to depend on a polyfill
	    var _iteratorNormalCompletion3 = true;
	    var _didIteratorError3 = false;
	    var _iteratorError3 = undefined;

	    try {
	        for (var _iterator3 = Object.getOwnPropertyNames(source)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            var key = _step3.value;

	            var desc = Object.getOwnPropertyDescriptor(source, key);
	            Object.defineProperty(target, key, desc);
	        }
	    } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                _iterator3.return();
	            }
	        } finally {
	            if (_didIteratorError3) {
	                throw _iteratorError3;
	            }
	        }
	    }

	    return target;
	}

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(308), __webpack_require__(311), __webpack_require__(160), __webpack_require__(80), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(313), __webpack_require__(304), __webpack_require__(328)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/keys'), require('babel-runtime/core-js/json/stringify'), require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/map'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToTextItemTransformation.jsx'), require('../../ParseResult.jsx'), require('../../markdown/WordFormat.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.keys, global.stringify, global._extends, global.map, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToTextItemTransformation, global.ParseResult, global.WordFormat);
	        global.CalculateGlobalStats = mod.exports;
	    }
	})(this, function (exports, _keys, _stringify, _extends2, _map, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToTextItemTransformation, _ParseResult, _WordFormat) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _keys2 = _interopRequireDefault(_keys);

	    var _stringify2 = _interopRequireDefault(_stringify);

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _map2 = _interopRequireDefault(_map);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToTextItemTransformation2 = _interopRequireDefault(_ToTextItemTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _WordFormat2 = _interopRequireDefault(_WordFormat);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var CalculateGlobalStats = function (_ToTextItemTransforma) {
	        (0, _inherits3.default)(CalculateGlobalStats, _ToTextItemTransforma);

	        function CalculateGlobalStats(fontMap) {
	            (0, _classCallCheck3.default)(this, CalculateGlobalStats);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (CalculateGlobalStats.__proto__ || (0, _getPrototypeOf2.default)(CalculateGlobalStats)).call(this, "Calculate Statistics"));

	            _this.fontMap = fontMap;
	            return _this;
	        }

	        (0, _createClass3.default)(CalculateGlobalStats, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                // Parse heights
	                var heightToOccurrence = {};
	                var fontToOccurrence = {};
	                var maxHeight = 0;
	                var maxHeightFont;
	                parseResult.pages.forEach(function (page) {
	                    page.items.forEach(function (item) {
	                        heightToOccurrence[item.height] = heightToOccurrence[item.height] ? heightToOccurrence[item.height] + 1 : 1;
	                        fontToOccurrence[item.font] = fontToOccurrence[item.font] ? fontToOccurrence[item.font] + 1 : 1;
	                        if (item.height > maxHeight) {
	                            maxHeight = item.height;
	                            maxHeightFont = item.font;
	                        }
	                    });
	                });
	                var mostUsedHeight = parseInt(getMostUsedKey(heightToOccurrence));
	                var mostUsedFont = getMostUsedKey(fontToOccurrence);

	                // Parse line distances
	                var distanceToOccurrence = {};
	                parseResult.pages.forEach(function (page) {
	                    var lastItemOfMostUsedHeight;
	                    page.items.forEach(function (item) {
	                        if (item.height == mostUsedHeight && item.text.trim().length > 0) {
	                            if (lastItemOfMostUsedHeight && item.y != lastItemOfMostUsedHeight.y) {
	                                var distance = lastItemOfMostUsedHeight.y - item.y;
	                                if (distance > 0) {
	                                    distanceToOccurrence[distance] = distanceToOccurrence[distance] ? distanceToOccurrence[distance] + 1 : 1;
	                                }
	                            }
	                            lastItemOfMostUsedHeight = item;
	                        } else {
	                            lastItemOfMostUsedHeight = null;
	                        }
	                    });
	                });
	                var mostUsedDistance = parseInt(getMostUsedKey(distanceToOccurrence));

	                var fontIdToName = [];
	                var fontToFormats = new _map2.default();
	                this.fontMap.forEach(function (value, key) {
	                    fontIdToName.push(key + " = " + value.name);
	                    var fontName = value.name.toLowerCase();
	                    var format;
	                    if (key == mostUsedFont) {
	                        format = null;
	                    } else if (fontName.includes('bold') && (fontName.includes('oblique') || fontName.includes('italic'))) {
	                        format = _WordFormat2.default.BOLD_OBLIQUE;
	                    } else if (fontName.includes('bold')) {
	                        format = _WordFormat2.default.BOLD;
	                    } else if (fontName.includes('oblique') || fontName.includes('italic')) {
	                        format = _WordFormat2.default.OBLIQUE;
	                    } else if (fontName === maxHeightFont) {
	                        format = _WordFormat2.default.BOLD;
	                    }
	                    if (format) {
	                        fontToFormats.set(key, format.name);
	                    }
	                });
	                fontIdToName.sort();

	                //Make a copy of the originals so all following transformation don't modify them
	                var newPages = parseResult.pages.map(function (page) {
	                    return (0, _extends3.default)({}, page, {
	                        items: page.items.map(function (textItem) {
	                            return (0, _extends3.default)({}, textItem);
	                        })
	                    });
	                });
	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    pages: newPages,
	                    globals: {
	                        mostUsedHeight: mostUsedHeight,
	                        mostUsedFont: mostUsedFont,
	                        mostUsedDistance: mostUsedDistance,
	                        maxHeight: maxHeight,
	                        maxHeightFont: maxHeightFont,
	                        fontToFormats: fontToFormats
	                    },
	                    messages: ['Items per height: ' + (0, _stringify2.default)(heightToOccurrence), 'Items per font: ' + (0, _stringify2.default)(fontToOccurrence), 'Items per distance: ' + (0, _stringify2.default)(distanceToOccurrence), 'Fonts:' + (0, _stringify2.default)(fontIdToName)]
	                }));
	            }
	        }]);
	        return CalculateGlobalStats;
	    }(_ToTextItemTransformation2.default);

	    exports.default = CalculateGlobalStats;


	    function getMostUsedKey(keyToOccurrence) {
	        var maxOccurence = 0;
	        var maxKey;
	        (0, _keys2.default)(keyToOccurrence).map(function (element) {
	            if (!maxKey || keyToOccurrence[element] > maxOccurence) {
	                maxOccurence = keyToOccurrence[element];
	                maxKey = element;
	            }
	        });
	        return maxKey;
	    }
	});

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(309), __esModule: true };

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(310);
	module.exports = __webpack_require__(8).Object.keys;


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(53);
	var $keys = __webpack_require__(37);

	__webpack_require__(231)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(312), __esModule: true };

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(8);
	var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
	module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(314), __webpack_require__(304), __webpack_require__(240), __webpack_require__(315), __webpack_require__(327)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./Transformation.jsx'), require('../ParseResult.jsx'), require('../TextItem.jsx'), require('../../components/debug/TextItemPageView.jsx'), require('../Annotation.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.Transformation, global.ParseResult, global.TextItem, global.TextItemPageView, global.Annotation);
	        global.ToTextItemTransformation = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _Transformation2, _ParseResult, _TextItem, _TextItemPageView, _Annotation) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _Transformation3 = _interopRequireDefault(_Transformation2);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _TextItem2 = _interopRequireDefault(_TextItem);

	    var _TextItemPageView2 = _interopRequireDefault(_TextItemPageView);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var ToTextItemTransformation = function (_Transformation) {
	        (0, _inherits3.default)(ToTextItemTransformation, _Transformation);

	        function ToTextItemTransformation(name) {
	            (0, _classCallCheck3.default)(this, ToTextItemTransformation);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (ToTextItemTransformation.__proto__ || (0, _getPrototypeOf2.default)(ToTextItemTransformation)).call(this, name, _TextItem2.default.name));

	            if (_this.constructor === ToTextItemTransformation) {
	                throw new TypeError("Can not construct abstract class.");
	            }
	            _this.showWhitespaces = false;
	            return _this;
	        }

	        (0, _createClass3.default)(ToTextItemTransformation, [{
	            key: 'showModificationCheckbox',
	            value: function showModificationCheckbox() {
	                return true;
	            }
	        }, {
	            key: 'createPageView',
	            value: function createPageView(page, modificationsOnly) {
	                return _react2.default.createElement(_TextItemPageView2.default, {
	                    key: page.index,
	                    page: page,
	                    modificationsOnly: modificationsOnly,
	                    showWhitespaces: this.showWhitespaces });
	            }
	        }, {
	            key: 'completeTransform',
	            value: function completeTransform(parseResult) {
	                // The usual cleanup
	                parseResult.messages = [];
	                parseResult.pages.forEach(function (page) {
	                    page.items = page.items.filter(function (item) {
	                        return !item.annotation || item.annotation !== _Annotation.REMOVED_ANNOTATION;
	                    });
	                    page.items.forEach(function (item) {
	                        return item.annotation = null;
	                    });
	                });
	                return parseResult;
	            }
	        }]);
	        return ToTextItemTransformation;
	    }(_Transformation3.default);

	    exports.default = ToTextItemTransformation;
	});

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(304)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("../ParseResult.jsx"));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck, global.createClass, global.ParseResult);
	        global.Transformation = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2, _createClass2, _ParseResult) {
	    "use strict";

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var Transformation = function () {
	        function Transformation(name, itemType) {
	            (0, _classCallCheck3.default)(this, Transformation);

	            if (this.constructor === Transformation) {
	                throw new TypeError("Can not construct abstract class.");
	            }
	            if (this.transform === Transformation.prototype.transform) {
	                throw new TypeError("Please implement abstract method 'transform()'.");
	            }
	            this.name = name;
	            this.itemType = itemType;
	        }

	        (0, _createClass3.default)(Transformation, [{
	            key: "showModificationCheckbox",
	            value: function showModificationCheckbox() {
	                return false;
	            }
	        }, {
	            key: "createPageView",
	            value: function createPageView(page, modificationsOnly) {
	                // eslint-disable-line no-unused-vars
	                throw new TypeError("Do not call abstract method foo from child.");
	            }
	        }, {
	            key: "transform",
	            value: function transform(parseResult) {
	                // eslint-disable-line no-unused-vars
	                throw new TypeError("Do not call abstract method foo from child.");
	            }
	        }, {
	            key: "completeTransform",
	            value: function completeTransform(parseResult) {
	                // eslint-disable-line no-unused-vars
	                parseResult.messages = [];
	                return parseResult;
	            }
	        }]);
	        return Transformation;
	    }();

	    exports.default = Transformation;
	});

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(316), __webpack_require__(317)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./PageView.jsx'), require('./TextItemTable.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.PageView, global.TextItemTable);
	        global.TextItemPageView = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _PageView2, _TextItemTable) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _PageView3 = _interopRequireDefault(_PageView2);

	    var _TextItemTable2 = _interopRequireDefault(_TextItemTable);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var TextItemPageView = function (_PageView) {
	        (0, _inherits3.default)(TextItemPageView, _PageView);

	        function TextItemPageView() {
	            (0, _classCallCheck3.default)(this, TextItemPageView);
	            return (0, _possibleConstructorReturn3.default)(this, (TextItemPageView.__proto__ || (0, _getPrototypeOf2.default)(TextItemPageView)).apply(this, arguments));
	        }

	        (0, _createClass3.default)(TextItemPageView, [{
	            key: 'createItemViews',
	            value: function createItemViews(items, showWhitespaces) {
	                return _react2.default.createElement(_TextItemTable2.default, { textItems: items, showWhitespaces: showWhitespaces });
	            }
	        }]);
	        return TextItemPageView;
	    }(_PageView3.default);

	    exports.default = TextItemPageView;
	});

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require("babel-runtime/core-js/object/get-prototype-of"), require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("babel-runtime/helpers/possibleConstructorReturn"), require("babel-runtime/helpers/inherits"), require("react"));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react);
	        global.PageView = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react) {
	    "use strict";

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var PageView = function (_React$Component) {
	        (0, _inherits3.default)(PageView, _React$Component);

	        function PageView() {
	            (0, _classCallCheck3.default)(this, PageView);
	            return (0, _possibleConstructorReturn3.default)(this, (PageView.__proto__ || (0, _getPrototypeOf2.default)(PageView)).apply(this, arguments));
	        }

	        (0, _createClass3.default)(PageView, [{
	            key: "createItemViews",
	            value: function createItemViews(items, showWhitespaces) {
	                // eslint-disable-line no-unused-vars
	                throw new TypeError("Do not call abstract method foo from child.");
	            }
	        }, {
	            key: "render",
	            value: function render() {
	                var _props = this.props,
	                    page = _props.page,
	                    modificationsOnly = _props.modificationsOnly,
	                    showWhitespaces = _props.showWhitespaces;


	                var items = page.items;
	                if (modificationsOnly) {
	                    items = items.filter(function (block) {
	                        return block.annotation;
	                    });
	                }

	                var content;
	                if (items.length == 0 && modificationsOnly) {
	                    content = _react2.default.createElement("div", null);
	                } else {
	                    var itemViews = this.createItemViews(items, showWhitespaces);
	                    var header = "Page " + (page.index + 1);
	                    content = _react2.default.createElement(
	                        "div",
	                        null,
	                        _react2.default.createElement(
	                            "h2",
	                            { id: header },
	                            header
	                        ),
	                        _react2.default.createElement("hr", null),
	                        itemViews
	                    );
	                }
	                return content;
	            }
	        }]);
	        return PageView;
	    }(_react2.default.Component);

	    PageView.propTypes = {
	        page: _react2.default.PropTypes.object.isRequired,
	        modificationsOnly: _react2.default.PropTypes.bool,
	        showWhitespaces: _react2.default.PropTypes.bool
	    };
	    exports.default = PageView;
	});

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(318)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('react-bootstrap/lib/Table'));
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.Table);
	    global.TextItemTable = mod.exports;
	  }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _Table) {
	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	  var _createClass3 = _interopRequireDefault(_createClass2);

	  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	  var _inherits3 = _interopRequireDefault(_inherits2);

	  var _react2 = _interopRequireDefault(_react);

	  var _Table2 = _interopRequireDefault(_Table);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  var TextItemTable = function (_React$Component) {
	    (0, _inherits3.default)(TextItemTable, _React$Component);

	    function TextItemTable() {
	      (0, _classCallCheck3.default)(this, TextItemTable);
	      return (0, _possibleConstructorReturn3.default)(this, (TextItemTable.__proto__ || (0, _getPrototypeOf2.default)(TextItemTable)).apply(this, arguments));
	    }

	    (0, _createClass3.default)(TextItemTable, [{
	      key: 'render',
	      value: function render() {
	        var _props = this.props,
	            showWhitespaces = _props.showWhitespaces,
	            textItems = _props.textItems;

	        var tableHeader = _react2.default.createElement(
	          'thead',
	          null,
	          _react2.default.createElement(
	            'tr',
	            null,
	            _react2.default.createElement(
	              'th',
	              null,
	              '#'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Text'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'X'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Y'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Width'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Height'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Font'
	            )
	          )
	        );

	        var textItemRows = textItems.map(function (textItem, i) {
	          return _react2.default.createElement(
	            'tr',
	            { key: i, style: textItem.annotation ? {
	                color: textItem.annotation.color
	              } : null },
	            _react2.default.createElement(
	              'td',
	              null,
	              _react2.default.createElement(
	                'div',
	                { style: { textAlign: 'center' } },
	                i
	              ),
	              _react2.default.createElement(
	                'div',
	                { style: { textAlign: 'center' } },
	                textItem.annotation ? textItem.annotation.category : ''
	              ),
	              _react2.default.createElement(
	                'div',
	                { style: { textAlign: 'center', color: 'brown' } },
	                textItem.type ? textItem.type.name : ''
	              ),
	              _react2.default.createElement(
	                'div',
	                { style: { textAlign: 'center', color: 'orange' } },
	                textItem.parsedElements && textItem.parsedElements.footnoteLinks.length > 0 ? _react2.default.createElement(
	                  'div',
	                  null,
	                  'Footnote-Link'
	                ) : '',
	                textItem.parsedElements && textItem.parsedElements.containLinks ? _react2.default.createElement(
	                  'div',
	                  null,
	                  'Link'
	                ) : '',
	                textItem.lineFormat ? _react2.default.createElement(
	                  'div',
	                  null,
	                  textItem.lineFormat.name
	                ) : '',
	                textItem.unopenedFormat ? _react2.default.createElement(
	                  'div',
	                  null,
	                  'Unopened',
	                  ' ' + textItem.unopenedFormat.name
	                ) : '',
	                textItem.parsedElements && textItem.parsedElements.inlineFormats > 0 ? _react2.default.createElement(
	                  'div',
	                  null,
	                  textItem.parsedElements.inlineFormats + 'x Bold/Italic'
	                ) : '',
	                textItem.unclosedFormat ? _react2.default.createElement(
	                  'div',
	                  null,
	                  'Unclosed',
	                  ' ' + textItem.unclosedFormat.name
	                ) : ''
	              )
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              showWhitespaces ? _react2.default.createElement(
	                'pre',
	                { style: textItem.annotation ? {
	                    color: textItem.annotation.color,
	                    display: 'inline-block'
	                  } : {
	                    display: 'inline-block'
	                  } },
	                textItem.text
	              ) : textItem.text
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              textItem.x
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              textItem.y
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              textItem.width
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              textItem.height
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              textItem.font
	            )
	          );
	        });

	        return _react2.default.createElement(
	          _Table2.default,
	          { responsive: true, condensed: true, bordered: true },
	          tableHeader,
	          _react2.default.createElement(
	            'tbody',
	            null,
	            textItemRows
	          )
	        );
	      }
	    }]);
	    return TextItemTable;
	  }(_react2.default.Component);

	  TextItemTable.propTypes = {
	    textItems: _react2.default.PropTypes.array.isRequired,
	    showWhitespaces: _react2.default.PropTypes.bool
	  };
	  exports.default = TextItemTable;
	});

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends3 = __webpack_require__(160);

	var _extends4 = _interopRequireDefault(_extends3);

	var _objectWithoutProperties2 = __webpack_require__(167);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _classCallCheck2 = __webpack_require__(1);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _possibleConstructorReturn2 = __webpack_require__(168);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(183);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _classnames = __webpack_require__(319);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(191);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(236);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _bootstrapUtils = __webpack_require__(320);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var propTypes = {
	  striped: _propTypes2['default'].bool,
	  bordered: _propTypes2['default'].bool,
	  condensed: _propTypes2['default'].bool,
	  hover: _propTypes2['default'].bool,
	  responsive: _propTypes2['default'].bool
	};

	var defaultProps = {
	  bordered: false,
	  condensed: false,
	  hover: false,
	  responsive: false,
	  striped: false
	};

	var Table = function (_React$Component) {
	  (0, _inherits3['default'])(Table, _React$Component);

	  function Table() {
	    (0, _classCallCheck3['default'])(this, Table);
	    return (0, _possibleConstructorReturn3['default'])(this, _React$Component.apply(this, arguments));
	  }

	  Table.prototype.render = function render() {
	    var _extends2;

	    var _props = this.props,
	        striped = _props.striped,
	        bordered = _props.bordered,
	        condensed = _props.condensed,
	        hover = _props.hover,
	        responsive = _props.responsive,
	        className = _props.className,
	        props = (0, _objectWithoutProperties3['default'])(_props, ['striped', 'bordered', 'condensed', 'hover', 'responsive', 'className']);

	    var _splitBsProps = (0, _bootstrapUtils.splitBsProps)(props),
	        bsProps = _splitBsProps[0],
	        elementProps = _splitBsProps[1];

	    var classes = (0, _extends4['default'])({}, (0, _bootstrapUtils.getClassSet)(bsProps), (_extends2 = {}, _extends2[(0, _bootstrapUtils.prefix)(bsProps, 'striped')] = striped, _extends2[(0, _bootstrapUtils.prefix)(bsProps, 'bordered')] = bordered, _extends2[(0, _bootstrapUtils.prefix)(bsProps, 'condensed')] = condensed, _extends2[(0, _bootstrapUtils.prefix)(bsProps, 'hover')] = hover, _extends2));

	    var table = _react2['default'].createElement('table', (0, _extends4['default'])({}, elementProps, {
	      className: (0, _classnames2['default'])(className, classes)
	    }));

	    if (responsive) {
	      return _react2['default'].createElement(
	        'div',
	        { className: (0, _bootstrapUtils.prefix)(bsProps, 'responsive') },
	        table
	      );
	    }

	    return table;
	  };

	  return Table;
	}(_react2['default'].Component);

	Table.propTypes = propTypes;
	Table.defaultProps = defaultProps;

	exports['default'] = (0, _bootstrapUtils.bsClass)('table', Table);
	module.exports = exports['default'];

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports._curry = exports.bsSizes = exports.bsStyles = exports.bsClass = undefined;

	var _entries = __webpack_require__(321);

	var _entries2 = _interopRequireDefault(_entries);

	var _extends2 = __webpack_require__(160);

	var _extends3 = _interopRequireDefault(_extends2);

	exports.prefix = prefix;
	exports.getClassSet = getClassSet;
	exports.splitBsProps = splitBsProps;
	exports.splitBsPropsAndOmit = splitBsPropsAndOmit;
	exports.addStyle = addStyle;

	var _invariant = __webpack_require__(325);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _propTypes = __webpack_require__(236);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _StyleConfig = __webpack_require__(326);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function curry(fn) {
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var last = args[args.length - 1];
	    if (typeof last === 'function') {
	      return fn.apply(undefined, args);
	    }
	    return function (Component) {
	      return fn.apply(undefined, args.concat([Component]));
	    };
	  };
	} // TODO: The publicly exposed parts of this should be in lib/BootstrapUtils.

	function prefix(props, variant) {
	  !(props.bsClass != null) ?  true ? (0, _invariant2['default'])(false, 'A `bsClass` prop is required for this component') : (0, _invariant2['default'])(false) : void 0;
	  return props.bsClass + (variant ? '-' + variant : '');
	}

	var bsClass = exports.bsClass = curry(function (defaultClass, Component) {
	  var propTypes = Component.propTypes || (Component.propTypes = {});
	  var defaultProps = Component.defaultProps || (Component.defaultProps = {});

	  propTypes.bsClass = _propTypes2['default'].string;
	  defaultProps.bsClass = defaultClass;

	  return Component;
	});

	var bsStyles = exports.bsStyles = curry(function (styles, defaultStyle, Component) {
	  if (typeof defaultStyle !== 'string') {
	    Component = defaultStyle;
	    defaultStyle = undefined;
	  }

	  var existing = Component.STYLES || [];
	  var propTypes = Component.propTypes || {};

	  styles.forEach(function (style) {
	    if (existing.indexOf(style) === -1) {
	      existing.push(style);
	    }
	  });

	  var propType = _propTypes2['default'].oneOf(existing);

	  // expose the values on the propType function for documentation
	  Component.STYLES = propType._values = existing;

	  Component.propTypes = (0, _extends3['default'])({}, propTypes, {
	    bsStyle: propType
	  });

	  if (defaultStyle !== undefined) {
	    var defaultProps = Component.defaultProps || (Component.defaultProps = {});
	    defaultProps.bsStyle = defaultStyle;
	  }

	  return Component;
	});

	var bsSizes = exports.bsSizes = curry(function (sizes, defaultSize, Component) {
	  if (typeof defaultSize !== 'string') {
	    Component = defaultSize;
	    defaultSize = undefined;
	  }

	  var existing = Component.SIZES || [];
	  var propTypes = Component.propTypes || {};

	  sizes.forEach(function (size) {
	    if (existing.indexOf(size) === -1) {
	      existing.push(size);
	    }
	  });

	  var values = [];
	  existing.forEach(function (size) {
	    var mappedSize = _StyleConfig.SIZE_MAP[size];
	    if (mappedSize && mappedSize !== size) {
	      values.push(mappedSize);
	    }

	    values.push(size);
	  });

	  var propType = _propTypes2['default'].oneOf(values);
	  propType._values = values;

	  // expose the values on the propType function for documentation
	  Component.SIZES = existing;

	  Component.propTypes = (0, _extends3['default'])({}, propTypes, {
	    bsSize: propType
	  });

	  if (defaultSize !== undefined) {
	    if (!Component.defaultProps) {
	      Component.defaultProps = {};
	    }
	    Component.defaultProps.bsSize = defaultSize;
	  }

	  return Component;
	});

	function getClassSet(props) {
	  var _classes;

	  var classes = (_classes = {}, _classes[prefix(props)] = true, _classes);

	  if (props.bsSize) {
	    var bsSize = _StyleConfig.SIZE_MAP[props.bsSize] || props.bsSize;
	    classes[prefix(props, bsSize)] = true;
	  }

	  if (props.bsStyle) {
	    classes[prefix(props, props.bsStyle)] = true;
	  }

	  return classes;
	}

	function getBsProps(props) {
	  return {
	    bsClass: props.bsClass,
	    bsSize: props.bsSize,
	    bsStyle: props.bsStyle,
	    bsRole: props.bsRole
	  };
	}

	function isBsProp(propName) {
	  return propName === 'bsClass' || propName === 'bsSize' || propName === 'bsStyle' || propName === 'bsRole';
	}

	function splitBsProps(props) {
	  var elementProps = {};
	  (0, _entries2['default'])(props).forEach(function (_ref) {
	    var propName = _ref[0],
	        propValue = _ref[1];

	    if (!isBsProp(propName)) {
	      elementProps[propName] = propValue;
	    }
	  });

	  return [getBsProps(props), elementProps];
	}

	function splitBsPropsAndOmit(props, omittedPropNames) {
	  var isOmittedProp = {};
	  omittedPropNames.forEach(function (propName) {
	    isOmittedProp[propName] = true;
	  });

	  var elementProps = {};
	  (0, _entries2['default'])(props).forEach(function (_ref2) {
	    var propName = _ref2[0],
	        propValue = _ref2[1];

	    if (!isBsProp(propName) && !isOmittedProp[propName]) {
	      elementProps[propName] = propValue;
	    }
	  });

	  return [getBsProps(props), elementProps];
	}

	/**
	 * Add a style variant to a Component. Mutates the propTypes of the component
	 * in order to validate the new variant.
	 */
	function addStyle(Component) {
	  for (var _len2 = arguments.length, styleVariant = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    styleVariant[_key2 - 1] = arguments[_key2];
	  }

	  bsStyles(styleVariant, Component);
	}

	var _curry = exports._curry = curry;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(322), __esModule: true };

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(323);
	module.exports = __webpack_require__(8).Object.entries;


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(6);
	var $entries = __webpack_require__(324)(true);

	$export($export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var getKeys = __webpack_require__(37);
	var toIObject = __webpack_require__(39);
	var isEnum = __webpack_require__(166).f;
	module.exports = function (isEntries) {
	  return function (it) {
	    var O = toIObject(it);
	    var keys = getKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) if (isEnum.call(O, key = keys[i++])) {
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ }),
/* 326 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var Size = exports.Size = {
	  LARGE: 'large',
	  SMALL: 'small',
	  XSMALL: 'xsmall'
	};

	var SIZE_MAP = exports.SIZE_MAP = {
	  large: 'lg',
	  medium: 'md',
	  small: 'sm',
	  xsmall: 'xs',
	  lg: 'lg',
	  md: 'md',
	  sm: 'sm',
	  xs: 'xs'
	};

	var DEVICE_SIZES = exports.DEVICE_SIZES = ['lg', 'md', 'sm', 'xs'];

	var State = exports.State = {
	  SUCCESS: 'success',
	  WARNING: 'warning',
	  DANGER: 'danger',
	  INFO: 'info'
	};

	var Style = exports.Style = {
	  DEFAULT: 'default',
	  PRIMARY: 'primary',
	  LINK: 'link',
	  INVERSE: 'inverse'
	};

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/classCallCheck'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck);
	        global.Annotation = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });
	    exports.MODIFIED_ANNOTATION = exports.DETECTED_ANNOTATION = exports.UNCHANGED_ANNOTATION = exports.REMOVED_ANNOTATION = exports.ADDED_ANNOTATION = undefined;

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var Annotation = function Annotation(options) {
	        (0, _classCallCheck3.default)(this, Annotation);

	        this.category = options.category;
	        this.color = options.color;
	    };

	    exports.default = Annotation;
	    var ADDED_ANNOTATION = exports.ADDED_ANNOTATION = new Annotation({
	        category: 'Added',
	        color: 'green'
	    });

	    var REMOVED_ANNOTATION = exports.REMOVED_ANNOTATION = new Annotation({
	        category: 'Removed',
	        color: 'red'
	    });

	    var UNCHANGED_ANNOTATION = exports.UNCHANGED_ANNOTATION = new Annotation({
	        category: 'Unchanged',
	        color: 'brown'
	    });

	    var DETECTED_ANNOTATION = exports.DETECTED_ANNOTATION = new Annotation({
	        category: 'Detected',
	        color: 'green'
	    });

	    var MODIFIED_ANNOTATION = exports.MODIFIED_ANNOTATION = new Annotation({
	        category: 'Modified',
	        color: 'green'
	    });
	});

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(168), __webpack_require__(183), __webpack_require__(306)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('enumify'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.possibleConstructorReturn, global.inherits, global.enumify);
	        global.WordFormat = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _possibleConstructorReturn2, _inherits2, _enumify) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var WordFormat = function (_Enum) {
	        (0, _inherits3.default)(WordFormat, _Enum);

	        function WordFormat() {
	            (0, _classCallCheck3.default)(this, WordFormat);
	            return (0, _possibleConstructorReturn3.default)(this, (WordFormat.__proto__ || (0, _getPrototypeOf2.default)(WordFormat)).apply(this, arguments));
	        }

	        return WordFormat;
	    }(_enumify.Enum);

	    exports.default = WordFormat;


	    WordFormat.initEnum({
	        BOLD: {
	            startSymbol: '**',
	            endSymbol: '**'
	        },
	        OBLIQUE: {
	            startSymbol: '*',
	            endSymbol: '*'
	        },
	        BOLD_OBLIQUE: {
	            startSymbol: '**_',
	            endSymbol: '_**'
	        }
	    });
	});

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(330), __webpack_require__(304), __webpack_require__(331), __webpack_require__(335), __webpack_require__(338), __webpack_require__(347), __webpack_require__(327)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('../ToLineItemTransformation.jsx'), require('../../ParseResult.jsx'), require('../../LineItem.jsx'), require('../../TextItemLineGrouper.jsx'), require('../../LineConverter.jsx'), require('../../markdown/BlockType.jsx'), require('../../Annotation.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.ToLineItemTransformation, global.ParseResult, global.LineItem, global.TextItemLineGrouper, global.LineConverter, global.BlockType, global.Annotation);
	        global.CompactLines = mod.exports;
	    }
	})(this, function (exports, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _ToLineItemTransformation, _ParseResult, _LineItem, _TextItemLineGrouper, _LineConverter, _BlockType, _Annotation) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _ToLineItemTransformation2 = _interopRequireDefault(_ToLineItemTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _LineItem2 = _interopRequireDefault(_LineItem);

	    var _TextItemLineGrouper2 = _interopRequireDefault(_TextItemLineGrouper);

	    var _LineConverter2 = _interopRequireDefault(_LineConverter);

	    var _BlockType2 = _interopRequireDefault(_BlockType);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var CompactLines = function (_ToLineItemTransforma) {
	        (0, _inherits3.default)(CompactLines, _ToLineItemTransforma);

	        function CompactLines() {
	            (0, _classCallCheck3.default)(this, CompactLines);
	            return (0, _possibleConstructorReturn3.default)(this, (CompactLines.__proto__ || (0, _getPrototypeOf2.default)(CompactLines)).call(this, "Compact To Lines"));
	        }

	        (0, _createClass3.default)(CompactLines, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                var _parseResult$globals = parseResult.globals,
	                    mostUsedDistance = _parseResult$globals.mostUsedDistance,
	                    fontToFormats = _parseResult$globals.fontToFormats;

	                var foundFootnotes = [];
	                var foundFootnoteLinks = [];
	                var linkCount = 0;
	                var formattedWords = 0;

	                var lineGrouper = new _TextItemLineGrouper2.default({
	                    mostUsedDistance: mostUsedDistance
	                });
	                var lineCompactor = new _LineConverter2.default(fontToFormats);

	                parseResult.pages.forEach(function (page) {
	                    if (page.items.length > 0) {
	                        var lineItems = [];
	                        var textItemsGroupedByLine = lineGrouper.group(page.items);
	                        textItemsGroupedByLine.forEach(function (lineTextItems) {
	                            var lineItem = lineCompactor.compact(lineTextItems);
	                            if (lineTextItems.length > 1) {
	                                lineItem.annotation = _Annotation.ADDED_ANNOTATION;
	                                lineTextItems.forEach(function (item) {
	                                    item.annotation = _Annotation.REMOVED_ANNOTATION;
	                                    lineItems.push(new _LineItem2.default((0, _extends3.default)({}, item)));
	                                });
	                            }
	                            if (lineItem.words.length == 0) {
	                                lineItem.annotation = _Annotation.REMOVED_ANNOTATION;
	                            }
	                            lineItems.push(lineItem);

	                            if (lineItem.parsedElements.formattedWords) {
	                                formattedWords += lineItem.parsedElements.formattedWords;
	                            }
	                            if (lineItem.parsedElements.containLinks > 0) {
	                                linkCount++;
	                            }
	                            if (lineItem.parsedElements.footnoteLinks.length > 0) {
	                                var footnoteLinks = lineItem.parsedElements.footnoteLinks.map(function (footnoteLink) {
	                                    return _react2.default.createElement(
	                                        'span',
	                                        { key: footnoteLink },
	                                        _react2.default.createElement(
	                                            'a',
	                                            { href: "#Page " + (page.index + 1) },
	                                            footnoteLink
	                                        ),
	                                        ','
	                                    );
	                                });
	                                foundFootnoteLinks.push.apply(foundFootnoteLinks, footnoteLinks);
	                            }
	                            if (lineItem.parsedElements.footnotes.length > 0) {
	                                lineItem.type = _BlockType2.default.FOOTNOTES;
	                                var footnotes = lineItem.parsedElements.footnotes.map(function (footnote) {
	                                    return _react2.default.createElement(
	                                        'span',
	                                        { key: footnote },
	                                        _react2.default.createElement(
	                                            'a',
	                                            { href: "#Page " + (page.index + 1) },
	                                            footnote
	                                        ),
	                                        ','
	                                    );
	                                });
	                                foundFootnotes.push.apply(foundFootnotes, footnotes);
	                            }
	                        });
	                        page.items = lineItems;
	                    }
	                });

	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    messages: ['Detected ' + formattedWords + ' formatted words', 'Found ' + linkCount + ' links', _react2.default.createElement(
	                        'span',
	                        null,
	                        'Detected ',
	                        foundFootnoteLinks.length,
	                        ' footnotes links: [',
	                        foundFootnoteLinks,
	                        ']'
	                    ), _react2.default.createElement(
	                        'span',
	                        null,
	                        'Detected ',
	                        foundFootnotes.length,
	                        ' footnotes: [',
	                        foundFootnotes,
	                        ']'
	                    )]
	                }));
	            }
	        }]);
	        return CompactLines;
	    }(_ToLineItemTransformation2.default);

	    exports.default = CompactLines;
	});

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(314), __webpack_require__(304), __webpack_require__(331), __webpack_require__(333), __webpack_require__(327)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./Transformation.jsx'), require('../ParseResult.jsx'), require('../LineItem.jsx'), require('../../components/debug/LineItemPageView.jsx'), require('../Annotation.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.Transformation, global.ParseResult, global.LineItem, global.LineItemPageView, global.Annotation);
	        global.ToLineItemTransformation = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _Transformation2, _ParseResult, _LineItem, _LineItemPageView, _Annotation) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _Transformation3 = _interopRequireDefault(_Transformation2);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _LineItem2 = _interopRequireDefault(_LineItem);

	    var _LineItemPageView2 = _interopRequireDefault(_LineItemPageView);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var ToLineItemTransformation = function (_Transformation) {
	        (0, _inherits3.default)(ToLineItemTransformation, _Transformation);

	        function ToLineItemTransformation(name) {
	            (0, _classCallCheck3.default)(this, ToLineItemTransformation);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (ToLineItemTransformation.__proto__ || (0, _getPrototypeOf2.default)(ToLineItemTransformation)).call(this, name, _LineItem2.default.name));

	            if (_this.constructor === ToLineItemTransformation) {
	                throw new TypeError("Can not construct abstract class.");
	            }
	            _this.showWhitespaces = false;
	            return _this;
	        }

	        (0, _createClass3.default)(ToLineItemTransformation, [{
	            key: 'showModificationCheckbox',
	            value: function showModificationCheckbox() {
	                return true;
	            }
	        }, {
	            key: 'createPageView',
	            value: function createPageView(page, modificationsOnly) {
	                return _react2.default.createElement(_LineItemPageView2.default, {
	                    key: page.index,
	                    page: page,
	                    modificationsOnly: modificationsOnly,
	                    showWhitespaces: this.showWhitespaces });
	            }
	        }, {
	            key: 'completeTransform',
	            value: function completeTransform(parseResult) {
	                // The usual cleanup
	                parseResult.messages = [];
	                parseResult.pages.forEach(function (page) {
	                    page.items = page.items.filter(function (item) {
	                        return !item.annotation || item.annotation !== _Annotation.REMOVED_ANNOTATION;
	                    });
	                    page.items.forEach(function (item) {
	                        return item.annotation = null;
	                    });
	                });
	                return parseResult;
	            }
	        }]);
	        return ToLineItemTransformation;
	    }(_Transformation3.default);

	    exports.default = ToLineItemTransformation;
	});

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(241), __webpack_require__(332)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('./PageItem.jsx'), require('./Word.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.PageItem, global.Word);
	        global.LineItem = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _PageItem2, _Word) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _PageItem3 = _interopRequireDefault(_PageItem2);

	    var _Word2 = _interopRequireDefault(_Word);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var LineItem = function (_PageItem) {
	        (0, _inherits3.default)(LineItem, _PageItem);

	        function LineItem(options) {
	            (0, _classCallCheck3.default)(this, LineItem);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (LineItem.__proto__ || (0, _getPrototypeOf2.default)(LineItem)).call(this, options));

	            _this.x = options.x;
	            _this.y = options.y;
	            _this.width = options.width;
	            _this.height = options.height;
	            _this.words = options.words || [];
	            if (options.text && !options.words) {
	                _this.words = options.text.split(" ").filter(function (string) {
	                    return string.trim().length > 0;
	                }).map(function (wordAsString) {
	                    return new _Word2.default({
	                        string: wordAsString
	                    });
	                });
	            }
	            return _this;
	        }

	        (0, _createClass3.default)(LineItem, [{
	            key: 'text',
	            value: function text() {
	                return this.wordStrings().join(" ");
	            }
	        }, {
	            key: 'wordStrings',
	            value: function wordStrings() {
	                return this.words.map(function (word) {
	                    return word.string;
	                });
	            }
	        }]);
	        return LineItem;
	    }(_PageItem3.default);

	    exports.default = LineItem;
	});

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require("babel-runtime/helpers/classCallCheck"));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck);
	        global.Word = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2) {
	    "use strict";

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var Word = function Word(options) {
	        (0, _classCallCheck3.default)(this, Word);

	        this.string = options.string;
	        this.type = options.type; // WordType
	        this.format = options.format; // WordFormat
	    };

	    exports.default = Word;
	});

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(316), __webpack_require__(334)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./PageView.jsx'), require('./LineItemTable.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.PageView, global.LineItemTable);
	        global.LineItemPageView = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _PageView2, _LineItemTable) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _PageView3 = _interopRequireDefault(_PageView2);

	    var _LineItemTable2 = _interopRequireDefault(_LineItemTable);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var LineItemPageView = function (_PageView) {
	        (0, _inherits3.default)(LineItemPageView, _PageView);

	        function LineItemPageView() {
	            (0, _classCallCheck3.default)(this, LineItemPageView);
	            return (0, _possibleConstructorReturn3.default)(this, (LineItemPageView.__proto__ || (0, _getPrototypeOf2.default)(LineItemPageView)).apply(this, arguments));
	        }

	        (0, _createClass3.default)(LineItemPageView, [{
	            key: 'createItemViews',
	            value: function createItemViews(items, showWhitespaces) {
	                return _react2.default.createElement(_LineItemTable2.default, { items: items, showWhitespaces: showWhitespaces });
	            }
	        }]);
	        return LineItemPageView;
	    }(_PageView3.default);

	    exports.default = LineItemPageView;
	});

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(318)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('react-bootstrap/lib/Table'));
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.Table);
	    global.LineItemTable = mod.exports;
	  }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _Table) {
	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	  var _createClass3 = _interopRequireDefault(_createClass2);

	  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	  var _inherits3 = _interopRequireDefault(_inherits2);

	  var _react2 = _interopRequireDefault(_react);

	  var _Table2 = _interopRequireDefault(_Table);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  var LineItemTable = function (_React$Component) {
	    (0, _inherits3.default)(LineItemTable, _React$Component);

	    function LineItemTable() {
	      (0, _classCallCheck3.default)(this, LineItemTable);
	      return (0, _possibleConstructorReturn3.default)(this, (LineItemTable.__proto__ || (0, _getPrototypeOf2.default)(LineItemTable)).apply(this, arguments));
	    }

	    (0, _createClass3.default)(LineItemTable, [{
	      key: 'render',
	      value: function render() {
	        var _props = this.props,
	            showWhitespaces = _props.showWhitespaces,
	            items = _props.items;

	        var tableHeader = _react2.default.createElement(
	          'thead',
	          null,
	          _react2.default.createElement(
	            'tr',
	            null,
	            _react2.default.createElement(
	              'th',
	              null,
	              '#'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Text'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'X'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Y'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Width'
	            ),
	            _react2.default.createElement(
	              'th',
	              null,
	              'Height'
	            )
	          )
	        );

	        var itemRows = items.map(function (item, i) {
	          return _react2.default.createElement(
	            'tr',
	            { key: i, style: item.annotation ? {
	                color: item.annotation.color
	              } : null },
	            _react2.default.createElement(
	              'td',
	              null,
	              _react2.default.createElement(
	                'div',
	                { style: { textAlign: 'center' } },
	                i
	              ),
	              _react2.default.createElement(
	                'div',
	                { style: { textAlign: 'center' } },
	                item.annotation ? item.annotation.category : ''
	              ),
	              _react2.default.createElement(
	                'div',
	                { style: { textAlign: 'center', color: 'brown' } },
	                item.type ? item.type.name : ''
	              ),
	              _react2.default.createElement(
	                'div',
	                { style: { textAlign: 'center', color: 'orange' } },
	                item.parsedElements && item.parsedElements.footnoteLinks.length > 0 ? _react2.default.createElement(
	                  'div',
	                  null,
	                  'Footnote-Link'
	                ) : '',
	                item.parsedElements && item.parsedElements.containLinks ? _react2.default.createElement(
	                  'div',
	                  null,
	                  'Link'
	                ) : '',
	                item.lineFormat ? _react2.default.createElement(
	                  'div',
	                  null,
	                  item.lineFormat.name
	                ) : '',
	                item.unopenedFormat ? _react2.default.createElement(
	                  'div',
	                  null,
	                  'Unopened',
	                  ' ' + item.unopenedFormat.name
	                ) : '',
	                item.parsedElements && item.parsedElements.inlineFormats > 0 ? _react2.default.createElement(
	                  'div',
	                  null,
	                  item.parsedElements.inlineFormats + 'x Bold/Italic'
	                ) : '',
	                item.unclosedFormat ? _react2.default.createElement(
	                  'div',
	                  null,
	                  'Unclosed',
	                  ' ' + item.unclosedFormat.name
	                ) : ''
	              )
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              showWhitespaces ? _react2.default.createElement(
	                'pre',
	                { style: item.annotation ? {
	                    color: item.annotation.color,
	                    display: 'inline-block'
	                  } : {
	                    display: 'inline-block'
	                  } },
	                item.text()
	              ) : item.text()
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              item.x
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              item.y
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              item.width
	            ),
	            _react2.default.createElement(
	              'td',
	              null,
	              item.height
	            )
	          );
	        });

	        return _react2.default.createElement(
	          _Table2.default,
	          { responsive: true, condensed: true, bordered: true },
	          tableHeader,
	          _react2.default.createElement(
	            'tbody',
	            null,
	            itemRows
	          )
	        );
	      }
	    }]);
	    return LineItemTable;
	  }(_react2.default.Component);

	  LineItemTable.propTypes = {
	    items: _react2.default.PropTypes.array.isRequired,
	    showWhitespaces: _react2.default.PropTypes.bool
	  };
	  exports.default = LineItemTable;
	});

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(240), __webpack_require__(336)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('./TextItem.jsx'), require('../pageItemFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck, global.createClass, global.TextItem, global.pageItemFunctions);
	        global.TextItemLineGrouper = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2, _createClass2, _TextItem, _pageItemFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _TextItem2 = _interopRequireDefault(_TextItem);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var TextItemLineGrouper = function () {
	        function TextItemLineGrouper(options) {
	            (0, _classCallCheck3.default)(this, TextItemLineGrouper);

	            this.mostUsedDistance = options.mostUsedDistance || 12;
	        }

	        // returns a CombineResult 


	        (0, _createClass3.default)(TextItemLineGrouper, [{
	            key: 'group',
	            value: function group(textItems) {
	                return this.groupItemsByLine(textItems);
	            }
	        }, {
	            key: 'groupItemsByLine',
	            value: function groupItemsByLine(textItems) {
	                var _this = this;

	                var lines = [];
	                var currentLine = [];
	                textItems.forEach(function (item) {
	                    if (currentLine.length > 0 && Math.abs(currentLine[0].y - item.y) >= _this.mostUsedDistance / 2) {
	                        lines.push(currentLine);
	                        currentLine = [];
	                    }
	                    currentLine.push(item);
	                });
	                lines.push(currentLine);

	                lines.forEach(function (lineItems) {
	                    // we can't trust order of occurence, esp. footnoteLinks like to come last
	                    (0, _pageItemFunctions.sortByX)(lineItems);
	                });
	                return lines;
	            }
	        }]);
	        return TextItemLineGrouper;
	    }();

	    exports.default = TextItemLineGrouper;
	});

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(241), __webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('./models/PageItem.jsx'), require('./models/LineItemBlock.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.PageItem, global.LineItemBlock);
	        global.pageItemFunctions = mod.exports;
	    }
	})(this, function (exports, _PageItem, _LineItemBlock) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });
	    exports.minXFromBlocks = minXFromBlocks;
	    exports.minXFromPageItems = minXFromPageItems;
	    exports.sortByX = sortByX;
	    exports.sortCopyByX = sortCopyByX;

	    var _PageItem2 = _interopRequireDefault(_PageItem);

	    var _LineItemBlock2 = _interopRequireDefault(_LineItemBlock);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    function minXFromBlocks(blocks) {
	        var minX = 999;
	        blocks.forEach(function (block) {
	            block.items.forEach(function (item) {
	                minX = Math.min(minX, item.x);
	            });
	        });
	        if (minX == 999) {
	            return null;
	        }
	        return minX;
	    }

	    function minXFromPageItems(items) {
	        var minX = 999;
	        items.forEach(function (item) {
	            minX = Math.min(minX, item.x);
	        });
	        if (minX == 999) {
	            return null;
	        }
	        return minX;
	    }

	    function sortByX(items) {
	        items.sort(function (a, b) {
	            return a.x - b.x;
	        });
	    }

	    function sortCopyByX(items) {
	        var copy = items.concat();
	        sortByX(copy);
	        return copy;
	    }
	});

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(241), __webpack_require__(331)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('./PageItem.jsx'), require('./LineItem.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.PageItem, global.LineItem);
	        global.LineItemBlock = mod.exports;
	    }
	})(this, function (exports, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _PageItem2, _LineItem) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _PageItem3 = _interopRequireDefault(_PageItem2);

	    var _LineItem2 = _interopRequireDefault(_LineItem);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var LineItemBlock = function (_PageItem) {
	        (0, _inherits3.default)(LineItemBlock, _PageItem);

	        function LineItemBlock(options) {
	            (0, _classCallCheck3.default)(this, LineItemBlock);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (LineItemBlock.__proto__ || (0, _getPrototypeOf2.default)(LineItemBlock)).call(this, options));

	            _this.items = [];
	            if (options.items) {
	                options.items.forEach(function (item) {
	                    return _this.addItem(item);
	                });
	            }
	            return _this;
	        }

	        (0, _createClass3.default)(LineItemBlock, [{
	            key: 'addItem',
	            value: function addItem(item) {
	                if (this.type && item.type && this.type !== item.type) {
	                    throw 'Adding item of type ' + item.type + ' to block of type ' + this.type;
	                }

	                if (!this.type) {
	                    this.type = item.type;
	                }
	                if (item.parsedElements) {
	                    if (this.parsedElements) {
	                        this.parsedElements.add(item.parsedElements);
	                    } else {
	                        this.parsedElements = item.parsedElements;
	                    }
	                }
	                var copiedItem = new _LineItem2.default((0, _extends3.default)({}, item));
	                copiedItem.type = null;
	                this.items.push(copiedItem);
	            }
	        }]);
	        return LineItemBlock;
	    }(_PageItem3.default);

	    exports.default = LineItemBlock;
	});

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(339), __webpack_require__(228), __webpack_require__(168), __webpack_require__(183), __webpack_require__(160), __webpack_require__(1), __webpack_require__(2), __webpack_require__(240), __webpack_require__(332), __webpack_require__(344), __webpack_require__(328), __webpack_require__(331), __webpack_require__(345), __webpack_require__(241), __webpack_require__(346), __webpack_require__(336)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/toConsumableArray'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('babel-runtime/helpers/extends'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('./TextItem.jsx'), require('./Word.jsx'), require('./markdown/WordType.jsx'), require('./markdown/WordFormat.jsx'), require('./LineItem.jsx'), require('./StashingStream.jsx'), require('./PageItem.jsx'), require('../stringFunctions.jsx'), require('../pageItemFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.toConsumableArray, global.getPrototypeOf, global.possibleConstructorReturn, global.inherits, global._extends, global.classCallCheck, global.createClass, global.TextItem, global.Word, global.WordType, global.WordFormat, global.LineItem, global.StashingStream, global.PageItem, global.stringFunctions, global.pageItemFunctions);
	        global.LineConverter = mod.exports;
	    }
	})(this, function (exports, _toConsumableArray2, _getPrototypeOf, _possibleConstructorReturn2, _inherits2, _extends2, _classCallCheck2, _createClass2, _TextItem, _Word, _WordType, _WordFormat, _LineItem, _StashingStream2, _PageItem, _stringFunctions, _pageItemFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _TextItem2 = _interopRequireDefault(_TextItem);

	    var _Word2 = _interopRequireDefault(_Word);

	    var _WordType2 = _interopRequireDefault(_WordType);

	    var _WordFormat2 = _interopRequireDefault(_WordFormat);

	    var _LineItem2 = _interopRequireDefault(_LineItem);

	    var _StashingStream3 = _interopRequireDefault(_StashingStream2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var LineConverter = function () {
	        function LineConverter(fontToFormats) {
	            (0, _classCallCheck3.default)(this, LineConverter);

	            this.fontToFormats = fontToFormats;
	        }

	        // returns a CombineResult 


	        (0, _createClass3.default)(LineConverter, [{
	            key: 'compact',
	            value: function compact(textItems) {
	                // we can't trust order of occurence, esp. footnoteLinks like to come last
	                (0, _pageItemFunctions.sortByX)(textItems);

	                var wordStream = new WordDetectionStream(this.fontToFormats);
	                wordStream.consumeAll(textItems.map(function (item) {
	                    return new _TextItem2.default((0, _extends3.default)({}, item));
	                }));
	                var words = wordStream.complete();

	                var maxHeight = 0;
	                var widthSum = 0;
	                textItems.forEach(function (item) {
	                    maxHeight = Math.max(maxHeight, item.height);
	                    widthSum += item.width;
	                });
	                return new _LineItem2.default({
	                    x: textItems[0].x,
	                    y: textItems[0].y,
	                    height: maxHeight,
	                    width: widthSum,
	                    words: words,
	                    parsedElements: new _PageItem.ParsedElements({
	                        footnoteLinks: wordStream.footnoteLinks,
	                        footnotes: wordStream.footnotes,
	                        containLinks: wordStream.containLinks,
	                        formattedWords: wordStream.formattedWords
	                    })
	                });
	            }
	        }]);
	        return LineConverter;
	    }();

	    exports.default = LineConverter;

	    var WordDetectionStream = function (_StashingStream) {
	        (0, _inherits3.default)(WordDetectionStream, _StashingStream);

	        function WordDetectionStream(fontToFormats) {
	            (0, _classCallCheck3.default)(this, WordDetectionStream);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (WordDetectionStream.__proto__ || (0, _getPrototypeOf2.default)(WordDetectionStream)).call(this));

	            _this.fontToFormats = fontToFormats;
	            _this.footnoteLinks = [];
	            _this.footnotes = [];
	            _this.formattedWords = 0;
	            _this.containLinks = false;

	            _this.firstY;
	            _this.stashedNumber = false;
	            _this.currentItem;
	            return _this;
	        }

	        (0, _createClass3.default)(WordDetectionStream, [{
	            key: 'shouldStash',
	            value: function shouldStash(item) {
	                // eslint-disable-line no-unused-vars
	                if (!this.firstY) {
	                    this.firstY = item.y;
	                }
	                this.currentItem = item;
	                return true;
	            }
	        }, {
	            key: 'onPushOnStash',
	            value: function onPushOnStash(item) {
	                // eslint-disable-line no-unused-vars
	                this.stashedNumber = (0, _stringFunctions.isNumber)(item.text.trim());
	            }
	        }, {
	            key: 'doMatchesStash',
	            value: function doMatchesStash(lastItem, item) {
	                var lastItemFormat = this.fontToFormats.get(lastItem.font);
	                var itemFormat = this.fontToFormats.get(item.font);
	                if (lastItemFormat !== itemFormat) {
	                    return false;
	                }
	                var itemIsANumber = (0, _stringFunctions.isNumber)(item.text.trim());
	                return this.stashedNumber == itemIsANumber;
	            }
	        }, {
	            key: 'doFlushStash',
	            value: function doFlushStash(stash, results) {
	                if (this.stashedNumber) {
	                    var joinedNumber = stash.map(function (item) {
	                        return item.text;
	                    }).join('').trim();
	                    if (stash[0].y > this.firstY) {
	                        // footnote link
	                        results.push(new _Word2.default({
	                            string: '' + joinedNumber,
	                            type: _WordType2.default.FOOTNOTE_LINK
	                        }));
	                        this.footnoteLinks.push(parseInt(joinedNumber));
	                    } else if (this.currentItem && this.currentItem.y < stash[0].y) {
	                        // footnote
	                        results.push(new _Word2.default({
	                            string: '' + joinedNumber,
	                            type: _WordType2.default.FOOTNOTE
	                        }));
	                        this.footnotes.push(joinedNumber);
	                    } else {
	                        this.copyStashItemsAsText(stash, results);
	                    }
	                } else {
	                    this.copyStashItemsAsText(stash, results);
	                }
	            }
	        }, {
	            key: 'copyStashItemsAsText',
	            value: function copyStashItemsAsText(stash, results) {
	                var format = this.fontToFormats.get(stash[0].font);
	                results.push.apply(results, (0, _toConsumableArray3.default)(this.itemsToWords(stash, format)));
	            }
	        }, {
	            key: 'itemsToWords',
	            value: function itemsToWords(items, formatName) {
	                var _this2 = this;

	                var combinedText = combineText(items);
	                var words = combinedText.split(' ');
	                var format = formatName ? _WordFormat2.default.enumValueOf(formatName) : null;
	                return words.filter(function (w) {
	                    return w.trim().length > 0;
	                }).map(function (word) {
	                    var type = null;
	                    if (word.startsWith('http:')) {
	                        _this2.containLinks = true;
	                        type = _WordType2.default.LINK;
	                    } else if (word.startsWith('www.')) {
	                        _this2.containLinks = true;
	                        word = 'http://' + word;
	                        type = _WordType2.default.LINK;
	                    }

	                    if (format) {
	                        _this2.formattedWords++;
	                    }
	                    return new _Word2.default({
	                        string: word,
	                        type: type,
	                        format: format
	                    });
	                });
	            }
	        }]);
	        return WordDetectionStream;
	    }(_StashingStream3.default);

	    function combineText(textItems) {
	        var text = '';
	        var lastItem;
	        textItems.forEach(function (textItem) {
	            var textToAdd = textItem.text;
	            if (!text.endsWith(' ') && !textToAdd.startsWith(' ')) {
	                if (lastItem) {
	                    var xDistance = textItem.x - lastItem.x - lastItem.width;
	                    if (xDistance > 5) {
	                        text += ' ';
	                    }
	                } else {
	                    if ((0, _stringFunctions.isListItemCharacter)(textItem.text)) {
	                        textToAdd += ' ';
	                    }
	                }
	            }
	            text += textToAdd;
	            lastItem = textItem;
	        });
	        return text;
	    }
	});

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _from = __webpack_require__(340);

	var _from2 = _interopRequireDefault(_from);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(341), __esModule: true };

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(25);
	__webpack_require__(342);
	module.exports = __webpack_require__(8).Array.from;


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var ctx = __webpack_require__(9);
	var $export = __webpack_require__(6);
	var toObject = __webpack_require__(53);
	var call = __webpack_require__(62);
	var isArrayIter = __webpack_require__(63);
	var toLength = __webpack_require__(43);
	var createProperty = __webpack_require__(343);
	var getIterFn = __webpack_require__(64);

	$export($export.S + $export.F * !__webpack_require__(74)(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(12);
	var createDesc = __webpack_require__(20);

	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(168), __webpack_require__(183), __webpack_require__(306)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('enumify'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.possibleConstructorReturn, global.inherits, global.enumify);
	        global.WordType = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _possibleConstructorReturn2, _inherits2, _enumify) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });
	    exports.linesToText = linesToText;

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var WordType = function (_Enum) {
	        (0, _inherits3.default)(WordType, _Enum);

	        function WordType() {
	            (0, _classCallCheck3.default)(this, WordType);
	            return (0, _possibleConstructorReturn3.default)(this, (WordType.__proto__ || (0, _getPrototypeOf2.default)(WordType)).apply(this, arguments));
	        }

	        return WordType;
	    }(_enumify.Enum);

	    exports.default = WordType;


	    WordType.initEnum({
	        LINK: {
	            toText: function toText(string) {
	                return '[' + string + '](' + string + ')';
	            }
	        }
	    });

	    function linesToText(lineItems, disableInlineFormats) {
	        var text = '';
	        var openFormat;

	        var closeFormat = function closeFormat() {
	            text += openFormat.endSymbol;
	            openFormat = null;
	        };

	        lineItems.forEach(function (line, lineIndex) {
	            line.words.forEach(function (word, i) {
	                var wordType = word.type;
	                var wordFormat = word.format;
	                if (openFormat && (!wordFormat || wordFormat !== openFormat)) {
	                    closeFormat();
	                }

	                if (i > 0 && !(wordType && wordType.attachWithoutWhitespace) && !isPunctationCharacter(word.string)) {
	                    text += ' ';
	                }

	                if (wordFormat && !openFormat && !disableInlineFormats) {
	                    openFormat = wordFormat;
	                    text += openFormat.startSymbol;
	                }

	                if (wordType && (!disableInlineFormats || wordType.plainTextFormat)) {
	                    text += wordType.toText(word.string);
	                } else {
	                    text += word.string;
	                }
	            });
	            if (openFormat && (lineIndex == lineItems.length - 1 || firstFormat(lineItems[lineIndex + 1]) !== openFormat)) {
	                closeFormat();
	            }
	            text += '\n';
	        });
	        return text;
	    }

	    function firstFormat(lineItem) {
	        if (lineItem.words.length == 0) {
	            return null;
	        }
	        return lineItem.words[0].format;
	    }

	    function isPunctationCharacter(string) {
	        if (string.length != 1) {
	            return false;
	        }
	        return string[0] === '.' || string[0] === '!' || string[0] === '?';
	    }
	});

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck, global.createClass);
	        global.StashingStream = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2, _createClass2) {
	    "use strict";

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var StashingStream = function () {
	        function StashingStream() {
	            (0, _classCallCheck3.default)(this, StashingStream);

	            if (this.constructor === StashingStream) {
	                throw new TypeError("Can not construct abstract class.");
	            }
	            this.results = [];
	            this.stash = [];
	        }

	        (0, _createClass3.default)(StashingStream, [{
	            key: "consumeAll",
	            value: function consumeAll(items) {
	                var _this = this;

	                items.forEach(function (item) {
	                    return _this.consume(item);
	                });
	            }
	        }, {
	            key: "consume",
	            value: function consume(item) {
	                if (this.shouldStash(item)) {
	                    if (!this.matchesStash(item)) {
	                        this.flushStash();
	                    }
	                    this.pushOnStash(item);
	                } else {
	                    if (this.stash.length > 0) {
	                        this.flushStash();
	                    }
	                    this.results.push(item);
	                }
	            }
	        }, {
	            key: "pushOnStash",
	            value: function pushOnStash(item) {
	                this.onPushOnStash(item);
	                this.stash.push(item);
	            }
	        }, {
	            key: "complete",
	            value: function complete() {
	                if (this.stash.length > 0) {
	                    this.flushStash();
	                }
	                return this.results;
	            }
	        }, {
	            key: "matchesStash",
	            value: function matchesStash(item) {
	                if (this.stash.length == 0) {
	                    return true;
	                }
	                var lastItem = this.stash[this.stash.length - 1];
	                return this.doMatchesStash(lastItem, item);
	            }
	        }, {
	            key: "flushStash",
	            value: function flushStash() {
	                if (this.stash.length > 0) {
	                    this.doFlushStash(this.stash, this.results);
	                    this.stash = [];
	                }
	            }
	        }, {
	            key: "onPushOnStash",
	            value: function onPushOnStash(item) {// eslint-disable-line no-unused-vars
	                //sub-classes may override
	            }
	        }, {
	            key: "shouldStash",
	            value: function shouldStash(item) {
	                throw new TypeError("Do not call abstract method foo from child." + item);
	            }
	        }, {
	            key: "doMatchesStash",
	            value: function doMatchesStash(lastItem, item) {
	                throw new TypeError("Do not call abstract method foo from child." + lastItem + item);
	            }
	        }, {
	            key: "doFlushStash",
	            value: function doFlushStash(stash, results) {
	                throw new TypeError("Do not call abstract method foo from child." + stash + results);
	            }
	        }]);
	        return StashingStream;
	    }();

	    exports.default = StashingStream;
	});

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(339), __webpack_require__(98)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/toConsumableArray'), require('babel-runtime/core-js/set'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.toConsumableArray, global.set);
	        global.stringFunctions = mod.exports;
	    }
	})(this, function (exports, _toConsumableArray2, _set) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });
	    exports.isDigit = isDigit;
	    exports.isNumber = isNumber;
	    exports.hasOnly = hasOnly;
	    exports.hasUpperCaseCharacterInMiddleOfWord = hasUpperCaseCharacterInMiddleOfWord;
	    exports.normalizedCharCodeArray = normalizedCharCodeArray;
	    exports.charCodeArray = charCodeArray;
	    exports.removeLeadingWhitespaces = removeLeadingWhitespaces;
	    exports.removeTrailingWhitespaces = removeTrailingWhitespaces;
	    exports.prefixAfterWhitespace = prefixAfterWhitespace;
	    exports.suffixBeforeWhitespace = suffixBeforeWhitespace;
	    exports.isListItemCharacter = isListItemCharacter;
	    exports.isListItem = isListItem;
	    exports.isNumberedListItem = isNumberedListItem;
	    exports.wordMatch = wordMatch;

	    var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	    var _set2 = _interopRequireDefault(_set);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var MIN_DIGIT_CHAR_CODE = 48;
	    var MAX_DIGIT_CHAR_CODE = 57;
	    var WHITESPACE_CHAR_CODE = 32;
	    var TAB_CHAR_CODE = 9;
	    var DOT_CHAR_CODE = 46;

	    function isDigit(charCode) {
	        return charCode >= MIN_DIGIT_CHAR_CODE && charCode <= MAX_DIGIT_CHAR_CODE;
	    }

	    function isNumber(string) {
	        for (var i = 0; i < string.length; i++) {
	            var charCode = string.charCodeAt(i);
	            if (!isDigit(charCode)) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function hasOnly(string, char) {
	        var charCode = char.charCodeAt(0);
	        for (var i = 0; i < string.length; i++) {
	            var aCharCode = string.charCodeAt(i);
	            if (aCharCode != charCode) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function hasUpperCaseCharacterInMiddleOfWord(text) {
	        var beginningOfWord = true;
	        for (var i = 0; i < text.length; i++) {
	            var character = text.charAt(i);
	            if (character === ' ') {
	                beginningOfWord = true;
	            } else {
	                if (!beginningOfWord && isNaN(character * 1) && character == character.toUpperCase() && character.toUpperCase() != character.toLowerCase()) {
	                    return true;
	                }
	                beginningOfWord = false;
	            }
	        }
	        return false;
	    }

	    // Remove whitespace/dots + to uppercase
	    function normalizedCharCodeArray(string) {
	        string = string.toUpperCase();
	        return charCodeArray(string).filter(function (charCode) {
	            return charCode != WHITESPACE_CHAR_CODE && charCode != TAB_CHAR_CODE && charCode != DOT_CHAR_CODE;
	        });
	    }

	    function charCodeArray(string) {
	        var charCodes = [];
	        for (var i = 0; i < string.length; i++) {
	            charCodes.push(string.charCodeAt(i));
	        }
	        return charCodes;
	    }

	    function removeLeadingWhitespaces(string) {
	        while (string.charCodeAt(0) === WHITESPACE_CHAR_CODE) {
	            string = string.substring(1, string.length);
	        }
	        return string;
	    }

	    function removeTrailingWhitespaces(string) {
	        while (string.charCodeAt(string.length - 1) === WHITESPACE_CHAR_CODE) {
	            string = string.substring(0, string.length - 1);
	        }
	        return string;
	    }

	    function prefixAfterWhitespace(prefix, string) {
	        if (string.charCodeAt(0) == WHITESPACE_CHAR_CODE) {
	            string = removeLeadingWhitespaces(string);
	            return ' ' + prefix + string;
	        } else {
	            return prefix + string;
	        }
	    }

	    function suffixBeforeWhitespace(string, suffix) {
	        if (string.charCodeAt(string.length - 1) == WHITESPACE_CHAR_CODE) {
	            string = removeTrailingWhitespaces(string);
	            return string + suffix + ' ';
	        } else {
	            return string + suffix;
	        }
	    }

	    function isListItemCharacter(string) {
	        if (string.length > 1) {
	            return false;
	        }
	        var char = string.charAt(0);
	        return char === '-' || char === '•' || char === '–';
	    }

	    function isListItem(string) {
	        return (/^[\s]*[-•–][\s].*$/g.test(string)
	        );
	    }

	    function isNumberedListItem(string) {
	        return (/^[\s]*[\d]{1,4}[a-z][\)].*$/g.test(string)
	        );
	    }

	    function wordMatch(string1, string2) {
	        var words1 = new _set2.default(string1.toUpperCase().split(' '));
	        var words2 = new _set2.default(string2.toUpperCase().split(' '));
	        var intersection = new _set2.default([].concat((0, _toConsumableArray3.default)(words1)).filter(function (x) {
	            return words2.has(x);
	        }));
	        return intersection.size / Math.max(words1.size, words2.size);
	    }
	});

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(168), __webpack_require__(183), __webpack_require__(306), __webpack_require__(344), __webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('enumify'), require('./WordType.jsx'), require('../LineItemBlock.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.possibleConstructorReturn, global.inherits, global.enumify, global.WordType, global.LineItemBlock);
	        global.BlockType = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _possibleConstructorReturn2, _inherits2, _enumify, _WordType, _LineItemBlock) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });
	    exports.isHeadline = isHeadline;
	    exports.blockToText = blockToText;
	    exports.headlineByLevel = headlineByLevel;

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _LineItemBlock2 = _interopRequireDefault(_LineItemBlock);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var BlockType = function (_Enum) {
	        (0, _inherits3.default)(BlockType, _Enum);

	        function BlockType() {
	            (0, _classCallCheck3.default)(this, BlockType);
	            return (0, _possibleConstructorReturn3.default)(this, (BlockType.__proto__ || (0, _getPrototypeOf2.default)(BlockType)).apply(this, arguments));
	        }

	        return BlockType;
	    }(_enumify.Enum);

	    exports.default = BlockType;


	    //TODO rename to BlockType

	    BlockType.initEnum({
	        H1: {
	            headline: true,
	            headlineLevel: 1,
	            toText: function toText(block) {
	                return '# ' + (0, _WordType.linesToText)(block.items, true);
	            }
	        },
	        H2: {
	            headline: true,
	            headlineLevel: 2,
	            toText: function toText(block) {
	                return '## ' + (0, _WordType.linesToText)(block.items, true);
	            }
	        },
	        H3: {
	            headline: true,
	            headlineLevel: 3,
	            toText: function toText(block) {
	                return '### ' + (0, _WordType.linesToText)(block.items, true);
	            }
	        },
	        H4: {
	            headline: true,
	            headlineLevel: 4,
	            toText: function toText(block) {
	                return '#### ' + (0, _WordType.linesToText)(block.items, true);
	            }
	        },
	        H5: {
	            headline: true,
	            headlineLevel: 5,
	            toText: function toText(block) {
	                return '##### ' + (0, _WordType.linesToText)(block.items, true);
	            }
	        },
	        H6: {
	            headline: true,
	            headlineLevel: 6,
	            toText: function toText(block) {
	                return '###### ' + (0, _WordType.linesToText)(block.items, true);
	            }
	        },
	        TOC: {
	            mergeToBlock: true,
	            toText: function toText(block) {
	                return (0, _WordType.linesToText)(block.items, true);
	            }
	        },
	        FOOTNOTES: {
	            mergeToBlock: true,
	            mergeFollowingNonTypedItems: true,
	            toText: function toText(block) {
	                return (0, _WordType.linesToText)(block.items, false);
	            }
	        },
	        LIST: {
	            mergeToBlock: true,
	            mergeFollowingNonTypedItemsWithSmallDistance: true,
	            toText: function toText(block) {
	                return (0, _WordType.linesToText)(block.items, false);
	            }
	        },
	        PARAGRAPH: {
	            toText: function toText(block) {
	                return (0, _WordType.linesToText)(block.items, false);
	            }
	        }
	    });

	    function isHeadline(type) {
	        return type && type.name.length == 2 && type.name[0] === 'H';
	    }

	    function blockToText(block) {
	        if (!block.type) {
	            return (0, _WordType.linesToText)(block.items, false);
	        }
	        return block.type.toText(block);
	    }

	    function headlineByLevel(level) {
	        if (level == 1) {
	            return BlockType.H1;
	        } else if (level == 2) {
	            return BlockType.H2;
	        } else if (level == 3) {
	            return BlockType.H3;
	        } else if (level == 4) {
	            return BlockType.H4;
	        } else if (level == 5) {
	            return BlockType.H5;
	        } else if (level == 6) {
	            return BlockType.H6;
	        }
	        throw "Unsupported headline level: " + level + " (supported are 1-6)";
	    }
	});

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(339), __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(330), __webpack_require__(304), __webpack_require__(331), __webpack_require__(345), __webpack_require__(327)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/toConsumableArray'), require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToLineItemTransformation.jsx'), require('../../ParseResult.jsx'), require('../../LineItem.jsx'), require('../../StashingStream.jsx'), require('../../Annotation.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.toConsumableArray, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToLineItemTransformation, global.ParseResult, global.LineItem, global.StashingStream, global.Annotation);
	        global.VerticalToHorizontal = mod.exports;
	    }
	})(this, function (exports, _toConsumableArray2, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToLineItemTransformation, _ParseResult, _LineItem, _StashingStream2, _Annotation) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToLineItemTransformation2 = _interopRequireDefault(_ToLineItemTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _LineItem2 = _interopRequireDefault(_LineItem);

	    var _StashingStream3 = _interopRequireDefault(_StashingStream2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var VerticalToHorizontal = function (_ToLineItemTransforma) {
	        (0, _inherits3.default)(VerticalToHorizontal, _ToLineItemTransforma);

	        function VerticalToHorizontal() {
	            (0, _classCallCheck3.default)(this, VerticalToHorizontal);
	            return (0, _possibleConstructorReturn3.default)(this, (VerticalToHorizontal.__proto__ || (0, _getPrototypeOf2.default)(VerticalToHorizontal)).call(this, "Vertical to Horizontal Text"));
	        }

	        (0, _createClass3.default)(VerticalToHorizontal, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                var foundVerticals = 0;
	                parseResult.pages.forEach(function (page) {
	                    var stream = new VerticalsStream();
	                    stream.consumeAll(page.items);
	                    page.items = stream.complete();
	                    foundVerticals += stream.foundVerticals;
	                });

	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    messages: ["Converted " + foundVerticals + " verticals"]
	                }));
	            }
	        }]);
	        return VerticalToHorizontal;
	    }(_ToLineItemTransformation2.default);

	    exports.default = VerticalToHorizontal;

	    var VerticalsStream = function (_StashingStream) {
	        (0, _inherits3.default)(VerticalsStream, _StashingStream);

	        function VerticalsStream() {
	            (0, _classCallCheck3.default)(this, VerticalsStream);

	            var _this2 = (0, _possibleConstructorReturn3.default)(this, (VerticalsStream.__proto__ || (0, _getPrototypeOf2.default)(VerticalsStream)).call(this));

	            _this2.foundVerticals = 0;
	            return _this2;
	        }

	        (0, _createClass3.default)(VerticalsStream, [{
	            key: 'shouldStash',
	            value: function shouldStash(item) {
	                return item.words.length == 1 && item.words[0].string.length == 1;
	            }
	        }, {
	            key: 'doMatchesStash',
	            value: function doMatchesStash(lastItem, item) {
	                return lastItem.y - item.y > 5 && lastItem.words[0].type === item.words[0].type;
	            }
	        }, {
	            key: 'doFlushStash',
	            value: function doFlushStash(stash, results) {
	                if (stash.length > 5) {
	                    // unite
	                    var combinedWords = [];
	                    var minX = 999;
	                    var maxY = 0;
	                    var sumWidth = 0;
	                    var maxHeight = 0;
	                    stash.forEach(function (oneCharacterLine) {
	                        oneCharacterLine.annotation = _Annotation.REMOVED_ANNOTATION;
	                        results.push(oneCharacterLine);
	                        combinedWords.push(oneCharacterLine.words[0]);
	                        minX = Math.min(minX, oneCharacterLine.x);
	                        maxY = Math.max(maxY, oneCharacterLine.y);
	                        sumWidth += oneCharacterLine.width;
	                        maxHeight = Math.max(maxHeight, oneCharacterLine.height);
	                    });
	                    results.push(new _LineItem2.default((0, _extends3.default)({}, stash[0], {
	                        x: minX,
	                        y: maxY,
	                        width: sumWidth,
	                        height: maxHeight,
	                        words: combinedWords,
	                        annotation: _Annotation.ADDED_ANNOTATION
	                    })));
	                    this.foundVerticals++;
	                } else {
	                    //add as singles
	                    results.push.apply(results, (0, _toConsumableArray3.default)(stash));
	                }
	            }
	        }]);
	        return VerticalsStream;
	    }(_StashingStream3.default);
	});

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(350), __webpack_require__(311), __webpack_require__(353), __webpack_require__(160), __webpack_require__(339), __webpack_require__(98), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(330), __webpack_require__(304), __webpack_require__(331), __webpack_require__(332), __webpack_require__(357), __webpack_require__(327), __webpack_require__(347), __webpack_require__(346)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/get-iterator'), require('babel-runtime/core-js/json/stringify'), require('babel-runtime/helpers/slicedToArray'), require('babel-runtime/helpers/extends'), require('babel-runtime/helpers/toConsumableArray'), require('babel-runtime/core-js/set'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToLineItemTransformation.jsx'), require('../../ParseResult.jsx'), require('../../LineItem.jsx'), require('../../Word.jsx'), require('../../HeadlineFinder.jsx'), require('../../Annotation.jsx'), require('../../markdown/BlockType.jsx'), require('../../../stringFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getIterator, global.stringify, global.slicedToArray, global._extends, global.toConsumableArray, global.set, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToLineItemTransformation, global.ParseResult, global.LineItem, global.Word, global.HeadlineFinder, global.Annotation, global.BlockType, global.stringFunctions);
	        global.DetectTOC = mod.exports;
	    }
	})(this, function (exports, _getIterator2, _stringify, _slicedToArray2, _extends2, _toConsumableArray2, _set, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToLineItemTransformation, _ParseResult, _LineItem, _Word, _HeadlineFinder, _Annotation, _BlockType, _stringFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getIterator3 = _interopRequireDefault(_getIterator2);

	    var _stringify2 = _interopRequireDefault(_stringify);

	    var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	    var _set2 = _interopRequireDefault(_set);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToLineItemTransformation2 = _interopRequireDefault(_ToLineItemTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _LineItem2 = _interopRequireDefault(_LineItem);

	    var _Word2 = _interopRequireDefault(_Word);

	    var _HeadlineFinder2 = _interopRequireDefault(_HeadlineFinder);

	    var _BlockType2 = _interopRequireDefault(_BlockType);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var DetectTOC = function (_ToLineItemTransforma) {
	        (0, _inherits3.default)(DetectTOC, _ToLineItemTransforma);

	        function DetectTOC() {
	            (0, _classCallCheck3.default)(this, DetectTOC);
	            return (0, _possibleConstructorReturn3.default)(this, (DetectTOC.__proto__ || (0, _getPrototypeOf2.default)(DetectTOC)).call(this, "Detect TOC"));
	        }

	        (0, _createClass3.default)(DetectTOC, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                var tocPages = [];
	                var maxPagesToEvaluate = Math.min(20, parseResult.pages.length);
	                var linkLeveler = new LinkLeveler();

	                var tocLinks = [];
	                var lastTocPage;
	                var headlineItem;
	                parseResult.pages.slice(0, maxPagesToEvaluate).forEach(function (page) {
	                    var lineItemsWithDigits = 0;
	                    var unknownLines = new _set2.default();
	                    var pageTocLinks = [];
	                    var lastWordsWithoutNumber;
	                    var lastLine;
	                    //find lines ending with a number per page
	                    page.items.forEach(function (line) {
	                        var words = line.words.filter(function (word) {
	                            return !(0, _stringFunctions.hasOnly)(word.string, '.');
	                        });
	                        var digits = [];
	                        while (words.length > 0 && (0, _stringFunctions.isNumber)(words[words.length - 1].string)) {
	                            var lastWord = words.pop();
	                            digits.unshift(lastWord.string);
	                        }

	                        if (digits.length == 0 && words.length > 0) {
	                            var _lastWord = words[words.length - 1];
	                            while ((0, _stringFunctions.isDigit)(_lastWord.string.charCodeAt(_lastWord.string.length - 1))) {
	                                digits.unshift(_lastWord.string.charAt(_lastWord.string.length - 1));
	                                _lastWord.string = _lastWord.string.substring(0, _lastWord.string.length - 1);
	                            }
	                        }
	                        var endsWithDigit = digits.length > 0;
	                        if (endsWithDigit) {
	                            endsWithDigit = true;
	                            if (lastWordsWithoutNumber) {
	                                // 2-line item ?
	                                words.push.apply(words, (0, _toConsumableArray3.default)(lastWordsWithoutNumber));
	                                lastWordsWithoutNumber = null;
	                            }
	                            pageTocLinks.push(new TocLink({
	                                pageNumber: parseInt(digits.join('')),
	                                lineItem: new _LineItem2.default((0, _extends3.default)({}, line, {
	                                    words: words
	                                }))
	                            }));
	                            lineItemsWithDigits++;
	                        } else {
	                            if (!headlineItem) {
	                                headlineItem = line;
	                            } else {
	                                if (lastWordsWithoutNumber) {
	                                    unknownLines.add(lastLine);
	                                }
	                                lastWordsWithoutNumber = words;
	                                lastLine = line;
	                            }
	                        }
	                    });

	                    // page has been processed
	                    if (lineItemsWithDigits * 100 / page.items.length > 75) {
	                        tocPages.push(page.index + 1);
	                        lastTocPage = page;
	                        linkLeveler.levelPageItems(pageTocLinks);
	                        tocLinks.push.apply(tocLinks, pageTocLinks);

	                        var newBlocks = [];
	                        page.items.forEach(function (line) {
	                            if (!unknownLines.has(line)) {
	                                line.annotation = _Annotation.REMOVED_ANNOTATION;
	                            }
	                            newBlocks.push(line);
	                            if (line === headlineItem) {
	                                newBlocks.push(new _LineItem2.default((0, _extends3.default)({}, line, {
	                                    type: _BlockType2.default.H2,
	                                    annotation: _Annotation.ADDED_ANNOTATION
	                                })));
	                            }
	                        });
	                        page.items = newBlocks;
	                    } else {
	                        headlineItem = null;
	                    }
	                });

	                //all  pages have been processed
	                var foundHeadlines = tocLinks.length;
	                var notFoundHeadlines = [];
	                var foundBySize = [];
	                var headlineTypeToHeightRange = {}; //H1={min:23, max:25}

	                if (tocPages.length > 0) {
	                    // Add TOC items
	                    tocLinks.forEach(function (tocLink) {
	                        lastTocPage.items.push(new _LineItem2.default({
	                            words: [new _Word2.default({
	                                string: ' '.repeat(tocLink.level * 3) + '-'
	                            })].concat(tocLink.lineItem.words),
	                            type: _BlockType2.default.TOC,
	                            annotation: _Annotation.ADDED_ANNOTATION
	                        }));
	                    });

	                    // Add linked headers
	                    var pageMapping = detectPageMappingNumber(parseResult.pages.filter(function (page) {
	                        return page.index > lastTocPage.index;
	                    }), tocLinks);
	                    tocLinks.forEach(function (tocLink) {
	                        var linkedPage = parseResult.pages[tocLink.pageNumber + pageMapping];
	                        var foundHealineItems;
	                        if (linkedPage) {
	                            foundHealineItems = findHeadlineItems(linkedPage, tocLink.lineItem.text());
	                            if (!foundHealineItems) {
	                                // pages are off by 1 ?
	                                linkedPage = parseResult.pages[tocLink.pageNumber + pageMapping + 1];
	                                if (linkedPage) {
	                                    foundHealineItems = findHeadlineItems(linkedPage, tocLink.lineItem.text());
	                                }
	                            }
	                        }
	                        if (foundHealineItems) {
	                            addHeadlineItems(linkedPage, tocLink, foundHealineItems, headlineTypeToHeightRange);
	                        } else {
	                            notFoundHeadlines.push(tocLink);
	                        }
	                    });

	                    // Try to find linked headers by height
	                    var fromPage = lastTocPage.index + 2;
	                    var lastNotFound = [];
	                    var rollupLastNotFound = function rollupLastNotFound(currentPageNumber) {
	                        if (lastNotFound.length > 0) {
	                            lastNotFound.forEach(function (notFoundTocLink) {
	                                var headlineType = (0, _BlockType.headlineByLevel)(notFoundTocLink.level + 2);
	                                var heightRange = headlineTypeToHeightRange[headlineType.name];
	                                if (heightRange) {
	                                    var _findPageAndLineFromH = findPageAndLineFromHeadline(parseResult.pages, notFoundTocLink, heightRange, fromPage, currentPageNumber),
	                                        _findPageAndLineFromH2 = (0, _slicedToArray3.default)(_findPageAndLineFromH, 2),
	                                        pageIndex = _findPageAndLineFromH2[0],
	                                        lineIndex = _findPageAndLineFromH2[1];

	                                    if (lineIndex > -1) {
	                                        var page = parseResult.pages[pageIndex];
	                                        page.items[lineIndex].annotation = _Annotation.REMOVED_ANNOTATION;
	                                        page.items.splice(lineIndex + 1, 0, new _LineItem2.default((0, _extends3.default)({}, notFoundTocLink.lineItem, {
	                                            type: headlineType,
	                                            annotation: _Annotation.ADDED_ANNOTATION
	                                        })));
	                                        foundBySize.push(notFoundTocLink);
	                                    }
	                                }
	                            });
	                            lastNotFound = [];
	                        }
	                    };
	                    if (notFoundHeadlines.length > 0) {
	                        tocLinks.forEach(function (tocLink) {
	                            if (notFoundHeadlines.includes(tocLink)) {
	                                lastNotFound.push(tocLink);
	                            } else {
	                                rollupLastNotFound(tocLink.pageNumber);
	                                fromPage = tocLink.pageNumber;
	                            }
	                        });
	                        if (lastNotFound.length > 0) {
	                            rollupLastNotFound(parseResult.pages.length);
	                        }
	                    }
	                }

	                var messages = [];
	                messages.push('Detected ' + tocPages.length + ' table of content pages');
	                if (tocPages.length > 0) {
	                    messages.push('TOC headline heights: ' + (0, _stringify2.default)(headlineTypeToHeightRange));
	                    messages.push('Found TOC headlines: ' + (foundHeadlines - notFoundHeadlines.length + foundBySize.length) + '/' + foundHeadlines);
	                }
	                if (notFoundHeadlines.length > 0) {
	                    messages.push('Found TOC headlines (by size): ' + foundBySize.map(function (tocLink) {
	                        return tocLink.lineItem.text();
	                    }));
	                    messages.push('Missing TOC headlines: ' + notFoundHeadlines.filter(function (fTocLink) {
	                        return !foundBySize.includes(fTocLink);
	                    }).map(function (tocLink) {
	                        return tocLink.lineItem.text() + '=>' + tocLink.pageNumber;
	                    }));
	                }
	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    globals: (0, _extends3.default)({}, parseResult.globals, {
	                        tocPages: tocPages,
	                        headlineTypeToHeightRange: headlineTypeToHeightRange
	                    }),
	                    messages: messages
	                }));
	            }
	        }]);
	        return DetectTOC;
	    }(_ToLineItemTransformation2.default);

	    exports.default = DetectTOC;


	    //Find out how the TOC page link actualy translates to the page.index
	    function detectPageMappingNumber(pages, tocLinks) {
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = (0, _getIterator3.default)(tocLinks), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var tocLink = _step.value;

	                var page = findPageWithHeadline(pages, tocLink.lineItem.text());
	                if (page) {
	                    return page.index - tocLink.pageNumber;
	                }
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        return null;
	    }

	    function findPageWithHeadline(pages, headline) {
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	            for (var _iterator2 = (0, _getIterator3.default)(pages), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var page = _step2.value;

	                if (findHeadlineItems(page, headline)) {
	                    return page;
	                }
	            }
	        } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                }
	            } finally {
	                if (_didIteratorError2) {
	                    throw _iteratorError2;
	                }
	            }
	        }

	        return null;
	    }

	    function findHeadlineItems(page, headline) {
	        var headlineFinder = new _HeadlineFinder2.default({
	            headline: headline
	        });
	        var lineIndex = 0;
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	            for (var _iterator3 = (0, _getIterator3.default)(page.items), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                var line = _step3.value;

	                var headlineItems = headlineFinder.consume(line);
	                if (headlineItems) {
	                    return {
	                        lineIndex: lineIndex,
	                        headlineItems: headlineItems
	                    };
	                }
	                lineIndex++;
	            }
	        } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                    _iterator3.return();
	                }
	            } finally {
	                if (_didIteratorError3) {
	                    throw _iteratorError3;
	                }
	            }
	        }

	        return null;
	    }

	    function addHeadlineItems(page, tocLink, foundItems, headlineTypeToHeightRange) {
	        foundItems.headlineItems.forEach(function (item) {
	            return item.annotation = _Annotation.REMOVED_ANNOTATION;
	        });
	        var headlineType = (0, _BlockType.headlineByLevel)(tocLink.level + 2);
	        var headlineHeight = foundItems.headlineItems.reduce(function (max, item) {
	            return Math.max(max, item.height);
	        }, 0);
	        page.items.splice(foundItems.lineIndex + 1, 0, new _LineItem2.default((0, _extends3.default)({}, foundItems.headlineItems[0], {
	            words: tocLink.lineItem.words,
	            height: headlineHeight,
	            type: headlineType,
	            annotation: _Annotation.ADDED_ANNOTATION
	        })));
	        var range = headlineTypeToHeightRange[headlineType.name];
	        if (range) {
	            range.min = Math.min(range.min, headlineHeight);
	            range.max = Math.max(range.max, headlineHeight);
	        } else {
	            range = {
	                min: headlineHeight,
	                max: headlineHeight
	            };
	            headlineTypeToHeightRange[headlineType.name] = range;
	        }
	    }

	    function findPageAndLineFromHeadline(pages, tocLink, heightRange, fromPage, toPage) {
	        var linkText = tocLink.lineItem.text().toUpperCase();
	        for (var i = fromPage; i <= toPage; i++) {
	            var page = pages[i - 1];
	            var lineIndex = page.items.findIndex(function (line) {
	                if (!line.type && !line.annotation && line.height >= heightRange.min && line.height <= heightRange.max) {
	                    var match = (0, _stringFunctions.wordMatch)(linkText, line.text());
	                    return match >= 0.5;
	                }
	                return false;
	            });
	            if (lineIndex > -1) return [i - 1, lineIndex];
	        }
	        return [-1, -1];
	    }

	    var LinkLeveler = function () {
	        function LinkLeveler() {
	            (0, _classCallCheck3.default)(this, LinkLeveler);

	            this.levelByMethod = null;
	            this.uniqueFonts = [];
	        }

	        (0, _createClass3.default)(LinkLeveler, [{
	            key: 'levelPageItems',
	            value: function levelPageItems(tocLinks) {
	                if (!this.levelByMethod) {
	                    var uniqueX = this.calculateUniqueX(tocLinks);
	                    if (uniqueX.length > 1) {
	                        this.levelByMethod = this.levelByXDiff;
	                    } else {
	                        var uniqueFonts = this.calculateUniqueFonts(tocLinks);
	                        if (uniqueFonts.length > 1) {
	                            this.uniqueFonts = uniqueFonts;
	                            this.levelByMethod = this.levelByFont;
	                        } else {
	                            this.levelByMethod = this.levelToZero;
	                        }
	                    }
	                }
	                this.levelByMethod(tocLinks);
	            }
	        }, {
	            key: 'levelByXDiff',
	            value: function levelByXDiff(tocLinks) {
	                var uniqueX = this.calculateUniqueX(tocLinks);
	                tocLinks.forEach(function (link) {
	                    link.level = uniqueX.indexOf(link.lineItem.x);
	                });
	            }
	        }, {
	            key: 'levelByFont',
	            value: function levelByFont(tocLinks) {
	                var _this2 = this;

	                tocLinks.forEach(function (link) {
	                    link.level = _this2.uniqueFonts.indexOf(link.lineItem.font);
	                });
	            }
	        }, {
	            key: 'levelToZero',
	            value: function levelToZero(tocLinks) {
	                tocLinks.forEach(function (link) {
	                    link.level = 0;
	                });
	            }
	        }, {
	            key: 'calculateUniqueX',
	            value: function calculateUniqueX(tocLinks) {
	                var uniqueX = tocLinks.reduce(function (uniquesArray, link) {
	                    if (uniquesArray.indexOf(link.lineItem.x) < 0) uniquesArray.push(link.lineItem.x);
	                    return uniquesArray;
	                }, []);

	                uniqueX.sort(function (a, b) {
	                    return a - b;
	                });

	                return uniqueX;
	            }
	        }, {
	            key: 'calculateUniqueFonts',
	            value: function calculateUniqueFonts(tocLinks) {
	                var uniqueFont = tocLinks.reduce(function (uniquesArray, link) {
	                    if (uniquesArray.indexOf(link.lineItem.font) < 0) uniquesArray.push(link.lineItem.font);
	                    return uniquesArray;
	                }, []);

	                return uniqueFont;
	            }
	        }]);
	        return LinkLeveler;
	    }();

	    var TocLink = function TocLink(options) {
	        (0, _classCallCheck3.default)(this, TocLink);

	        this.lineItem = options.lineItem;
	        this.pageNumber = options.pageNumber;
	        this.level = 0;
	    };
	});

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(351), __esModule: true };

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(54);
	__webpack_require__(25);
	module.exports = __webpack_require__(352);


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(13);
	var get = __webpack_require__(64);
	module.exports = __webpack_require__(8).getIterator = function (it) {
	  var iterFn = get(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _isIterable2 = __webpack_require__(354);

	var _isIterable3 = _interopRequireDefault(_isIterable2);

	var _getIterator2 = __webpack_require__(350);

	var _getIterator3 = _interopRequireDefault(_getIterator2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(355), __esModule: true };

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(54);
	__webpack_require__(25);
	module.exports = __webpack_require__(356);


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(59);
	var ITERATOR = __webpack_require__(51)('iterator');
	var Iterators = __webpack_require__(33);
	module.exports = __webpack_require__(8).isIterable = function (it) {
	  var O = Object(it);
	  return O[ITERATOR] !== undefined
	    || '@@iterator' in O
	    // eslint-disable-next-line no-prototype-builtins
	    || Iterators.hasOwnProperty(classof(O));
	};


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(346)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('../stringFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.classCallCheck, global.createClass, global.stringFunctions);
	        global.HeadlineFinder = mod.exports;
	    }
	})(this, function (exports, _classCallCheck2, _createClass2, _stringFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var HeadlineFinder = function () {
	        function HeadlineFinder(options) {
	            (0, _classCallCheck3.default)(this, HeadlineFinder);

	            this.headlineCharCodes = (0, _stringFunctions.normalizedCharCodeArray)(options.headline);
	            this.stackedLineItems = [];
	            this.stackedChars = 0;
	        }

	        (0, _createClass3.default)(HeadlineFinder, [{
	            key: 'consume',
	            value: function consume(lineItem) {
	                //TODO avoid join
	                var normalizedCharCodes = (0, _stringFunctions.normalizedCharCodeArray)(lineItem.text());
	                var matchAll = this.matchAll(normalizedCharCodes);
	                if (matchAll) {
	                    this.stackedLineItems.push(lineItem);
	                    this.stackedChars += normalizedCharCodes.length;
	                    if (this.stackedChars == this.headlineCharCodes.length) {
	                        return this.stackedLineItems;
	                    }
	                } else {
	                    if (this.stackedChars > 0) {
	                        this.stackedChars = 0;
	                        this.stackedLineItems = [];
	                        this.consume(lineItem); // test again without stack
	                    }
	                }
	                return null;
	            }
	        }, {
	            key: 'matchAll',
	            value: function matchAll(normalizedCharCodes) {
	                for (var i = 0; i < normalizedCharCodes.length; i++) {
	                    var headlineChar = this.headlineCharCodes[this.stackedChars + i];
	                    var textItemChar = normalizedCharCodes[i];
	                    if (textItemChar != headlineChar) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	        }]);
	        return HeadlineFinder;
	    }();

	    exports.default = HeadlineFinder;
	});

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(330), __webpack_require__(304), __webpack_require__(331), __webpack_require__(332), __webpack_require__(327), __webpack_require__(347), __webpack_require__(346)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToLineItemTransformation.jsx'), require('../../ParseResult.jsx'), require('../../LineItem.jsx'), require('../../Word.jsx'), require('../../Annotation.jsx'), require('../../markdown/BlockType.jsx'), require('../../../stringFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToLineItemTransformation, global.ParseResult, global.LineItem, global.Word, global.Annotation, global.BlockType, global.stringFunctions);
	        global.DetectListItems = mod.exports;
	    }
	})(this, function (exports, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToLineItemTransformation, _ParseResult, _LineItem, _Word, _Annotation, _BlockType, _stringFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToLineItemTransformation2 = _interopRequireDefault(_ToLineItemTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _LineItem2 = _interopRequireDefault(_LineItem);

	    var _Word2 = _interopRequireDefault(_Word);

	    var _BlockType2 = _interopRequireDefault(_BlockType);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var DetectListItems = function (_ToLineItemTransforma) {
	        (0, _inherits3.default)(DetectListItems, _ToLineItemTransforma);

	        function DetectListItems() {
	            (0, _classCallCheck3.default)(this, DetectListItems);
	            return (0, _possibleConstructorReturn3.default)(this, (DetectListItems.__proto__ || (0, _getPrototypeOf2.default)(DetectListItems)).call(this, "Detect List Items"));
	        }

	        (0, _createClass3.default)(DetectListItems, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                var foundListItems = 0;
	                var foundNumberedItems = 0;

	                parseResult.pages.forEach(function (page) {
	                    var newItems = [];
	                    page.items.forEach(function (item) {
	                        newItems.push(item);
	                        if (!item.type) {
	                            var text = item.text();

	                            if ((0, _stringFunctions.isListItemCharacter)(item.words[0].string)) {
	                                foundListItems++;
	                                if (item.words[0].string === '-') {
	                                    item.annotation = _Annotation.DETECTED_ANNOTATION;
	                                    item.type = _BlockType2.default.LIST;
	                                } else {
	                                    item.annotation = _Annotation.REMOVED_ANNOTATION;
	                                    var newWords = item.words.map(function (word) {
	                                        return new _Word2.default((0, _extends3.default)({}, word));
	                                    });
	                                    newWords[0].string = '-';
	                                    newItems.push(new _LineItem2.default((0, _extends3.default)({}, item, {
	                                        words: newWords,
	                                        annotation: _Annotation.ADDED_ANNOTATION,
	                                        type: _BlockType2.default.LIST
	                                    })));
	                                }
	                            } else if ((0, _stringFunctions.isNumberedListItem)(text)) {
	                                //TODO check that starts with 1 (kala chakra)
	                                foundNumberedItems++;
	                                item.annotation = _Annotation.DETECTED_ANNOTATION;
	                                item.type = _BlockType2.default.LIST;
	                            }
	                        }
	                    });
	                    page.items = newItems;
	                });

	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    messages: ['Detected ' + foundListItems + ' plain list items.', 'Detected ' + foundNumberedItems + ' numbered list items.']
	                }));
	            }
	        }]);
	        return DetectListItems;
	    }(_ToLineItemTransformation2.default);

	    exports.default = DetectListItems;
	});

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(98), __webpack_require__(160), __webpack_require__(308), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(330), __webpack_require__(304), __webpack_require__(327), __webpack_require__(347), __webpack_require__(346)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/set'), require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/keys'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToLineItemTransformation.jsx'), require('../../ParseResult.jsx'), require('../../Annotation.jsx'), require('../../markdown/BlockType.jsx'), require('../../../stringFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.set, global._extends, global.keys, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToLineItemTransformation, global.ParseResult, global.Annotation, global.BlockType, global.stringFunctions);
	        global.DetectHeaders = mod.exports;
	    }
	})(this, function (exports, _set, _extends2, _keys, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToLineItemTransformation, _ParseResult, _Annotation, _BlockType, _stringFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _set2 = _interopRequireDefault(_set);

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _keys2 = _interopRequireDefault(_keys);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToLineItemTransformation2 = _interopRequireDefault(_ToLineItemTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _BlockType2 = _interopRequireDefault(_BlockType);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var DetectHeaders = function (_ToLineItemTransforma) {
	        (0, _inherits3.default)(DetectHeaders, _ToLineItemTransforma);

	        function DetectHeaders() {
	            (0, _classCallCheck3.default)(this, DetectHeaders);
	            return (0, _possibleConstructorReturn3.default)(this, (DetectHeaders.__proto__ || (0, _getPrototypeOf2.default)(DetectHeaders)).call(this, "Detect Headers"));
	        }

	        (0, _createClass3.default)(DetectHeaders, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                var _parseResult$globals = parseResult.globals,
	                    tocPages = _parseResult$globals.tocPages,
	                    headlineTypeToHeightRange = _parseResult$globals.headlineTypeToHeightRange,
	                    mostUsedHeight = _parseResult$globals.mostUsedHeight,
	                    mostUsedDistance = _parseResult$globals.mostUsedDistance,
	                    mostUsedFont = _parseResult$globals.mostUsedFont,
	                    maxHeight = _parseResult$globals.maxHeight;

	                var hasToc = tocPages.length > 0;
	                var detectedHeaders = 0;

	                // Handle title pages
	                var pagesWithMaxHeight = findPagesWithMaxHeight(parseResult.pages, maxHeight);
	                var min2ndLevelHeaderHeigthOnMaxPage = mostUsedHeight + (maxHeight - mostUsedHeight) / 4;
	                pagesWithMaxHeight.forEach(function (titlePage) {
	                    titlePage.items.forEach(function (item) {
	                        var height = item.height;
	                        if (!item.type && height > min2ndLevelHeaderHeigthOnMaxPage) {
	                            if (height == maxHeight) {
	                                item.type = _BlockType2.default.H1;
	                            } else {
	                                item.type = _BlockType2.default.H2;
	                            }
	                            item.annotation = _Annotation.DETECTED_ANNOTATION;
	                            detectedHeaders++;
	                        }
	                    });
	                });

	                if (hasToc) {
	                    //Use existing headline heights to find additional headlines
	                    var headlineTypes = (0, _keys2.default)(headlineTypeToHeightRange);
	                    headlineTypes.forEach(function (headlineType) {
	                        var range = headlineTypeToHeightRange[headlineType];
	                        if (range.max > mostUsedHeight) {
	                            //use only very clear headlines, only use max
	                            parseResult.pages.forEach(function (page) {
	                                page.items.forEach(function (item) {
	                                    if (!item.type && item.height == range.max) {
	                                        item.annotation = _Annotation.DETECTED_ANNOTATION;
	                                        item.type = _BlockType2.default.enumValueOf(headlineType);
	                                        detectedHeaders++;
	                                    }
	                                });
	                            });
	                        }
	                    });
	                } else {
	                    //Categorize headlines by the text heights
	                    var heights = [];
	                    var lastHeight;
	                    parseResult.pages.forEach(function (page) {
	                        page.items.forEach(function (item) {
	                            if (!item.type && item.height > mostUsedHeight && !(0, _stringFunctions.isListItem)(item.text())) {
	                                if (!heights.includes(item.height) && (!lastHeight || lastHeight > item.height)) {
	                                    heights.push(item.height);
	                                }
	                            }
	                        });
	                    });
	                    heights.sort(function (a, b) {
	                        return b - a;
	                    });

	                    heights.forEach(function (height, i) {
	                        var headlineLevel = i + 2;
	                        if (headlineLevel <= 6) {
	                            var headlineType = (0, _BlockType.headlineByLevel)(2 + i);
	                            parseResult.pages.forEach(function (page) {
	                                page.items.forEach(function (item) {
	                                    if (!item.type && item.height == height && !(0, _stringFunctions.isListItem)(item.text())) {
	                                        detectedHeaders++;
	                                        item.annotation = _Annotation.DETECTED_ANNOTATION;
	                                        item.type = headlineType;
	                                    }
	                                });
	                            });
	                        }
	                    });
	                }

	                //find headlines which have paragraph height
	                var smallesHeadlineLevel = 1;
	                parseResult.pages.forEach(function (page) {
	                    page.items.forEach(function (item) {
	                        if (item.type && item.type.headline) {
	                            smallesHeadlineLevel = Math.max(smallesHeadlineLevel, item.type.headlineLevel);
	                        }
	                    });
	                });
	                if (smallesHeadlineLevel < 6) {
	                    var nextHeadlineType = (0, _BlockType.headlineByLevel)(smallesHeadlineLevel + 1);
	                    parseResult.pages.forEach(function (page) {
	                        var lastItem;
	                        page.items.forEach(function (item) {
	                            if (!item.type && item.height == mostUsedHeight && item.font !== mostUsedFont && (!lastItem || lastItem.y < item.y || lastItem.type && lastItem.type.headline || lastItem.y - item.y > mostUsedDistance * 2) && item.text() === item.text().toUpperCase()) {
	                                detectedHeaders++;
	                                item.annotation = _Annotation.DETECTED_ANNOTATION;
	                                item.type = nextHeadlineType;
	                            }
	                            lastItem = item;
	                        });
	                    });
	                }

	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    messages: ['Detected ' + detectedHeaders + ' headlines.']
	                }));
	            }
	        }]);
	        return DetectHeaders;
	    }(_ToLineItemTransformation2.default);

	    exports.default = DetectHeaders;


	    function findPagesWithMaxHeight(pages, maxHeight) {
	        var maxHeaderPagesSet = new _set2.default();
	        pages.forEach(function (page) {
	            page.items.forEach(function (item) {
	                if (!item.type && item.height == maxHeight) {
	                    maxHeaderPagesSet.add(page);
	                }
	            });
	        });
	        return maxHeaderPagesSet;
	    }
	});

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(361), __webpack_require__(304), __webpack_require__(337), __webpack_require__(327), __webpack_require__(336)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToLineItemBlockTransformation.jsx'), require('../../ParseResult.jsx'), require('../../LineItemBlock.jsx'), require('../../Annotation.jsx'), require('../../../pageItemFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToLineItemBlockTransformation, global.ParseResult, global.LineItemBlock, global.Annotation, global.pageItemFunctions);
	        global.GatherBlocks = mod.exports;
	    }
	})(this, function (exports, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToLineItemBlockTransformation, _ParseResult, _LineItemBlock, _Annotation, _pageItemFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToLineItemBlockTransformation2 = _interopRequireDefault(_ToLineItemBlockTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _LineItemBlock2 = _interopRequireDefault(_LineItemBlock);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var GatherBlocks = function (_ToLineItemBlockTrans) {
	        (0, _inherits3.default)(GatherBlocks, _ToLineItemBlockTrans);

	        function GatherBlocks() {
	            (0, _classCallCheck3.default)(this, GatherBlocks);
	            return (0, _possibleConstructorReturn3.default)(this, (GatherBlocks.__proto__ || (0, _getPrototypeOf2.default)(GatherBlocks)).call(this, "Gather Blocks"));
	        }

	        (0, _createClass3.default)(GatherBlocks, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                var mostUsedDistance = parseResult.globals.mostUsedDistance;

	                var createdBlocks = 0;
	                var lineItemCount = 0;
	                parseResult.pages.map(function (page) {
	                    lineItemCount += page.items.length;
	                    var blocks = [];
	                    var stashedBlock = new _LineItemBlock2.default({});
	                    var flushStashedItems = function flushStashedItems() {
	                        if (stashedBlock.items.length > 1) {
	                            stashedBlock.annotation = _Annotation.DETECTED_ANNOTATION;
	                        }

	                        blocks.push(stashedBlock);
	                        stashedBlock = new _LineItemBlock2.default({});
	                        createdBlocks++;
	                    };

	                    var minX = (0, _pageItemFunctions.minXFromPageItems)(page.items);
	                    page.items.forEach(function (item) {
	                        if (stashedBlock.items.length > 0 && shouldFlushBlock(stashedBlock, item, minX, mostUsedDistance)) {
	                            flushStashedItems();
	                        }
	                        stashedBlock.addItem(item);
	                    });
	                    if (stashedBlock.items.length > 0) {
	                        flushStashedItems();
	                    }
	                    page.items = blocks;
	                });

	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    messages: ['Gathered ' + createdBlocks + ' blocks out of ' + lineItemCount + ' line items']
	                }));
	            }
	        }]);
	        return GatherBlocks;
	    }(_ToLineItemBlockTransformation2.default);

	    exports.default = GatherBlocks;


	    function shouldFlushBlock(stashedBlock, item, minX, mostUsedDistance) {
	        if (stashedBlock.type && stashedBlock.type.mergeFollowingNonTypedItems && !item.type) {
	            return false;
	        }
	        var lastItem = stashedBlock.items[stashedBlock.items.length - 1];
	        var hasBigDistance = bigDistance(lastItem, item, minX, mostUsedDistance);
	        if (stashedBlock.type && stashedBlock.type.mergeFollowingNonTypedItemsWithSmallDistance && !item.type && !hasBigDistance) {
	            return false;
	        }
	        if (item.type !== stashedBlock.type) {
	            return true;
	        }
	        if (item.type) {
	            return !item.type.mergeToBlock;
	        } else {
	            return hasBigDistance;
	        }
	    }

	    function bigDistance(lastItem, item, minX, mostUsedDistance) {
	        var distance = lastItem.y - item.y;
	        if (distance < 0 - mostUsedDistance / 2) {
	            //distance is negative - and not only a bit
	            return true;
	        }
	        var allowedDisctance = mostUsedDistance + 1;
	        if (lastItem.x > minX && item.x > minX) {
	            //intended elements like lists often have greater spacing
	            allowedDisctance = mostUsedDistance + mostUsedDistance / 2;
	        }
	        if (distance > allowedDisctance) {
	            return true;
	        }
	        return false;
	    }
	});

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(314), __webpack_require__(304), __webpack_require__(337), __webpack_require__(362), __webpack_require__(327)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./Transformation.jsx'), require('../ParseResult.jsx'), require('../LineItemBlock.jsx'), require('../../components/debug/LineItemBlockPageView.jsx'), require('../Annotation.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.Transformation, global.ParseResult, global.LineItemBlock, global.LineItemBlockPageView, global.Annotation);
	        global.ToLineItemBlockTransformation = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _Transformation2, _ParseResult, _LineItemBlock, _LineItemBlockPageView, _Annotation) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _Transformation3 = _interopRequireDefault(_Transformation2);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _LineItemBlock2 = _interopRequireDefault(_LineItemBlock);

	    var _LineItemBlockPageView2 = _interopRequireDefault(_LineItemBlockPageView);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var ToLineItemBlockTransformation = function (_Transformation) {
	        (0, _inherits3.default)(ToLineItemBlockTransformation, _Transformation);

	        function ToLineItemBlockTransformation(name) {
	            (0, _classCallCheck3.default)(this, ToLineItemBlockTransformation);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (ToLineItemBlockTransformation.__proto__ || (0, _getPrototypeOf2.default)(ToLineItemBlockTransformation)).call(this, name, _LineItemBlock2.default.name));

	            if (_this.constructor === ToLineItemBlockTransformation) {
	                throw new TypeError("Can not construct abstract class.");
	            }
	            _this.showWhitespaces = false;
	            return _this;
	        }

	        (0, _createClass3.default)(ToLineItemBlockTransformation, [{
	            key: 'showModificationCheckbox',
	            value: function showModificationCheckbox() {
	                return true;
	            }
	        }, {
	            key: 'createPageView',
	            value: function createPageView(page, modificationsOnly) {
	                return _react2.default.createElement(_LineItemBlockPageView2.default, {
	                    key: page.index,
	                    page: page,
	                    modificationsOnly: modificationsOnly,
	                    showWhitespaces: this.showWhitespaces });
	            }
	        }, {
	            key: 'completeTransform',
	            value: function completeTransform(parseResult) {
	                // The usual cleanup
	                parseResult.messages = [];
	                parseResult.pages.forEach(function (page) {
	                    page.items = page.items.filter(function (item) {
	                        return !item.annotation || item.annotation !== _Annotation.REMOVED_ANNOTATION;
	                    });
	                    page.items.forEach(function (item) {
	                        return item.annotation = null;
	                    });
	                });
	                return parseResult;
	            }
	        }]);
	        return ToLineItemBlockTransformation;
	    }(_Transformation3.default);

	    exports.default = ToLineItemBlockTransformation;
	});

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(316), __webpack_require__(334)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./PageView.jsx'), require('./LineItemTable.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.PageView, global.LineItemTable);
	        global.LineItemBlockPageView = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _PageView2, _LineItemTable) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _PageView3 = _interopRequireDefault(_PageView2);

	    var _LineItemTable2 = _interopRequireDefault(_LineItemTable);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var LineItemBlockPageView = function (_PageView) {
	        (0, _inherits3.default)(LineItemBlockPageView, _PageView);

	        function LineItemBlockPageView() {
	            (0, _classCallCheck3.default)(this, LineItemBlockPageView);
	            return (0, _possibleConstructorReturn3.default)(this, (LineItemBlockPageView.__proto__ || (0, _getPrototypeOf2.default)(LineItemBlockPageView)).apply(this, arguments));
	        }

	        (0, _createClass3.default)(LineItemBlockPageView, [{
	            key: 'createItemViews',
	            value: function createItemViews(items, showWhitespaces) {
	                var blockTables = items.map(function (block, i) {
	                    var blockType = block.type ? ' - ' + block.type.name : null;
	                    var blockAnnotation = block.annotation ? _react2.default.createElement(
	                        'span',
	                        null,
	                        ' - ' + block.annotation.category
	                    ) : null;
	                    var borderStyle = block.annotation ? {
	                        marginBottom: "20px",
	                        border: "solid thin " + block.annotation.color
	                    } : null;
	                    var colorStyle = block.annotation ? {
	                        color: block.annotation.color
	                    } : null;
	                    var footnoteLinks;
	                    var footnotes;
	                    if (block.parsedElements) {
	                        if (block.parsedElements.footnoteLinks.length > 0) {
	                            footnoteLinks = _react2.default.createElement(
	                                'div',
	                                null,
	                                'Footnote-Links: ' + block.parsedElements.footnoteLinks
	                            );
	                        }
	                        if (block.parsedElements.footnotes.length > 0) {
	                            footnotes = _react2.default.createElement(
	                                'div',
	                                null,
	                                'Footnotes: ' + block.parsedElements.footnotes
	                            );
	                        }
	                    }

	                    return _react2.default.createElement(
	                        'div',
	                        { key: i },
	                        _react2.default.createElement(
	                            'div',
	                            { style: colorStyle },
	                            _react2.default.createElement(
	                                'b',
	                                null,
	                                'Block ',
	                                i + 1
	                            ),
	                            _react2.default.createElement(
	                                'i',
	                                null,
	                                blockType,
	                                ' ',
	                                blockAnnotation
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: borderStyle },
	                            _react2.default.createElement(_LineItemTable2.default, { items: block.items, showWhitespaces: showWhitespaces }),
	                            footnoteLinks,
	                            footnotes
	                        )
	                    );
	                });
	                return blockTables;
	            }
	        }]);
	        return LineItemBlockPageView;
	    }(_PageView3.default);

	    exports.default = LineItemBlockPageView;
	});

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(350), __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(361), __webpack_require__(304), __webpack_require__(327), __webpack_require__(347), __webpack_require__(336)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/get-iterator'), require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToLineItemBlockTransformation.jsx'), require('../../ParseResult.jsx'), require('../../Annotation.jsx'), require('../../markdown/BlockType.jsx'), require('../../../pageItemFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getIterator, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToLineItemBlockTransformation, global.ParseResult, global.Annotation, global.BlockType, global.pageItemFunctions);
	        global.DetectCodeQuoteBlocks = mod.exports;
	    }
	})(this, function (exports, _getIterator2, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToLineItemBlockTransformation, _ParseResult, _Annotation, _BlockType, _pageItemFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getIterator3 = _interopRequireDefault(_getIterator2);

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToLineItemBlockTransformation2 = _interopRequireDefault(_ToLineItemBlockTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _BlockType2 = _interopRequireDefault(_BlockType);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var DetectCodeQuoteBlocks = function (_ToLineItemBlockTrans) {
	        (0, _inherits3.default)(DetectCodeQuoteBlocks, _ToLineItemBlockTrans);

	        function DetectCodeQuoteBlocks() {
	            (0, _classCallCheck3.default)(this, DetectCodeQuoteBlocks);
	            return (0, _possibleConstructorReturn3.default)(this, (DetectCodeQuoteBlocks.__proto__ || (0, _getPrototypeOf2.default)(DetectCodeQuoteBlocks)).call(this, "Detect Code/Quote Blocks"));
	        }

	        (0, _createClass3.default)(DetectCodeQuoteBlocks, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                var mostUsedHeight = parseResult.globals.mostUsedHeight;

	                var foundCodeItems = 0;
	                parseResult.pages.forEach(function (page) {
	                    var minX = (0, _pageItemFunctions.minXFromBlocks)(page.items);
	                    page.items.forEach(function (block) {
	                        if (!block.type && looksLikeCodeBlock(minX, block.items, mostUsedHeight)) {
	                            block.annotation = _Annotation.DETECTED_ANNOTATION;
	                            block.type = _BlockType2.default.CODE;
	                            foundCodeItems++;
	                        }
	                    });
	                });

	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    messages: ['Detected ' + foundCodeItems + ' code/quote items.']
	                }));
	            }
	        }]);
	        return DetectCodeQuoteBlocks;
	    }(_ToLineItemBlockTransformation2.default);

	    exports.default = DetectCodeQuoteBlocks;


	    function looksLikeCodeBlock(minX, items, mostUsedHeight) {
	        if (items.length == 0) {
	            return false;
	        }
	        if (items.length == 1) {
	            return items[0].x > minX && items[0].height <= mostUsedHeight + 1;
	        }
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = (0, _getIterator3.default)(items), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var item = _step.value;

	                if (item.x == minX) {
	                    return false;
	                }
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        return true;
	    }
	});

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(361), __webpack_require__(304), __webpack_require__(332), __webpack_require__(327), __webpack_require__(347)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToLineItemBlockTransformation.jsx'), require('../../ParseResult.jsx'), require('../../Word.jsx'), require('../../Annotation.jsx'), require('../../markdown/BlockType.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToLineItemBlockTransformation, global.ParseResult, global.Word, global.Annotation, global.BlockType);
	        global.DetectListLevels = mod.exports;
	    }
	})(this, function (exports, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToLineItemBlockTransformation, _ParseResult, _Word, _Annotation, _BlockType) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToLineItemBlockTransformation2 = _interopRequireDefault(_ToLineItemBlockTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    var _Word2 = _interopRequireDefault(_Word);

	    var _BlockType2 = _interopRequireDefault(_BlockType);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var DetectListLevels = function (_ToLineItemBlockTrans) {
	        (0, _inherits3.default)(DetectListLevels, _ToLineItemBlockTrans);

	        function DetectListLevels() {
	            (0, _classCallCheck3.default)(this, DetectListLevels);

	            var _this = (0, _possibleConstructorReturn3.default)(this, (DetectListLevels.__proto__ || (0, _getPrototypeOf2.default)(DetectListLevels)).call(this, "Level Lists"));

	            _this.showWhitespaces = true;
	            return _this;
	        }

	        (0, _createClass3.default)(DetectListLevels, [{
	            key: 'transform',
	            value: function transform(parseResult) {
	                var listBlocks = 0;
	                var modifiedBlocks = 0;
	                parseResult.pages.forEach(function (page) {

	                    page.items.filter(function (block) {
	                        return block.type === _BlockType2.default.LIST;
	                    }).forEach(function (listBlock) {
	                        var lastItemX;
	                        var currentLevel = 0;
	                        var xByLevel = {};
	                        var modifiedBlock = false;
	                        listBlock.items.forEach(function (item) {
	                            var isListItem = true;
	                            if (lastItemX && isListItem) {
	                                if (item.x > lastItemX) {
	                                    currentLevel++;
	                                    xByLevel[item.x] = currentLevel;
	                                } else if (item.x < lastItemX) {
	                                    currentLevel = xByLevel[item.x];
	                                }
	                            } else {
	                                xByLevel[item.x] = 0;
	                            }
	                            if (currentLevel > 0) {
	                                item.words = [new _Word2.default({
	                                    string: ' '.repeat(currentLevel * 3)
	                                })].concat(item.words);
	                                modifiedBlock = true;
	                            }
	                            lastItemX = item.x;
	                        });
	                        listBlocks++;
	                        if (modifiedBlock) {
	                            modifiedBlocks++;
	                            listBlock.annotation = _Annotation.MODIFIED_ANNOTATION;
	                        } else {
	                            listBlock.annotation = _Annotation.UNCHANGED_ANNOTATION;
	                        }
	                    });
	                });
	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    messages: ['Modified ' + modifiedBlocks + ' / ' + listBlocks + ' list blocks.']
	                }));
	            }
	        }]);
	        return DetectListLevels;
	    }(_ToLineItemBlockTransformation2.default);

	    exports.default = DetectListLevels;
	});

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(314), __webpack_require__(366), __webpack_require__(304), __webpack_require__(347)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./Transformation.jsx'), require('../../components/debug/TextPageView.jsx'), require('../ParseResult.jsx'), require('../markdown/BlockType.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.Transformation, global.TextPageView, global.ParseResult, global.BlockType);
	        global.ToTextBlocks = mod.exports;
	    }
	})(this, function (exports, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _Transformation2, _TextPageView, _ParseResult, _BlockType) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _Transformation3 = _interopRequireDefault(_Transformation2);

	    var _TextPageView2 = _interopRequireDefault(_TextPageView);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var ToTextBlocks = function (_Transformation) {
	        (0, _inherits3.default)(ToTextBlocks, _Transformation);

	        function ToTextBlocks() {
	            (0, _classCallCheck3.default)(this, ToTextBlocks);
	            return (0, _possibleConstructorReturn3.default)(this, (ToTextBlocks.__proto__ || (0, _getPrototypeOf2.default)(ToTextBlocks)).call(this, "To Text Blocks", "TextBlock"));
	        }

	        (0, _createClass3.default)(ToTextBlocks, [{
	            key: 'createPageView',
	            value: function createPageView(page, modificationsOnly) {
	                // eslint-disable-line no-unused-vars
	                return _react2.default.createElement(_TextPageView2.default, { key: page.index, page: page });
	            }
	        }, {
	            key: 'transform',
	            value: function transform(parseResult) {
	                parseResult.pages.forEach(function (page) {
	                    var textItems = [];
	                    page.items.forEach(function (block) {
	                        //TODO category to type (before have no unknowns, have paragraph)
	                        var category = block.type ? block.type.name : 'Unknown';
	                        textItems.push({
	                            category: category,
	                            text: (0, _BlockType.blockToText)(block)
	                        });
	                    });
	                    page.items = textItems;
	                });
	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult));
	            }
	        }]);
	        return ToTextBlocks;
	    }(_Transformation3.default);

	    exports.default = ToTextBlocks;
	});

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(316), __webpack_require__(318)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./PageView.jsx'), require('react-bootstrap/lib/Table'));
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.PageView, global.Table);
	    global.TextPageView = mod.exports;
	  }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _PageView2, _Table) {
	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	  var _createClass3 = _interopRequireDefault(_createClass2);

	  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	  var _inherits3 = _interopRequireDefault(_inherits2);

	  var _react2 = _interopRequireDefault(_react);

	  var _PageView3 = _interopRequireDefault(_PageView2);

	  var _Table2 = _interopRequireDefault(_Table);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  var TextPageView = function (_PageView) {
	    (0, _inherits3.default)(TextPageView, _PageView);

	    function TextPageView() {
	      (0, _classCallCheck3.default)(this, TextPageView);
	      return (0, _possibleConstructorReturn3.default)(this, (TextPageView.__proto__ || (0, _getPrototypeOf2.default)(TextPageView)).apply(this, arguments));
	    }

	    (0, _createClass3.default)(TextPageView, [{
	      key: 'createItemViews',
	      value: function createItemViews(items, showWhitespaces) {
	        // eslint-disable-line no-unused-vars
	        return _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            _Table2.default,
	            { responsive: true },
	            _react2.default.createElement(
	              'thead',
	              null,
	              _react2.default.createElement(
	                'tr',
	                null,
	                _react2.default.createElement(
	                  'th',
	                  null,
	                  '#'
	                ),
	                _react2.default.createElement(
	                  'th',
	                  null,
	                  'Category'
	                ),
	                _react2.default.createElement(
	                  'th',
	                  null,
	                  'Text'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              'tbody',
	              null,
	              items.map(function (block, i) {
	                return _react2.default.createElement(
	                  'tr',
	                  { key: i },
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    i
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    block.category
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(
	                      'pre',
	                      { style: { display: 'inline-block' } },
	                      block.text
	                    )
	                  )
	                );
	              })
	            )
	          )
	        );
	      }
	    }]);
	    return TextPageView;
	  }(_PageView3.default);

	  exports.default = TextPageView;
	});

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(368), __webpack_require__(314), __webpack_require__(304)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('../../components/debug/MarkdownPageView.jsx'), require('./Transformation.jsx'), require('../ParseResult.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.MarkdownPageView, global.Transformation, global.ParseResult);
	        global.ToMarkdown = mod.exports;
	    }
	})(this, function (exports, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _MarkdownPageView, _Transformation2, _ParseResult) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _MarkdownPageView2 = _interopRequireDefault(_MarkdownPageView);

	    var _Transformation3 = _interopRequireDefault(_Transformation2);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var ToMarkdown = function (_Transformation) {
	        (0, _inherits3.default)(ToMarkdown, _Transformation);

	        function ToMarkdown() {
	            (0, _classCallCheck3.default)(this, ToMarkdown);
	            return (0, _possibleConstructorReturn3.default)(this, (ToMarkdown.__proto__ || (0, _getPrototypeOf2.default)(ToMarkdown)).call(this, "To Markdown", "String"));
	        }

	        (0, _createClass3.default)(ToMarkdown, [{
	            key: 'createPageView',
	            value: function createPageView(page, modificationsOnly) {
	                // eslint-disable-line no-unused-vars
	                return _react2.default.createElement(_MarkdownPageView2.default, { key: page.index, page: page });
	            }
	        }, {
	            key: 'transform',
	            value: function transform(parseResult) {
	                parseResult.pages.forEach(function (page) {
	                    var text = '';
	                    page.items.forEach(function (block) {
	                        text += block.text + '\n';
	                    });
	                    page.items = [text];
	                });
	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult));
	            }
	        }]);
	        return ToMarkdown;
	    }(_Transformation3.default);

	    exports.default = ToMarkdown;
	});

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(191), __webpack_require__(316), __webpack_require__(242)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('react'), require('./PageView.jsx'), require('remarkable'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.react, global.PageView, global.remarkable);
	        global.MarkdownPageView = mod.exports;
	    }
	})(this, function (exports, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _react, _PageView2, _remarkable) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _react2 = _interopRequireDefault(_react);

	    var _PageView3 = _interopRequireDefault(_PageView2);

	    var _remarkable2 = _interopRequireDefault(_remarkable);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var MarkdownPageView = function (_PageView) {
	        (0, _inherits3.default)(MarkdownPageView, _PageView);

	        function MarkdownPageView() {
	            (0, _classCallCheck3.default)(this, MarkdownPageView);
	            return (0, _possibleConstructorReturn3.default)(this, (MarkdownPageView.__proto__ || (0, _getPrototypeOf2.default)(MarkdownPageView)).apply(this, arguments));
	        }

	        (0, _createClass3.default)(MarkdownPageView, [{
	            key: 'createItemViews',
	            value: function createItemViews(items, showWhitespaces) {
	                // eslint-disable-line no-unused-vars
	                var remarkable = new _remarkable2.default({
	                    breaks: true
	                });
	                var html = remarkable.render(items[0]);
	                return _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement('div', { dangerouslySetInnerHTML: { __html: html } })
	                );
	            }
	        }]);
	        return MarkdownPageView;
	    }(_PageView3.default);

	    exports.default = MarkdownPageView;
	});

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(160), __webpack_require__(228), __webpack_require__(1), __webpack_require__(2), __webpack_require__(168), __webpack_require__(183), __webpack_require__(330), __webpack_require__(304), __webpack_require__(327), __webpack_require__(346)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports, require('babel-runtime/helpers/extends'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('../ToLineItemTransformation.jsx'), require('../../ParseResult.jsx'), require('../../Annotation.jsx'), require('../../../stringFunctions.jsx'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports, global._extends, global.getPrototypeOf, global.classCallCheck, global.createClass, global.possibleConstructorReturn, global.inherits, global.ToLineItemTransformation, global.ParseResult, global.Annotation, global.stringFunctions);
	        global.RemoveRepetitiveElements = mod.exports;
	    }
	})(this, function (exports, _extends2, _getPrototypeOf, _classCallCheck2, _createClass2, _possibleConstructorReturn2, _inherits2, _ToLineItemTransformation, _ParseResult, _Annotation, _stringFunctions) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    var _extends3 = _interopRequireDefault(_extends2);

	    var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	    var _createClass3 = _interopRequireDefault(_createClass2);

	    var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	    var _inherits3 = _interopRequireDefault(_inherits2);

	    var _ToLineItemTransformation2 = _interopRequireDefault(_ToLineItemTransformation);

	    var _ParseResult2 = _interopRequireDefault(_ParseResult);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    function hashCodeIgnoringSpacesAndNumbers(string) {
	        var hash = 0;
	        if (string.trim().length === 0) return hash;
	        for (var i = 0; i < string.length; i++) {
	            var charCode = string.charCodeAt(i);
	            if (!(0, _stringFunctions.isDigit)(charCode) && charCode != 32 && charCode != 160) {
	                hash = (hash << 5) - hash + charCode;
	                hash |= 0; // Convert to 32bit integer
	            }
	        }
	        return hash;
	    }

	    // Remove elements with similar content on same page positions, like page numbers, licenes information, etc...

	    var RemoveRepetitiveElements = function (_ToLineItemTransforma) {
	        (0, _inherits3.default)(RemoveRepetitiveElements, _ToLineItemTransforma);

	        function RemoveRepetitiveElements() {
	            (0, _classCallCheck3.default)(this, RemoveRepetitiveElements);
	            return (0, _possibleConstructorReturn3.default)(this, (RemoveRepetitiveElements.__proto__ || (0, _getPrototypeOf2.default)(RemoveRepetitiveElements)).call(this, "Remove Repetitive Elements"));
	        }

	        // The idea is the following:
	        // - For each page, collect all items of the first, and all items of the last line
	        // - Calculate how often these items occur accros all pages (hash ignoring numbers, whitespace, upper/lowercase)
	        // - Delete items occuring on more then 2/3 of all pages


	        (0, _createClass3.default)(RemoveRepetitiveElements, [{
	            key: 'transform',
	            value: function transform(parseResult) {

	                // find first and last lines per page
	                var pageStore = [];
	                var minLineHashRepetitions = {};
	                var maxLineHashRepetitions = {};
	                parseResult.pages.forEach(function (page) {
	                    var minMaxItems = page.items.reduce(function (itemStore, item) {
	                        if (item.y < itemStore.minY) {
	                            itemStore.minElements = [item];
	                            itemStore.minY = item.y;
	                        } else if (item.y == itemStore.minY) {
	                            itemStore.minElements.push(item);
	                        }
	                        if (item.y > itemStore.maxY) {
	                            itemStore.maxElements = [item];
	                            itemStore.maxY = item.y;
	                        } else if (item.y == itemStore.maxY) {
	                            itemStore.maxElements.push(item);
	                        }
	                        return itemStore;
	                    }, {
	                        minY: 999,
	                        maxY: 0,
	                        minElements: [],
	                        maxElements: []
	                    });

	                    var minLineHash = hashCodeIgnoringSpacesAndNumbers(minMaxItems.minElements.reduce(function (combinedString, item) {
	                        return combinedString + item.text().toUpperCase();
	                    }, ''));
	                    var maxLineHash = hashCodeIgnoringSpacesAndNumbers(minMaxItems.maxElements.reduce(function (combinedString, item) {
	                        return combinedString + item.text().toUpperCase();
	                    }, ''));
	                    pageStore.push({
	                        minElements: minMaxItems.minElements,
	                        maxElements: minMaxItems.maxElements,
	                        minLineHash: minLineHash,
	                        maxLineHash: maxLineHash
	                    });
	                    minLineHashRepetitions[minLineHash] = minLineHashRepetitions[minLineHash] ? minLineHashRepetitions[minLineHash] + 1 : 1;
	                    maxLineHashRepetitions[maxLineHash] = maxLineHashRepetitions[maxLineHash] ? maxLineHashRepetitions[maxLineHash] + 1 : 1;
	                });

	                // now annoate all removed items
	                var removedHeader = 0;
	                var removedFooter = 0;
	                parseResult.pages.forEach(function (page, i) {
	                    if (minLineHashRepetitions[pageStore[i].minLineHash] >= Math.max(3, parseResult.pages.length * 2 / 3)) {
	                        pageStore[i].minElements.forEach(function (item) {
	                            item.annotation = _Annotation.REMOVED_ANNOTATION;
	                        });
	                        removedFooter++;
	                    }
	                    if (maxLineHashRepetitions[pageStore[i].maxLineHash] >= Math.max(3, parseResult.pages.length * 2 / 3)) {
	                        pageStore[i].maxElements.forEach(function (item) {
	                            item.annotation = _Annotation.REMOVED_ANNOTATION;
	                        });
	                        removedHeader++;
	                    }
	                });

	                return new _ParseResult2.default((0, _extends3.default)({}, parseResult, {
	                    messages: ['Removed Header: ' + removedHeader, 'Removed Footers: ' + removedFooter]
	                }));
	            }
	        }]);
	        return RemoveRepetitiveElements;
	    }(_ToLineItemTransformation2.default);

	    exports.default = RemoveRepetitiveElements;
	});

/***/ })
/******/ ])
});
;